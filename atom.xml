<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>记路心晴</title>
  
  <subtitle>心晴路放</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://songwell1024.github.io/"/>
  <updated>2019-03-10T14:15:39.137Z</updated>
  <id>https://songwell1024.github.io/</id>
  
  <author>
    <name>WilsonSong</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>SpringCloud服务网关Zuul</title>
    <link href="https://songwell1024.github.io/2019/01/21/SpringCloudZuul/"/>
    <id>https://songwell1024.github.io/2019/01/21/SpringCloudZuul/</id>
    <published>2019-01-21T13:52:58.000Z</published>
    <updated>2019-03-10T14:15:39.137Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-简介"><a href="#1-简介" class="headerlink" title="1. 简介"></a>1. 简介</h2><p>在Spring Cloud微服务系统中，一种常见的负载均衡方式是，客户端的请求首先经过负载均衡（zuul、Ngnix），再到达服务网关（zuul集群），然后再到具体的服务，服务统一注册到高可用的服务注册中心集群，服务的所有的配置文件由配置服务管理，配置服务的配置文件放在git仓库，方便开发人员随时改配置。</p><a id="more"></a><p>一、Zuul简介<br>Zuul的主要功能是路由转发和过滤器。路由功能是微服务的一部分，比如／api/user转发到到user务，/api/shop转发到到shop服务。zuul默认和Ribbon结合实现了负载均衡的功能。</p><p>zuul有以下功能：</p><ul><li>Authentication</li><li>Insights</li><li>Stress Testing</li><li>Canary Testing</li><li>Dynamic Routing</li><li>Service Migration</li><li>Load Shedding</li><li>Security</li><li>Static Response handling</li><li>Active/Active traffic management</li></ul><p>spring cloud zuul的架构图如下：</p><p><img src="/2019/01/21/SpringCloudZuul/1.png" alt="1">在Zuul中一次http请求的生命周期如下：</p><p><img src="/2019/01/21/SpringCloudZuul/2.png" alt="2"></p><h2 id="2-Zuul的路由"><a href="#2-Zuul的路由" class="headerlink" title="2. Zuul的路由"></a>2. Zuul的路由</h2><p>创建项目：</p><p><img src="/2019/01/21/SpringCloudZuul/3.png" alt="3"></p><p>配置</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">spring:</span><br><span class="line">  application:</span><br><span class="line">    name: api-gateway</span><br><span class="line">  cloud:</span><br><span class="line">    config:</span><br><span class="line">      discovery:</span><br><span class="line">        enabled: true</span><br><span class="line">        service-id: CONFIG</span><br><span class="line">      profile: test</span><br><span class="line">eureka:</span><br><span class="line">  client:</span><br><span class="line">    service-url:</span><br><span class="line">      defaultZone: http://eureka1:8761/eureka/</span><br></pre></td></tr></table></figure><p>路由转发功能：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">@SpringBootApplication</span><br><span class="line">@EnableZuulProxy</span><br><span class="line">public class ApiGatewayApplication &#123;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        SpringApplication.run(ApiGatewayApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后假如你想访问的微服务的id是product，然后访问的页面是微服务下的product/list页面，则启动应用之后你只需要访问localhost:8080/product/product/list既可以了。只要是你注册在服务中心的应用都可以路由访问到。</p><p>自定义路由：</p><p>添加配置</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">zuul:</span><br><span class="line">  routes:</span><br><span class="line">    myProduct:</span><br><span class="line">      path: /myProduct/**</span><br><span class="line">      serviceId: product</span><br></pre></td></tr></table></figure><p>myProduct:是你自己定义的名称（可以随便定义），path是你自己定义的路径， serviceId: 是你要访问的服务的ID，访问localhost:8080/myProduct/product/list就可以访问了。</p><p>禁止掉某一些路由：ignored-patterns:下面配置你想要禁止访问的路由即可，下面配置的是set类型的数据</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">zuul:</span><br><span class="line">  routes:</span><br><span class="line">    myProduct:</span><br><span class="line">      path: /myProduct/**</span><br><span class="line">      serviceId: product</span><br><span class="line">  ignored-patterns:</span><br><span class="line">    - /product/product/listForOrder</span><br><span class="line">    - /myProduct/product/listForOrder</span><br></pre></td></tr></table></figure><p>还能写成</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ignored-patterns:</span><br><span class="line">  - /**/product/listForOrder</span><br></pre></td></tr></table></figure><p>然后在配置里面添加sensitiveHeaders:并置为空，这样子就可以从前端获取到cokkie了。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">zuul:</span><br><span class="line">  routes:</span><br><span class="line">    myProduct:</span><br><span class="line">      path: /myProduct/**</span><br><span class="line">      serviceId: product</span><br><span class="line">  sensitiveHeaders:</span><br></pre></td></tr></table></figure><h2 id="3-Zuul的过滤功能"><a href="#3-Zuul的过滤功能" class="headerlink" title="3. Zuul的过滤功能"></a>3. Zuul的过滤功能</h2><p>要想过滤的话继承ZuulFilter类并实现其中的方法即可，这里实现的是过滤掉URL后没有token后缀的url地址。pre过滤器。</p><p>pre 过滤器的话默认放在PRE_DECORATION_FILTER_ORDER 前面</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TokenFilter</span> <span class="keyword">extends</span> <span class="title">ZuulFilter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">filterType</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> PRE_TYPE;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">filterOrder</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> PRE_DECORATION_FILTER_ORDER - <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">shouldFilter</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">run</span><span class="params">()</span> <span class="keyword">throws</span> ZuulException </span>&#123;</span><br><span class="line">        RequestContext requestContext = RequestContext.getCurrentContext();</span><br><span class="line">        HttpServletRequest request = requestContext.getRequest();</span><br><span class="line">        <span class="comment">//从url参数获取,也可以从cookie, header里获取</span></span><br><span class="line">        String token = request.getParameter(<span class="string">"token"</span>);</span><br><span class="line">        <span class="keyword">if</span> (StringUtils.isEmpty(token))&#123;</span><br><span class="line">            requestContext.setSendZuulResponse(<span class="keyword">false</span>);</span><br><span class="line">            requestContext.setResponseStatusCode(HttpStatus.SC_UNAUTHORIZED); <span class="comment">//没有认证权限，报错401</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>post过滤器：类型POST_TYPE，优先级默认在SEND_RESPONSE_FILTER_ORDER前面</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">addResponseHeaderFilter</span> <span class="keyword">extends</span> <span class="title">ZuulFilter</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">filterType</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> POST_TYPE;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">filterOrder</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> SEND_RESPONSE_FILTER_ORDER - <span class="number">1</span> ;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">shouldFilter</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">run</span><span class="params">()</span> <span class="keyword">throws</span> ZuulException </span>&#123;</span><br><span class="line">        RequestContext requestContext = RequestContext.getCurrentContext();</span><br><span class="line">        HttpServletResponse response = requestContext.getResponse();</span><br><span class="line">        response.setHeader(<span class="string">"X-Foo"</span>, UUID.randomUUID().toString());</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="4-Zuul限流"><a href="#4-Zuul限流" class="headerlink" title="4. Zuul限流"></a>4. Zuul限流</h2><p>限流放在pre过滤器中使用，在请求被转发之前调用。并且限流是最高的，因为限流的话是要要放在最前面实现的。</p><p>令牌桶限流。</p><p><img src="/2019/01/21/SpringCloudZuul/4.png" alt="4"></p><p>具体实现如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RateFilter</span>  <span class="keyword">extends</span> <span class="title">ZuulFilter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> RateLimiter RATE_LIMITER = RateLimiter.create(<span class="number">100</span>); <span class="comment">//google开源的令牌桶算法</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">filterType</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> PRE_TYPE;  <span class="comment">//在pre之前做的，所以过滤器是pre类型的</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">filterOrder</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> SERVLET_DETECTION_FILTER_ORDER -<span class="number">1</span>;  <span class="comment">//SERVLET_DETECTION_FILTER_ORDER优先级最小，优先级越小越早执行</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">shouldFilter</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">run</span><span class="params">()</span> <span class="keyword">throws</span> ZuulException </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!RATE_LIMITER.tryAcquire())&#123;  <span class="comment">//就是没有拿到令牌的话</span></span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RateLimmitException();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="5-Zuul鉴权"><a href="#5-Zuul鉴权" class="headerlink" title="5. Zuul鉴权"></a>5. Zuul鉴权</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AuthFilter</span> <span class="keyword">extends</span> <span class="title">ZuulFilter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    StringRedisTemplate stringRedisTemplate;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">filterType</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> PRE_TYPE;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">filterOrder</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> PRE_DECORATION_FILTER_ORDER - <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">shouldFilter</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">run</span><span class="params">()</span> <span class="keyword">throws</span> ZuulException </span>&#123;</span><br><span class="line">        RequestContext requestContext = RequestContext.getCurrentContext();</span><br><span class="line">        HttpServletRequest request = requestContext.getRequest();</span><br><span class="line">        <span class="comment">//从url参数获取,也可以从cookie, header里获取</span></span><br><span class="line">        String token = request.getParameter(<span class="string">"token"</span>);</span><br><span class="line">        <span class="keyword">if</span> (StringUtils.isEmpty(token))&#123;</span><br><span class="line">            <span class="comment">/**</span></span><br><span class="line"><span class="comment">             * /order/create 只能买家访问（cookie中有openid）</span></span><br><span class="line"><span class="comment">             * /order/finish 只能卖家访问(cookie中有token,并且对应Redis中的值)</span></span><br><span class="line"><span class="comment">             * /product/list 都能访问</span></span><br><span class="line"><span class="comment">             */</span></span><br><span class="line">            <span class="keyword">if</span> (<span class="string">"/order/order/create"</span>.equals(request.getRequestURI()))&#123;</span><br><span class="line">                Cookie cookie = CookieUtil.get(request, <span class="string">"openid"</span>);</span><br><span class="line">                <span class="keyword">if</span> (cookie == <span class="keyword">null</span> || StringUtils.isEmpty(cookie.getValue()))&#123;</span><br><span class="line">                    requestContext.setSendZuulResponse(<span class="keyword">false</span>);</span><br><span class="line">                    requestContext.setResponseStatusCode(HttpStatus.SC_UNAUTHORIZED);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (<span class="string">"/order/order/create"</span>.equals(request.getRequestURI()))&#123;</span><br><span class="line">                Cookie cookie = CookieUtil.get(request, <span class="string">"token"</span>);</span><br><span class="line">                <span class="keyword">if</span> (cookie == <span class="keyword">null</span> || StringUtils.isEmpty(cookie.getValue()) ||</span><br><span class="line">                        StringUtils.isEmpty(stringRedisTemplate.opsForValue().get(String.format(RedisConstant.TOKEN_TEMPLATE, cookie.getValue()))))&#123;</span><br><span class="line">                    requestContext.setSendZuulResponse(<span class="keyword">false</span>);</span><br><span class="line">                    requestContext.setResponseStatusCode(HttpStatus.SC_UNAUTHORIZED);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="5-Zuul跨域访问"><a href="#5-Zuul跨域访问" class="headerlink" title="5. Zuul跨域访问"></a>5. Zuul跨域访问</h2><p>首先在springboot中要想对某一个接口跨域访问的话，直接在该方法或者是类上添加</p><p>@CrossOrigin的注解，表明可以支持跨域访问。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CorsConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> CorsFilter <span class="title">corsFilter</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">final</span> UrlBasedCorsConfigurationSource source = <span class="keyword">new</span> UrlBasedCorsConfigurationSource();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">final</span> CorsConfiguration config = <span class="keyword">new</span> CorsConfiguration();</span><br><span class="line">        config.setAllowedOrigins(Arrays.asList(<span class="string">"*"</span>));  <span class="comment">//哪些原始域的cookie可以跨域访问</span></span><br><span class="line">        config.setAllowedHeaders(Arrays.asList(<span class="string">"*"</span>));  <span class="comment">//头</span></span><br><span class="line">        config.setAllowedMethods(Arrays.asList(<span class="string">"*"</span>));  <span class="comment">//方法</span></span><br><span class="line">        config.setMaxAge(<span class="number">300l</span>);  <span class="comment">//缓存时间，在设置的时间段内对于相同的跨域请求不再检查</span></span><br><span class="line">        source.registerCorsConfiguration(<span class="string">"/**"</span>, config);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> CorsFilter(source);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;1-简介&quot;&gt;&lt;a href=&quot;#1-简介&quot; class=&quot;headerlink&quot; title=&quot;1. 简介&quot;&gt;&lt;/a&gt;1. 简介&lt;/h2&gt;&lt;p&gt;在Spring Cloud微服务系统中，一种常见的负载均衡方式是，客户端的请求首先经过负载均衡（zuul、Ngnix），再到达服务网关（zuul集群），然后再到具体的服务，服务统一注册到高可用的服务注册中心集群，服务的所有的配置文件由配置服务管理，配置服务的配置文件放在git仓库，方便开发人员随时改配置。&lt;/p&gt;
    
    </summary>
    
      <category term="SpringCloud" scheme="https://songwell1024.github.io/categories/SpringCloud/"/>
    
    
      <category term="SpringCloud" scheme="https://songwell1024.github.io/tags/SpringCloud/"/>
    
  </entry>
  
  <entry>
    <title>SpringCloud异步消息</title>
    <link href="https://songwell1024.github.io/2019/01/19/SpringCloudQueue/"/>
    <id>https://songwell1024.github.io/2019/01/19/SpringCloudQueue/</id>
    <published>2019-01-19T13:50:26.000Z</published>
    <updated>2019-03-09T13:52:29.761Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-Docker-Quickstart-Terminal-该快捷方式所指向的项目“bash-exe”已经更改或移动"><a href="#1-Docker-Quickstart-Terminal-该快捷方式所指向的项目“bash-exe”已经更改或移动" class="headerlink" title="1. Docker Quickstart Terminal 该快捷方式所指向的项目“bash.exe”已经更改或移动"></a>1. Docker Quickstart Terminal 该快捷方式所指向的项目“bash.exe”已经更改或移动</h2><p>出现这个问题是由于之前装过Git，安装Docker默认生成的快捷方式中，Git的路径是C:\Program Files\Git\bin\bash.exe。而之前安装的Git并不是这个路径，所以就会报找不到应用程序的问题。此时只要把Git的路径改为自己之前安装的路径即可，比如我的就在D:\Program Files\Git\bin\bash.exe，修改后的Target为如图所示（后面的路径不用修改）：</p><a id="more"></a><p><img src="/2019/01/19/SpringCloudQueue/1.png" alt="1"></p><p>在docker下安装rabbitmq：<a href="https://hub.docker.com/_/rabbitmq/" target="_blank" rel="noopener">https://hub.docker.com/_/rabbitmq/</a></p><p><img src="/2019/01/19/SpringCloudQueue/2.png" alt="2"></p><p>–hostname必填， -p 15672:15672是管理员登录端口（将端口映射为本机端口），默认的用户名和密码均为guest。</p><p>然后登录你的docker的地址+ 15672就可以进入到rabbitmq的管理员界面了。（192.168.99.100：15672）</p><p><img src="/2019/01/19/SpringCloudQueue/3.png" alt="3"></p><h2 id="2-使用spring-cloud-stream"><a href="#2-使用spring-cloud-stream" class="headerlink" title="2.使用spring cloud stream"></a>2.使用spring cloud stream</h2><p>在springcloud中可以使用rabbitmq实现异步消息对列。springcloud中提供了一个spring cloud stream的组件实现异步消息对列的操作。但是spring cloud stream只支持rabbitmq和kafka.</p><p>spring cloud stream是对中间件的进一步封装，可以更加方便灵活的使用中间件，甚至可以做到对中间件代码层的无感知，和中间件的切换。</p><p><img src="/2019/01/19/SpringCloudQueue/C:/Users/Song/Desktop/SpringCloud/springcloudstream/4.png" alt="1"></p><p>首先还是引入依赖：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;spring-cloud-starter-stream-rabbit&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><p>定义一个stream的发送接口：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">StreamClient</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    String INPUT = <span class="string">"myMessage"</span>;</span><br><span class="line"></span><br><span class="line">    String INPUT2 = <span class="string">"myMessage2"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Input</span>(StreamClient.INPUT)</span><br><span class="line">    <span class="function">SubscribableChannel <span class="title">input</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Output</span>(StreamClient.INPUT2)</span><br><span class="line">    <span class="function">MessageChannel <span class="title">output</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>定义一个stream的接收类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@EnableBinding</span>(StreamClient.class)  <span class="comment">//定义的发送的接口类</span></span><br><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StreamReceiver</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 接收orderDTO对象 消息</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> message</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@StreamListener</span>(value = StreamClient.INPUT)</span><br><span class="line">    <span class="meta">@SendTo</span>(StreamClient.INPUT2)     <span class="comment">//这个注解其实是消息处理完之后再返回给消息对列一个消息</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">process</span><span class="params">(OrderDTO message)</span> </span>&#123;</span><br><span class="line">        log.info(<span class="string">"StreamReceiver: &#123;&#125;"</span>, message);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"received."</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@StreamListener</span>(value = StreamClient.INPUT2)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">process2</span><span class="params">(String message)</span> </span>&#123;</span><br><span class="line">        log.info(<span class="string">"StreamReceiver2: &#123;&#125;"</span>, message);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试一下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SendMessageController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> StreamClient streamClient;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//发送消息</span></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/sendMessage"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">process</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        String message = <span class="string">"now "</span> + <span class="keyword">new</span> Date();</span><br><span class="line">        streamClient.output().send(MessageBuilder.withPayload(message).build());</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 发送 orderDTO对象</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/sendMessage"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">process</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        OrderDTO orderDTO = <span class="keyword">new</span> OrderDTO();</span><br><span class="line">        orderDTO.setOrderId(<span class="string">"123456"</span>);</span><br><span class="line">        streamClient.output().send(MessageBuilder.withPayload(orderDTO).build());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样就实现了消息的发送和接收，但是还有一个问题就是当你的启动多个实例的时候，每个实例中的对列都会收到消息，其实只需要需要的那个对列获取到消息即可。要实现这样的话其实就是需要在配置文件中配置一下分组的信息。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">spring:</span><br><span class="line">  application:</span><br><span class="line">    name: order</span><br><span class="line">  cloud:</span><br><span class="line">    config:</span><br><span class="line">      discovery:</span><br><span class="line">        enabled: true</span><br><span class="line">        service-id: CONFIG</span><br><span class="line">      profile: test</span><br><span class="line">    stream:</span><br><span class="line">      bindings:</span><br><span class="line">        myMessage:</span><br><span class="line">          group: order</span><br><span class="line">          content-type: application/json</span><br></pre></td></tr></table></figure><p>其实就是给bindings分组命名就可以了。就是把所有启动的实例分到一个组里面，这样的话一个组里的所有实例只会有一个接收到消息，其余的不会接收到消息。content-type: application/json的注解其实就是使得rabbitmq中拿到的消息是json。</p><p>消息处理完成之后返回给对列一个消息的时候怎么处理呢？</p><p> StreamReceiver端添加注解：@SendTo(StreamClient.INPUT2)     //这个注解其实是消息处理完之后再返回给消息对列一个消息</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;1-Docker-Quickstart-Terminal-该快捷方式所指向的项目“bash-exe”已经更改或移动&quot;&gt;&lt;a href=&quot;#1-Docker-Quickstart-Terminal-该快捷方式所指向的项目“bash-exe”已经更改或移动&quot; class=&quot;headerlink&quot; title=&quot;1. Docker Quickstart Terminal 该快捷方式所指向的项目“bash.exe”已经更改或移动&quot;&gt;&lt;/a&gt;1. Docker Quickstart Terminal 该快捷方式所指向的项目“bash.exe”已经更改或移动&lt;/h2&gt;&lt;p&gt;出现这个问题是由于之前装过Git，安装Docker默认生成的快捷方式中，Git的路径是C:\Program Files\Git\bin\bash.exe。而之前安装的Git并不是这个路径，所以就会报找不到应用程序的问题。此时只要把Git的路径改为自己之前安装的路径即可，比如我的就在D:\Program Files\Git\bin\bash.exe，修改后的Target为如图所示（后面的路径不用修改）：&lt;/p&gt;
    
    </summary>
    
      <category term="SpringCloud" scheme="https://songwell1024.github.io/categories/SpringCloud/"/>
    
    
      <category term="SpringCloud" scheme="https://songwell1024.github.io/tags/SpringCloud/"/>
    
  </entry>
  
  <entry>
    <title>SpringCloud统一配置中心</title>
    <link href="https://songwell1024.github.io/2019/01/18/SpringCloudConfig/"/>
    <id>https://songwell1024.github.io/2019/01/18/SpringCloudConfig/</id>
    <published>2019-01-18T13:47:23.000Z</published>
    <updated>2019-03-09T13:49:41.519Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-config-server"><a href="#1-config-server" class="headerlink" title="1.config server"></a>1.config server</h2><p>创建的过程和正常的springcloud工程是一样的，只是因为这里是config的应用，需要勾选cloud config —&gt; config server的选项。同时config也是一个微服务，所以同样需要向Euerka server注册，所以同时需要勾选 cloud discovery —&gt; eureka discovery。</p><a id="more"></a><p>在启动应用上添加注解,表示该应用既是config sever又是eureka client</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@EnableDiscoveryClient</span></span><br><span class="line"><span class="meta">@EnableConfigServer</span></span><br></pre></td></tr></table></figure><p>其实在创建应用的时候已经是勾选了config server，所以pom文件中已经是有config的依赖了。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-config-server<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>然后启动会报错，因为config统一配置中心是需要不断的从仓库中拉取配置文件的信息的，这里其实到现在还没有配置仓库，所以在你的GitHub上配置一个存储库，然后在application中配置你的仓库信息如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">eureka:</span><br><span class="line">  client:</span><br><span class="line">    service-url:</span><br><span class="line">      defaultZone: http://localhost:8761/eureka/</span><br><span class="line">spring:</span><br><span class="line">  application:</span><br><span class="line">    name: config</span><br><span class="line">  cloud:</span><br><span class="line">    config:</span><br><span class="line">      server:</span><br><span class="line">        git:</span><br><span class="line">          uri: https://github.com/songwell1024/config-repo   #仓库地址</span><br><span class="line">          username: xxxxxxx  #你的GitHub的用户名</span><br><span class="line">          password: *******  #你的GitHub的密码</span><br></pre></td></tr></table></figure><p>这时候启动，然后访问localhost:8080/order-a.yml就可以读取到配置文件的信息。（order）是你的配置文件名，其实说是项目名也可以。-a的后缀的命名方式：</p><p>其实应用启动之后有很多的命名，如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">/&#123;name&#125;-&#123;profiles&#125;.yml</span><br><span class="line">/&#123;label&#125;/&#123;name&#125;-&#123;profiles&#125;.yml</span><br></pre></td></tr></table></figure><p>name是你的配置文件的名字，Profiles是环境，label是你的仓库的分支，默认是master。</p><p>然后拉取下来的配置文件config其实生成了一个存储路径，但是这个路径是可以指定的，只需要加一个basedir的配置即可。</p><h2 id="2-config-client"><a href="#2-config-client" class="headerlink" title="2.config client"></a>2.config client</h2><p>既然配置文件已经放在存储库中了，那么其实微服务是不需要在配置这些信息了，直接从配置中心取就可以了。怎么做呢？</p><p>在你的微服务中引入依赖：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-config-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>不需要添加注解。</p><p>配置文件中添加如下配置：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">spring:</span><br><span class="line">  application:</span><br><span class="line">    name: order</span><br><span class="line">  cloud:</span><br><span class="line">    config:</span><br><span class="line">      discovery:</span><br><span class="line">        enabled: <span class="keyword">true</span></span><br><span class="line">        service-id: CONFIG</span><br><span class="line">      profile: test</span><br></pre></td></tr></table></figure><p>service-id是你的配置中心的名字，然后profile就是访问时候的后缀环境。最终访问的时候就是localhost：8080/order-test.</p><p>启动会报如下错误：</p><p>Cannot determine embedded database driver class for database type NONE.</p><p>其实就是找不到数据库。</p><p>因为你的配置是写在application.yml下的，当微服务启动的时候，你不知道他会不会先加载这里面的配置信息，如果还没有加载而去配置数据库的信息，导致了报错。</p><p>在springboot中有一个文件叫bootstrap.yml的配置文件，他是先加载先启动的，这样的话就可以先把配置信息启动了，然后就可以正常启动了。</p><p>然后上面的配置的eureka的地址是8761，然后当你该为8762 的时候，同时把config server和config client 还有你的配置的仓库中配置全部改为8762，然后再启动才可以，注意只要改配置的端口的话就要都改。</p><p><strong>然后我的配置仓库中有一个order.yml 还有一个order-test的yml文件，上面的配置我们看到profile: test，也就是应该加载order-test.yml文件，但是其实启动的时候order也会加载，并且会把两个配置信息进行合并，这里会导致错误，一定要注意。这里默认的可能是order是微服务的名字，把这些一order有关的配置都会加载进来</strong></p><h2 id="spring-cloud-bus-实现配置自动刷新"><a href="#spring-cloud-bus-实现配置自动刷新" class="headerlink" title="spring cloud bus 实现配置自动刷新"></a>spring cloud bus 实现配置自动刷新</h2><p>我们每次修改配置之后不能总是重新启动然后实现更新吧，可不可以实现配置中心修改完配置之后通知到微服务（微服务之间的消息的传递最好是使用消息对队列的方式），然后微服务读取到这个更新呢？</p><p>系统的架构如下所示：</p><p><img src="/2019/01/18/SpringCloudConfig/1.png" alt="1"></p><p>spring cloud bus会暴露出/bus-refresh的接口，config访问就可以读取到配置文件的更新。</p><p>config配置中心引入依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-bus-amqp<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>同时你的微服务也需要添加依赖，因为都需要使用。</p><p>然后在你的config server的yml文件中配置如下：也就是要把这个接口暴露出来，然后访问才不会报错。”*”就是把所有的接口都暴露出来。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">management:</span><br><span class="line">  endpoints:</span><br><span class="line">    web:</span><br><span class="line">      exposure:</span><br><span class="line">        include: <span class="string">"*"</span></span><br></pre></td></tr></table></figure><p>然后在你的读取配置的地方还需要添加注解:@RefreshScope</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/test"</span>)</span><br><span class="line"><span class="meta">@RefreshScope</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EnvController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;test&#125;"</span>)</span><br><span class="line">    <span class="keyword">private</span> String test;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/print"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">print</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> test;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>集成WebHooks实现配置自动刷新：GitHub配置仓库添加WebHooks，spring cloud config提供了一个叫monitor的路由来访问/bus-refresh。所以你的URL后面是monitor，然后前面是将本机地址随机映射成为的外网地址。</p><p><img src="/2019/01/18/SpringCloudConfig/2.png" alt="2"></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;1-config-server&quot;&gt;&lt;a href=&quot;#1-config-server&quot; class=&quot;headerlink&quot; title=&quot;1.config server&quot;&gt;&lt;/a&gt;1.config server&lt;/h2&gt;&lt;p&gt;创建的过程和正常的springcloud工程是一样的，只是因为这里是config的应用，需要勾选cloud config —&amp;gt; config server的选项。同时config也是一个微服务，所以同样需要向Euerka server注册，所以同时需要勾选 cloud discovery —&amp;gt; eureka discovery。&lt;/p&gt;
    
    </summary>
    
      <category term="SpringCloud" scheme="https://songwell1024.github.io/categories/SpringCloud/"/>
    
    
      <category term="SpringCloud" scheme="https://songwell1024.github.io/tags/SpringCloud/"/>
    
  </entry>
  
  <entry>
    <title>SpringCloud微服务之间的通信</title>
    <link href="https://songwell1024.github.io/2019/01/17/SpringCloudCommunition/"/>
    <id>https://songwell1024.github.io/2019/01/17/SpringCloudCommunition/</id>
    <published>2019-01-17T13:44:23.000Z</published>
    <updated>2019-03-09T13:46:59.064Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-服务之间的通信"><a href="#1-服务之间的通信" class="headerlink" title="1. 服务之间的通信"></a>1. 服务之间的通信</h2><p>应用之间通信的常见的两种方式是http和RPC方式。典型的代表框架就是SpringCloud和Dubbo</p><p>SpringCloud中使用RestTemplate实现应用间的通信。举一个简单的例子来实现下。</p><p>现在有订单和商品两个服务，现在要时候订单服务去调用商品服务。</p><a id="more"></a><p>商品服务端</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ServerController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/msg"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">msg</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"this is product msg"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>订单服务端</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ClientController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/getProductMsg"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getProductMsg</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//1.第一种方式</span></span><br><span class="line">        RestTemplate restTemplate = <span class="keyword">new</span> RestTemplate();</span><br><span class="line">        String response = restTemplate.getForObject(<span class="string">"http://localhost:8080/msg"</span>,String.class);</span><br><span class="line">        log.info(<span class="string">"response=&#123;&#125;"</span>, response);</span><br><span class="line">        <span class="keyword">return</span> response;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/2019/01/17/SpringCloudCommunition/1.png" alt="1"></p><p>访问可以得到商品服务端返回的信息。</p><p>上面的方式要访问固定的URL,这样就肯定是不方便的，假如上面的应用我有多个地址，或者当你根本不知道地址的时候怎么办？</p><p>第二种方式使用LoadBalancerClient通过应用名获取URL等信息。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> LoadBalancerClient loadBalancerClient;</span><br><span class="line"></span><br><span class="line">RestTemplate restTemplate = <span class="keyword">new</span> RestTemplate();</span><br><span class="line">        ServiceInstance serviceInstance = loadBalancerClient.choose(<span class="string">"PRODUCT"</span>);</span><br><span class="line">        String url = String.format(<span class="string">"http://%s:%s"</span>,serviceInstance.getHost(), serviceInstance.getPort()) + <span class="string">"/msg"</span>;</span><br><span class="line">        String response = restTemplate.getForObject(url,String.class);</span><br><span class="line">        log.info(<span class="string">"response=&#123;&#125;"</span>, response);</span><br><span class="line">        <span class="keyword">return</span> response;</span><br></pre></td></tr></table></figure><p>loadBalancerClient.choose(“PRODUCT”);中的PRODUCT是你的服务注册在server端的名字</p><p>第三种方式使用注解的方式</p><p>首先配置一个类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RestTemplateConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="meta">@LoadBalanced</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> RestTemplate <span class="title">restTemplate</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> RestTemplate();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在controller中配置如下：PRODUCT为微服务的应用名</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">RestTemplate restTemplate = <span class="keyword">new</span> RestTemplate();</span><br><span class="line">String response = restTemplate.getForObject(<span class="string">"http://PRODUCT/msg"</span>,String.class);</span><br><span class="line">log.info(<span class="string">"response=&#123;&#125;"</span>, response);</span><br><span class="line"><span class="keyword">return</span> response;</span><br></pre></td></tr></table></figure><h2 id="2-客户端的负载均衡器-Ribbon"><a href="#2-客户端的负载均衡器-Ribbon" class="headerlink" title="2. 客户端的负载均衡器-Ribbon"></a>2. 客户端的负载均衡器-Ribbon</h2><p>SpringCloud是客户端发现，他的负载均衡是软负载均衡，也就是eureka通过拉取已经注册的服务，然后通过负载均衡策略直接命中相应的服务。SpringCloud中的客户端的负载均衡器是Ribbon</p><p>Ribbon下的组件主要有：ServerList，IRule，ServerListFilter等，主要流程是通过serverlist获取所有可用的服务列表，然后ServerListFilter会过滤掉一部分的地址，最后使用IRule从剩下的服务列表中选择一个实例作为最后的目标。</p><p>Ribbon中的负载均衡的策略是通过轮询的方式实现的。要是想改变负载均衡的策略的话可以在yml文件中配置如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">users:</span><br><span class="line">  ribbon:</span><br><span class="line">    NIWSServerListClassName: com.netflix.loadbalancer.ConfigurationBasedServerList</span><br><span class="line">    NFLoadBalancerRuleClassName: com.netflix.loadbalancer.WeightedResponseTimeRule</span><br></pre></td></tr></table></figure><p>不同的版本的配置可能不同我这里的版本是Greenwich.RC2。具体的可以去官网查看<a href="https://cloud.spring.io/spring-cloud-static/Finchley.SR2/" target="_blank" rel="noopener">Reference Doc.</a>users是你的微服务的名字</p><h2 id="3-Spring-Cloud-声明式服务调用-Feign"><a href="#3-Spring-Cloud-声明式服务调用-Feign" class="headerlink" title="3. Spring Cloud 声明式服务调用 Feign"></a>3. Spring Cloud 声明式服务调用 Feign</h2><p>上面说到Ribbon做的负载均衡是用的Spring提供RestTemple来做的请求。</p><p>Springcloud的Fegin组件，这个组件是Spring提供的封装好的跨服调用组建可以使服务之间的调用更为便捷。</p><p>官网有介绍是怎么使用的：<a href="https://cloud.spring.io/spring-cloud-static/Greenwich.RC2/multi/multi_spring-cloud-feign.html#netflix-feign-starter" target="_blank" rel="noopener">https://cloud.spring.io/spring-cloud-static/Greenwich.RC2/multi/multi_spring-cloud-feign.html#netflix-feign-starter</a></p><p>引入依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-openfeign<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在启动应用中添加注解</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.cloud.openfeign.EnableFeignClients;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableDiscoveryClient</span></span><br><span class="line"><span class="meta">@EnableFeignClients</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OrderApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(OrderApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>声明你要调用的是那些服务的那些接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@FeignClient</span>(name = <span class="string">"product"</span>)  </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ProductClient</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/msg"</span>)</span><br><span class="line">    <span class="function">String <span class="title">productMsg</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>name属性是你的服务名，@GetMapping(“/msg”)下的地址是你要调用的接口。也就是你的服务下要有这个接口，要不然你调用的是个锤子。</p><p>在客户端调用的时候直接使用上面的类实现调用即可，注意的是对应好返回类型。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ClientController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    ProductClient productClient;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/getProductMsg"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getProductMsg</span><span class="params">()</span></span>&#123;</span><br><span class="line">        String response = productClient.productMsg();</span><br><span class="line">        <span class="keyword">return</span> response;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过上面我们发现它使用的是基于接口的注解的方式实现服务之间的调用。</p><p>当你的方法中有@RequestBody时，请使用@PostMapping的注解，因为你传入的不止一个参数。但是当你使用@PathVarible，@ReauestParam或者是无参数传入的时候可以使用@GetMapping的注解，其实最主要的是看你的前端请求是post方式还是get方式。</p><p>注意：</p><p><strong>Optional 类</strong>主要解决的问题是臭名昭著的空指针异常（NullPointerException）</p><h2 id="4-多服务拆分"><a href="#4-多服务拆分" class="headerlink" title="4. 多服务拆分"></a>4. 多服务拆分</h2><p>使用上面的ribbon的方式实现了应用间的调用，但是发现每个应用之间是存在冗余的部分的，可以把这些东西抽取出来做成公共的模块，然后有一些互相调用的东西也可以做成公共的接口去实现。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;1-服务之间的通信&quot;&gt;&lt;a href=&quot;#1-服务之间的通信&quot; class=&quot;headerlink&quot; title=&quot;1. 服务之间的通信&quot;&gt;&lt;/a&gt;1. 服务之间的通信&lt;/h2&gt;&lt;p&gt;应用之间通信的常见的两种方式是http和RPC方式。典型的代表框架就是SpringCloud和Dubbo&lt;/p&gt;
&lt;p&gt;SpringCloud中使用RestTemplate实现应用间的通信。举一个简单的例子来实现下。&lt;/p&gt;
&lt;p&gt;现在有订单和商品两个服务，现在要时候订单服务去调用商品服务。&lt;/p&gt;
    
    </summary>
    
      <category term="SpringCloud" scheme="https://songwell1024.github.io/categories/SpringCloud/"/>
    
    
      <category term="SpringCloud" scheme="https://songwell1024.github.io/tags/SpringCloud/"/>
    
  </entry>
  
  <entry>
    <title>SpringCloud Eureka---服务注册与发现</title>
    <link href="https://songwell1024.github.io/2019/01/16/SpringCloudEureka/"/>
    <id>https://songwell1024.github.io/2019/01/16/SpringCloudEureka/</id>
    <published>2019-01-16T03:14:58.000Z</published>
    <updated>2019-03-10T14:15:18.570Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-创建服务注册中心"><a href="#1-创建服务注册中心" class="headerlink" title="1 创建服务注册中心"></a>1 创建服务注册中心</h2><p>在这里，我们需要用的的组件上Spring Cloud Netflix的Eureka ,Eureka 是一个服务注册和发现模块。</p><a id="more"></a><h3 id="1-1-创建maven工程"><a href="#1-1-创建maven工程" class="headerlink" title="1.1 创建maven工程"></a>1.1 创建maven工程</h3><p><img src="/2019/01/16/SpringCloudEureka/1.png" alt="1"></p><p><img src="SpringCloudEureka//2.png" alt="2"></p><p>这样工程就创建完成了。</p><h3 id="1-2-启动服务注册中心"><a href="#1-2-启动服务注册中心" class="headerlink" title="1.2 启动服务注册中心"></a>1.2 启动服务注册中心</h3><p>在启动程序出加上@EnableEurekaServer注解即可</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableEurekaServer</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EurekaApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(EurekaApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这时候启动程序会报错</p><p><img src="/2019/01/16/SpringCloudEureka/3.png" alt="3"></p><p>这是因为eureka是一个高可用的组件，它没有后端缓存，每一个实例注册之后需要向注册中心发送心跳（因此可以在内存中完成），在默认情况下erureka server既是一个server也是一个eureka client ,对于一个client来说必须要指定一个 server。</p><p>配置application.yml文件，把自己注册到自己上就可以（应用刚启动可能注册不上，注册的过程是一个发送心跳的过程，隔一段时间就会进行注册，这时候就会注册成功）</p><p>再启动还是有错误的，因为在默认设置下，Eureka服务注册中心也会将自己作为客户端来尝试注册它自己，所以我们需要禁用它的客户端注册行为。使用</p><p><code>register-with-eureka: false</code>  和  </p><p><code>fetch-registry: false</code>禁止掉即可</p><p><img src="/2019/01/16/SpringCloudEureka/4.png" alt="4"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">eureka:</span><br><span class="line">  client:</span><br><span class="line">    service-url:</span><br><span class="line">      defaultZone: http:<span class="comment">//localhost:8761/eureka/</span></span><br><span class="line">    register-with-eureka: <span class="keyword">false</span></span><br><span class="line">    fetch-registry: <span class="keyword">false</span></span><br><span class="line">spring:</span><br><span class="line">  application:</span><br><span class="line">    name: eureka</span><br><span class="line">server:</span><br><span class="line">  port: <span class="number">8761</span></span><br></pre></td></tr></table></figure><h3 id="1-3-创建服务提供者–eureka-client"><a href="#1-3-创建服务提供者–eureka-client" class="headerlink" title="1.3 创建服务提供者–eureka client"></a>1.3 创建服务提供者–eureka client</h3><p>创建工程的过程与上面类似，选择Cloud Discovery—&gt;Eureka Discovery即可</p><p>加@EnableDiscoveryClient注解声明这是一个client</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableDiscoveryClient</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EurekaclientApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(EurekaclientApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>application.yml中的配置</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">eureka:</span><br><span class="line">  client:</span><br><span class="line">    service-url:</span><br><span class="line">      defaultZone: http:<span class="comment">//localhost:8761/eureka/  #这是你的server的地址</span></span><br><span class="line">spring:</span><br><span class="line">  application:</span><br><span class="line">    name: client</span><br></pre></td></tr></table></figure><p>启动服务（确保你上面的配置的server是启动中的，要不然找不到注册服务的服务中心），发现服务启动完成立即终止，也不会去向服务端注册</p><p><img src="/2019/01/16/SpringCloudEureka/6.png" alt="6"></p><p>需要添加如下的依赖</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;</span><br><span class="line"> &lt;/dependency&gt;</span><br></pre></td></tr></table></figure><p>再启动服务，发现在server端已经注册完成了</p><p><img src="/2019/01/16/SpringCloudEureka/7.png" alt="7"></p><p>当你频繁启动的时候，会发现包如下的提示：</p><p><img src="/2019/01/16/SpringCloudEureka/C:/Users/Song/Desktop/SpringCloud/Eureka/5.png" alt="5"></p><p>这是因为client与server端使用的是心跳机制，server端会不断的去检测client是否存活，会统计一个上线率，当低于某个值时就会出现上面的提示。开发环境下可以把他关掉，但是生产环境下务必保持开启。</p><p>在server端的yml添加如下配置：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">server:</span><br><span class="line">  enable-self-preservation: <span class="keyword">false</span></span><br></pre></td></tr></table></figure><h3 id="1-4-Eureka的高可用"><a href="#1-4-Eureka的高可用" class="headerlink" title="1.4 Eureka的高可用"></a>1.4 Eureka的高可用</h3><p>其实上面的配置是单体的，就是一个client向一个server注册，当这个server崩溃时服务补救挂掉了吗。怎么解决？可以多建立几台服务器，部署多个Eureka，然后向多个Eureka server之间互相注册。</p><p>配置两个服务，然后设置不同的端口。</p><p><img src="/2019/01/16/SpringCloudEureka/8.png" alt="8"></p><p>然后启动的时候把server-port注释掉，启动EurekaApplication1,EurekaApplication1的配置如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">eureka:</span><br><span class="line">  client:</span><br><span class="line">    service-url:</span><br><span class="line">      defaultZone: http:<span class="comment">//localhost:8762/eureka/  #这里就是把Eureka1注册到Eureka2上</span></span><br><span class="line">    register-with-eureka: <span class="keyword">false</span></span><br><span class="line">    fetch-registry: <span class="keyword">false</span></span><br><span class="line">  server:</span><br><span class="line">    enable-self-preservation: <span class="keyword">false</span></span><br><span class="line">spring:</span><br><span class="line">  application:</span><br><span class="line">    name: eureka</span><br></pre></td></tr></table></figure><p>启动EurekaApplication2,EurekaApplication2的配置如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">eureka:</span><br><span class="line">  client:</span><br><span class="line">    service-url:</span><br><span class="line">      defaultZone: http:<span class="comment">//localhost:8761/eureka/  #这里就是把Eureka2注册到Eureka1上</span></span><br><span class="line">    register-with-eureka: <span class="keyword">false</span></span><br><span class="line">    fetch-registry: <span class="keyword">false</span></span><br><span class="line">  server:</span><br><span class="line">    enable-self-preservation: <span class="keyword">false</span></span><br><span class="line">spring:</span><br><span class="line">  application:</span><br><span class="line">    name: eureka</span><br></pre></td></tr></table></figure><p>启动客户端，客户端的注册地址只有 <a href="http://localhost:8761/eureka/，但是分别打开" target="_blank" rel="noopener">http://localhost:8761/eureka/，但是分别打开</a> <a href="http://localhost:8761和" target="_blank" rel="noopener">http://localhost:8761和</a> <a href="http://localhost:8762我们发现client在两个server端都注册了，这是因为两个Eureka的server互相注册，当client注册到Eureka-server1时会同时同步到Eureka-server2上。这个时候Eureka-server1挂掉也是没关系的。" target="_blank" rel="noopener">http://localhost:8762我们发现client在两个server端都注册了，这是因为两个Eureka的server互相注册，当client注册到Eureka-server1时会同时同步到Eureka-server2上。这个时候Eureka-server1挂掉也是没关系的。</a></p><p>但是Eureka-server1挂掉之后，在重新注册client是注册不上的，因为一开始的时候注册地址只有Eureka-server1，所以要想Eureka-server1挂掉之后，重新注册client，只要注册地址多加一个Eureka-server2的地址即可。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">eureka:</span><br><span class="line">  client:</span><br><span class="line">    service-url:</span><br><span class="line">      defaultZone: http:<span class="comment">//localhost:8761/eureka/,http://localhost:8762/eureka/</span></span><br><span class="line">spring:</span><br><span class="line">  application:</span><br><span class="line">    name: client</span><br></pre></td></tr></table></figure><p>要是有更多个server时，server之间两两注册即可。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;1-创建服务注册中心&quot;&gt;&lt;a href=&quot;#1-创建服务注册中心&quot; class=&quot;headerlink&quot; title=&quot;1 创建服务注册中心&quot;&gt;&lt;/a&gt;1 创建服务注册中心&lt;/h2&gt;&lt;p&gt;在这里，我们需要用的的组件上Spring Cloud Netflix的Eureka ,Eureka 是一个服务注册和发现模块。&lt;/p&gt;
    
    </summary>
    
      <category term="SpringCloud" scheme="https://songwell1024.github.io/categories/SpringCloud/"/>
    
    
      <category term="SpringCloud" scheme="https://songwell1024.github.io/tags/SpringCloud/"/>
    
  </entry>
  
  <entry>
    <title>SpringBoot（21） 基于阿里大于的短信验证微服务</title>
    <link href="https://songwell1024.github.io/2019/01/06/CheckSmsCode/"/>
    <id>https://songwell1024.github.io/2019/01/06/CheckSmsCode/</id>
    <published>2019-01-06T12:05:48.000Z</published>
    <updated>2019-01-12T10:43:00.334Z</updated>
    
    <content type="html"><![CDATA[<h1 id="SpringBoot（21）-基于阿里大于的短信验证微服务"><a href="#SpringBoot（21）-基于阿里大于的短信验证微服务" class="headerlink" title="SpringBoot（21） 基于阿里大于的短信验证微服务"></a>SpringBoot（21） 基于阿里大于的短信验证微服务</h1><p>阿里大于其实就是阿里云下提供的一个服务，有开放API及SDK，用起来很方便，至于怎么去注册，开启服务，申请签名，生成短信模板，获取AccessKey，下载SDK和Demo等等操作就不详细介绍了，网上有很多的教程很详细，可以参考这篇博客：</p><a id="more"></a><p><a href="https://blog.csdn.net/qq1031893936/article/details/81173878" target="_blank" rel="noopener">https://blog.csdn.net/qq1031893936/article/details/81173878</a></p><p>其中下载SDK地址： <a href="https://help.aliyun.com/document_detail/55359.html?spm=5176.doc55284.2.6.iRVRZy" target="_blank" rel="noopener">https://help.aliyun.com/document_detail/55359.html?spm=5176.doc55284.2.6.iRVRZy</a></p><p>这里主要是写短信验证功能是怎么实现的。并把它做成一个微服务的这样通用框架，然后通过这个短信上的微服务框架，使得用户服务可以通过rabbitMQ（正好项目中也用到了rabbitMQ）调用短信微服务实现与阿里大于的交换，实现短信的发送和验证。</p><p>SDK下载之后解压目录如下，api_demo是官方例程,api_sdk中包含了两个jar包</p><p><img src="/2019/01/06/CheckSmsCode/1.png" alt="1"></p><p>在项目中添加两个jar包(aliyun-java-sdk-core-3.3.1.jar和aliyun-java-sdk-dysmsapi-1.0.0.jar)，并在Maven（pom.xml文件）中添加依赖</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--阿里大于--&gt;</span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">      &lt;groupId&gt;aliyun-java-sdk-core&lt;/groupId&gt;</span><br><span class="line">      &lt;artifactId&gt;aliyun-java-sdk-core&lt;/artifactId&gt;</span><br><span class="line">      &lt;version&gt;1.0&lt;/version&gt;</span><br><span class="line">      &lt;scope&gt;system&lt;/scope&gt;</span><br><span class="line">      &lt;systemPath&gt;$&#123;project.basedir&#125;/src/main/webapp/WEB-INF/lib/aliyun-java-sdk-core-3.3.1.jar&lt;/systemPath&gt;</span><br><span class="line">    &lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">      &lt;groupId&gt;aliyun-java-sdk-dysmsapi&lt;/groupId&gt;</span><br><span class="line">      &lt;artifactId&gt;aliyun-java-sdk-dysmsapi&lt;/artifactId&gt;</span><br><span class="line">      &lt;version&gt;1.0&lt;/version&gt;</span><br><span class="line">      &lt;scope&gt;system&lt;/scope&gt;</span><br><span class="line">      &lt;systemPath&gt;$&#123;project.basedir&#125;/src/main/webapp/WEB-INF/lib/aliyun-java-sdk-dysmsapi-1.0.0.jar&lt;/systemPath&gt;</span><br><span class="line">    &lt;/dependency&gt;</span><br></pre></td></tr></table></figure><p>这样的话其实就已经完成了基础的配置。</p><p>然后api_demo下有官方给出的demo具体代码如下，其实就是两个核心函数，sendSms()实现的是发短信的功能，querySendDetails（）实现查询发送短信的详细信息.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.springboot.SecKill.SMSVerification;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.aliyuncs.DefaultAcsClient;</span><br><span class="line"><span class="keyword">import</span> com.aliyuncs.IAcsClient;</span><br><span class="line"><span class="keyword">import</span> com.aliyuncs.dysmsapi.model.v20170525.QuerySendDetailsRequest;</span><br><span class="line"><span class="keyword">import</span> com.aliyuncs.dysmsapi.model.v20170525.QuerySendDetailsResponse;</span><br><span class="line"><span class="keyword">import</span> com.aliyuncs.dysmsapi.model.v20170525.SendSmsRequest;</span><br><span class="line"><span class="keyword">import</span> com.aliyuncs.dysmsapi.model.v20170525.SendSmsResponse;</span><br><span class="line"><span class="keyword">import</span> com.aliyuncs.dysmsapi.transform.v20170525.SendSmsResponseUnmarshaller;</span><br><span class="line"><span class="keyword">import</span> com.aliyuncs.exceptions.ClientException;</span><br><span class="line"><span class="keyword">import</span> com.aliyuncs.http.FormatType;</span><br><span class="line"><span class="keyword">import</span> com.aliyuncs.http.HttpResponse;</span><br><span class="line"><span class="keyword">import</span> com.aliyuncs.profile.DefaultProfile;</span><br><span class="line"><span class="keyword">import</span> com.aliyuncs.profile.IClientProfile;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.nio.charset.Charset;</span><br><span class="line"><span class="keyword">import</span> java.text.SimpleDateFormat;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"><span class="keyword">import</span> java.util.UUID;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created on 17/6/7.</span></span><br><span class="line"><span class="comment"> * 短信API产品的DEMO程序,工程中包含了一个SmsDemo类，直接通过</span></span><br><span class="line"><span class="comment"> * 执行main函数即可体验短信产品API功能(只需要将AK替换成开通了云通信-短信产品功能的AK即可)</span></span><br><span class="line"><span class="comment"> * 工程依赖了2个jar包(存放在工程的libs目录下)</span></span><br><span class="line"><span class="comment"> * 1:aliyun-java-sdk-core.jar</span></span><br><span class="line"><span class="comment"> * 2:aliyun-java-sdk-dysmsapi.jar</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 备注:Demo工程编码采用UTF-8</span></span><br><span class="line"><span class="comment"> * 国际短信发送请勿参照此DEMO</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SmsDemo</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//产品名称:云通信短信API产品,开发者无需替换</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> String product = <span class="string">"Dysmsapi"</span>;</span><br><span class="line">    <span class="comment">//产品域名,开发者无需替换</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> String domain = <span class="string">"dysmsapi.aliyuncs.com"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// TODO 此处需要替换成开发者自己的AK(在阿里云访问控制台寻找)</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> String accessKeyId = <span class="string">"yourAccessKeyId"</span>;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> String accessKeySecret = <span class="string">"yourAccessKeySecret"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> SendSmsResponse <span class="title">sendSms</span><span class="params">()</span> <span class="keyword">throws</span> ClientException </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//可自助调整超时时间</span></span><br><span class="line">        System.setProperty(<span class="string">"sun.net.client.defaultConnectTimeout"</span>, <span class="string">"10000"</span>);</span><br><span class="line">        System.setProperty(<span class="string">"sun.net.client.defaultReadTimeout"</span>, <span class="string">"10000"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//初始化acsClient,暂不支持region化</span></span><br><span class="line">        IClientProfile profile = DefaultProfile.getProfile(<span class="string">"cn-hangzhou"</span>, accessKeyId, accessKeySecret);</span><br><span class="line">        DefaultProfile.addEndpoint(<span class="string">"cn-hangzhou"</span>, <span class="string">"cn-hangzhou"</span>, product, domain);</span><br><span class="line">        IAcsClient acsClient = <span class="keyword">new</span> DefaultAcsClient(profile);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//组装请求对象-具体描述见控制台-文档部分内容</span></span><br><span class="line">        SendSmsRequest request = <span class="keyword">new</span> SendSmsRequest();</span><br><span class="line">        <span class="comment">//必填:待发送手机号</span></span><br><span class="line">        request.setPhoneNumbers(<span class="string">"15000000000"</span>);</span><br><span class="line">        <span class="comment">//必填:短信签名-可在短信控制台中找到</span></span><br><span class="line">        request.setSignName(<span class="string">"云通信"</span>);</span><br><span class="line">        <span class="comment">//必填:短信模板-可在短信控制台中找到</span></span><br><span class="line">        request.setTemplateCode(<span class="string">"SMS_1000000"</span>);</span><br><span class="line">        <span class="comment">//可选:模板中的变量替换JSON串,如模板内容为"亲爱的$&#123;name&#125;,您的验证码为$&#123;code&#125;"时,此处的值为</span></span><br><span class="line">        request.setTemplateParam(<span class="string">"&#123;\"name\":\"Tom\", \"code\":\"123\"&#125;"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//选填-上行短信扩展码(无特殊需求用户请忽略此字段)</span></span><br><span class="line">        <span class="comment">//request.setSmsUpExtendCode("90997");</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//可选:outId为提供给业务方扩展字段,最终在短信回执消息中将此值带回给调用者</span></span><br><span class="line">        request.setOutId(<span class="string">"yourOutId"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//hint 此处可能会抛出异常，注意catch</span></span><br><span class="line">        SendSmsResponse sendSmsResponse = acsClient.getAcsResponse(request);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> sendSmsResponse;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> QuerySendDetailsResponse <span class="title">querySendDetails</span><span class="params">(String bizId)</span> <span class="keyword">throws</span> ClientException </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//可自助调整超时时间</span></span><br><span class="line">        System.setProperty(<span class="string">"sun.net.client.defaultConnectTimeout"</span>, <span class="string">"10000"</span>);</span><br><span class="line">        System.setProperty(<span class="string">"sun.net.client.defaultReadTimeout"</span>, <span class="string">"10000"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//初始化acsClient,暂不支持region化</span></span><br><span class="line">        IClientProfile profile = DefaultProfile.getProfile(<span class="string">"cn-hangzhou"</span>, accessKeyId, accessKeySecret);</span><br><span class="line">        DefaultProfile.addEndpoint(<span class="string">"cn-hangzhou"</span>, <span class="string">"cn-hangzhou"</span>, product, domain);</span><br><span class="line">        IAcsClient acsClient = <span class="keyword">new</span> DefaultAcsClient(profile);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//组装请求对象</span></span><br><span class="line">        QuerySendDetailsRequest request = <span class="keyword">new</span> QuerySendDetailsRequest();</span><br><span class="line">        <span class="comment">//必填-号码</span></span><br><span class="line">        request.setPhoneNumber(<span class="string">"15000000000"</span>);</span><br><span class="line">        <span class="comment">//可选-流水号</span></span><br><span class="line">        request.setBizId(bizId);</span><br><span class="line">        <span class="comment">//必填-发送日期 支持30天内记录查询，格式yyyyMMdd</span></span><br><span class="line">        SimpleDateFormat ft = <span class="keyword">new</span> SimpleDateFormat(<span class="string">"yyyyMMdd"</span>);</span><br><span class="line">        request.setSendDate(ft.format(<span class="keyword">new</span> Date()));</span><br><span class="line">        <span class="comment">//必填-页大小</span></span><br><span class="line">        request.setPageSize(<span class="number">10L</span>);</span><br><span class="line">        <span class="comment">//必填-当前页码从1开始计数</span></span><br><span class="line">        request.setCurrentPage(<span class="number">1L</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//hint 此处可能会抛出异常，注意catch</span></span><br><span class="line">        QuerySendDetailsResponse querySendDetailsResponse = acsClient.getAcsResponse(request);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> querySendDetailsResponse;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ClientException, InterruptedException </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//发短信</span></span><br><span class="line">        SendSmsResponse response = sendSms();</span><br><span class="line">        System.out.println(<span class="string">"短信接口返回的数据----------------"</span>);</span><br><span class="line">        System.out.println(<span class="string">"Code="</span> + response.getCode());</span><br><span class="line">        System.out.println(<span class="string">"Message="</span> + response.getMessage());</span><br><span class="line">        System.out.println(<span class="string">"RequestId="</span> + response.getRequestId());</span><br><span class="line">        System.out.println(<span class="string">"BizId="</span> + response.getBizId());</span><br><span class="line"></span><br><span class="line">        Thread.sleep(<span class="number">3000L</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//查明细</span></span><br><span class="line">        <span class="keyword">if</span>(response.getCode() != <span class="keyword">null</span> &amp;&amp; response.getCode().equals(<span class="string">"OK"</span>)) &#123;</span><br><span class="line">            QuerySendDetailsResponse querySendDetailsResponse = querySendDetails(response.getBizId());</span><br><span class="line">            System.out.println(<span class="string">"短信明细查询接口返回数据----------------"</span>);</span><br><span class="line">            System.out.println(<span class="string">"Code="</span> + querySendDetailsResponse.getCode());</span><br><span class="line">            System.out.println(<span class="string">"Message="</span> + querySendDetailsResponse.getMessage());</span><br><span class="line">            <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span>(QuerySendDetailsResponse.SmsSendDetailDTO smsSendDetailDTO : querySendDetailsResponse.getSmsSendDetailDTOs())</span><br><span class="line">            &#123;</span><br><span class="line">                System.out.println(<span class="string">"SmsSendDetailDTO["</span>+i+<span class="string">"]:"</span>);</span><br><span class="line">                System.out.println(<span class="string">"Content="</span> + smsSendDetailDTO.getContent());</span><br><span class="line">                System.out.println(<span class="string">"ErrCode="</span> + smsSendDetailDTO.getErrCode());</span><br><span class="line">                System.out.println(<span class="string">"OutId="</span> + smsSendDetailDTO.getOutId());</span><br><span class="line">                System.out.println(<span class="string">"PhoneNum="</span> + smsSendDetailDTO.getPhoneNum());</span><br><span class="line">                System.out.println(<span class="string">"ReceiveDate="</span> + smsSendDetailDTO.getReceiveDate());</span><br><span class="line">                System.out.println(<span class="string">"SendDate="</span> + smsSendDetailDTO.getSendDate());</span><br><span class="line">                System.out.println(<span class="string">"SendStatus="</span> + smsSendDetailDTO.getSendStatus());</span><br><span class="line">                System.out.println(<span class="string">"Template="</span> + smsSendDetailDTO.getTemplateCode());</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(<span class="string">"TotalCount="</span> + querySendDetailsResponse.getTotalCount());</span><br><span class="line">            System.out.println(<span class="string">"RequestId="</span> + querySendDetailsResponse.getRequestId());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后在SpringBoot中具体的使用阿里大于来实现短信验证,注册登录功能.</p><h4 id="1-在application-properties文件中添加配置"><a href="#1-在application-properties文件中添加配置" class="headerlink" title="1. 在application.properties文件中添加配置"></a>1. 在application.properties文件中添加配置</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">accessKeyId = xxxxx;</span><br><span class="line">accessKeySecret = xxxxx;</span><br></pre></td></tr></table></figure><h4 id="2-短信发送类"><a href="#2-短信发送类" class="headerlink" title="2. 短信发送类"></a>2. 短信发送类</h4><p>其实就是吧官方的demo修改一下，把其中的一些参数改变成为传入参数</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.springboot.SecKill.SMSVerification;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.aliyuncs.DefaultAcsClient;</span><br><span class="line"><span class="keyword">import</span> com.aliyuncs.IAcsClient;</span><br><span class="line"><span class="keyword">import</span> com.aliyuncs.dysmsapi.model.v20170525.QuerySendDetailsRequest;</span><br><span class="line"><span class="keyword">import</span> com.aliyuncs.dysmsapi.model.v20170525.QuerySendDetailsResponse;</span><br><span class="line"><span class="keyword">import</span> com.aliyuncs.dysmsapi.model.v20170525.SendSmsRequest;</span><br><span class="line"><span class="keyword">import</span> com.aliyuncs.dysmsapi.model.v20170525.SendSmsResponse;</span><br><span class="line"><span class="keyword">import</span> com.aliyuncs.dysmsapi.transform.v20170525.SendSmsResponseUnmarshaller;</span><br><span class="line"><span class="keyword">import</span> com.aliyuncs.exceptions.ClientException;</span><br><span class="line"><span class="keyword">import</span> com.aliyuncs.http.FormatType;</span><br><span class="line"><span class="keyword">import</span> com.aliyuncs.http.HttpResponse;</span><br><span class="line"><span class="keyword">import</span> com.aliyuncs.profile.DefaultProfile;</span><br><span class="line"><span class="keyword">import</span> com.aliyuncs.profile.IClientProfile;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.core.env.Environment;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.nio.charset.Charset;</span><br><span class="line"><span class="keyword">import</span> java.text.SimpleDateFormat;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"><span class="keyword">import</span> java.util.UUID;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SMSUtil</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//产品名称:云通信短信API产品,开发者无需替换</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> String product = <span class="string">"Dysmsapi"</span>;</span><br><span class="line">    <span class="comment">//产品域名,开发者无需替换</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> String domain = <span class="string">"dysmsapi.aliyuncs.com"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> Environment environment;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> SendSmsResponse <span class="title">sendSms</span><span class="params">(String mobile,String template_code,String sign_name,String param)</span> <span class="keyword">throws</span> ClientException </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//可自助调整超时时间</span></span><br><span class="line">        System.setProperty(<span class="string">"sun.net.client.defaultConnectTimeout"</span>, <span class="string">"10000"</span>);</span><br><span class="line">        System.setProperty(<span class="string">"sun.net.client.defaultReadTimeout"</span>, <span class="string">"10000"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//读取配置文件中的这两个配置变量</span></span><br><span class="line">        String accessKeyId = environment.getProperty(<span class="string">"accessKeyId"</span>);</span><br><span class="line">        String accessKeySecret = environment.getProperty(<span class="string">"accessKeySecret"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//初始化acsClient,暂不支持region化</span></span><br><span class="line">        IClientProfile profile = DefaultProfile.getProfile(<span class="string">"cn-hangzhou"</span>, accessKeyId, accessKeySecret);</span><br><span class="line">        DefaultProfile.addEndpoint(<span class="string">"cn-hangzhou"</span>, <span class="string">"cn-hangzhou"</span>, product, domain);</span><br><span class="line">        IAcsClient acsClient = <span class="keyword">new</span> DefaultAcsClient(profile);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//组装请求对象-具体描述见控制台-文档部分内容</span></span><br><span class="line">        SendSmsRequest request = <span class="keyword">new</span> SendSmsRequest();</span><br><span class="line">        <span class="comment">//必填:待发送手机号</span></span><br><span class="line">        request.setPhoneNumbers(mobile);      <span class="comment">//你要发送的手机号</span></span><br><span class="line">        <span class="comment">//必填:短信签名-可在短信控制台中找到</span></span><br><span class="line">        request.setSignName(sign_name);     <span class="comment">//必须是你自己的已经审核通过的签名</span></span><br><span class="line">        <span class="comment">//必填:短信模板-可在短信控制台中找到</span></span><br><span class="line">        request.setTemplateCode(template_code);   <span class="comment">//模板CODE</span></span><br><span class="line">        <span class="comment">//可选:模板中的变量替换JSON串,如模板内容为"亲爱的$&#123;name&#125;,您的验证码为$&#123;code&#125;"时,此处的值为</span></span><br><span class="line">        request.setTemplateParam(param);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//选填-上行短信扩展码(无特殊需求用户请忽略此字段)</span></span><br><span class="line">        <span class="comment">//request.setSmsUpExtendCode("90997");</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//可选:outId为提供给业务方扩展字段,最终在短信回执消息中将此值带回给调用者</span></span><br><span class="line">        request.setOutId(<span class="string">"yourOutId"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//hint 此处可能会抛出异常，注意catch</span></span><br><span class="line">        SendSmsResponse sendSmsResponse = acsClient.getAcsResponse(request);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> sendSmsResponse;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span>  QuerySendDetailsResponse <span class="title">querySendDetails</span><span class="params">(String mobile,String bizId)</span> <span class="keyword">throws</span> ClientException </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//可自助调整超时时间</span></span><br><span class="line">        System.setProperty(<span class="string">"sun.net.client.defaultConnectTimeout"</span>, <span class="string">"10000"</span>);</span><br><span class="line">        System.setProperty(<span class="string">"sun.net.client.defaultReadTimeout"</span>, <span class="string">"10000"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//读取配置文件中的这两个配置变量</span></span><br><span class="line">        String accessKeyId = environment.getProperty(<span class="string">"accessKeyId"</span>);</span><br><span class="line">        String accessKeySecret = environment.getProperty(<span class="string">"accessKeySecret"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//初始化acsClient,暂不支持region化</span></span><br><span class="line">        IClientProfile profile = DefaultProfile.getProfile(<span class="string">"cn-hangzhou"</span>, accessKeyId, accessKeySecret);</span><br><span class="line">        DefaultProfile.addEndpoint(<span class="string">"cn-hangzhou"</span>, <span class="string">"cn-hangzhou"</span>, product, domain);</span><br><span class="line">        IAcsClient acsClient = <span class="keyword">new</span> DefaultAcsClient(profile);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//组装请求对象</span></span><br><span class="line">        QuerySendDetailsRequest request = <span class="keyword">new</span> QuerySendDetailsRequest();</span><br><span class="line">        <span class="comment">//必填-号码</span></span><br><span class="line">        request.setPhoneNumber(mobile);</span><br><span class="line">        <span class="comment">//可选-流水号</span></span><br><span class="line">        request.setBizId(bizId);</span><br><span class="line">        <span class="comment">//必填-发送日期 支持30天内记录查询，格式yyyyMMdd</span></span><br><span class="line">        SimpleDateFormat ft = <span class="keyword">new</span> SimpleDateFormat(<span class="string">"yyyyMMdd"</span>);</span><br><span class="line">        request.setSendDate(ft.format(<span class="keyword">new</span> Date()));</span><br><span class="line">        <span class="comment">//必填-页大小</span></span><br><span class="line">        request.setPageSize(<span class="number">10L</span>);</span><br><span class="line">        <span class="comment">//必填-当前页码从1开始计数</span></span><br><span class="line">        request.setCurrentPage(<span class="number">1L</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//hint 此处可能会抛出异常，注意catch</span></span><br><span class="line">        QuerySendDetailsResponse querySendDetailsResponse = acsClient.getAcsResponse(request);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> querySendDetailsResponse;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3-rabbitMQ实现短信接收"><a href="#3-rabbitMQ实现短信接收" class="headerlink" title="3. rabbitMQ实现短信接收"></a>3. rabbitMQ实现短信接收</h4><p>rabbitMQ中显定义一个队列，并初始化(下面就是简要的把要添加的内容写出来了，项目中使用了不止这一个对列)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MQConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String SMS_QUEUE = <span class="string">"Sms.QUEUE"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Direct 交换机模式</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="comment">//队列</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Queue <span class="title">Sms_QUEUE</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Queue(SECKILL_QUEUE,<span class="keyword">true</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>然后接收类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.springboot.SecKill.SMSVerification;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.aliyuncs.dysmsapi.model.v20170525.SendSmsResponse;</span><br><span class="line"><span class="keyword">import</span> com.aliyuncs.exceptions.ClientException;</span><br><span class="line"><span class="keyword">import</span> com.springboot.SecKill.rabbitmq.MQConfig;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.rabbit.annotation.RabbitListener;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> WilsonSong</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2019/1/6/006</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SMSListener</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> SMSUtil smsUtil;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RabbitListener</span>(queues = MQConfig.SMS_QUEUE)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sendSms</span><span class="params">(Map&lt;String,String&gt; map)</span></span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            SendSmsResponse response = smsUtil.sendSms(map.get(<span class="string">"mobile"</span>),</span><br><span class="line">                    map.get(<span class="string">"template_code"</span>) ,</span><br><span class="line">                    map.get(<span class="string">"sign_name"</span>)  ,</span><br><span class="line">                    map.get(<span class="string">"param"</span>) );</span><br><span class="line">            System.out.println(<span class="string">"code:"</span>+response.getCode());</span><br><span class="line">            System.out.println(<span class="string">"message:"</span>+response.getMessage());</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (ClientException e) &#123;</span><br><span class="line">            <span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其实到这里就形成了一个通用的短信发送服务，用户在注册或登录的时候只需要通过RabbitMQ读取MQConfig.SMS_QUEUE对列中的短信即可。</p><h4 id="4-写一个网页测试"><a href="#4-写一个网页测试" class="headerlink" title="4. 写一个网页测试"></a>4. 写一个网页测试</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">QueueController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Autowired</span></span><br><span class="line">    AmqpTemplate amqpTemplate;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/sendmap"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sendMap</span><span class="params">()</span></span>&#123;</span><br><span class="line">Map map=<span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">map.put(<span class="string">"mobile"</span>, <span class="string">"xxxxxx"</span>);  <span class="comment">//手机号</span></span><br><span class="line">map.put(<span class="string">"template_code"</span>, <span class="string">"SMS_xxxxxxx"</span>);  <span class="comment">//短信模板，模板CODE</span></span><br><span class="line">map.put(<span class="string">"sign_name"</span>,<span class="string">"xxxxxx"</span>);   <span class="comment">//申请的短信签名</span></span><br><span class="line">map.put(<span class="string">"param"</span>, <span class="string">"&#123;\"name\":\"xxxx\"&#125;"</span>);   <span class="comment">//你自己定义的短线模板的格式和参数</span></span><br><span class="line"></span><br><span class="line">amqpTemplate.convertAndSend(MQConfig.Sms_QUEUE, map);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>到这里其实就完成了，接下来就是把这个整合到登陆注册页面上去，实现短信的发送，验证功能,其实具体的流程是很简单的，就是生成-RabbitMQ-后端检验，具体的就有些繁琐，就不具体详细写了，完整的代码可以去我的github上下载，右侧有链接。</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;SpringBoot（21）-基于阿里大于的短信验证微服务&quot;&gt;&lt;a href=&quot;#SpringBoot（21）-基于阿里大于的短信验证微服务&quot; class=&quot;headerlink&quot; title=&quot;SpringBoot（21） 基于阿里大于的短信验证微服务&quot;&gt;&lt;/a&gt;SpringBoot（21） 基于阿里大于的短信验证微服务&lt;/h1&gt;&lt;p&gt;阿里大于其实就是阿里云下提供的一个服务，有开放API及SDK，用起来很方便，至于怎么去注册，开启服务，申请签名，生成短信模板，获取AccessKey，下载SDK和Demo等等操作就不详细介绍了，网上有很多的教程很详细，可以参考这篇博客：&lt;/p&gt;
    
    </summary>
    
      <category term="SpringBoot" scheme="https://songwell1024.github.io/categories/SpringBoot/"/>
    
    
      <category term="SpringBoot" scheme="https://songwell1024.github.io/tags/SpringBoot/"/>
    
      <category term="秒杀" scheme="https://songwell1024.github.io/tags/%E7%A7%92%E6%9D%80/"/>
    
  </entry>
  
  <entry>
    <title>文献阅读整理 20181013</title>
    <link href="https://songwell1024.github.io/2018/10/21/PaperRead3/"/>
    <id>https://songwell1024.github.io/2018/10/21/PaperRead3/</id>
    <published>2018-10-21T12:00:55.000Z</published>
    <updated>2018-10-21T12:13:03.449Z</updated>
    
    <content type="html"><![CDATA[<h1 id="文献阅读整理-20181013"><a href="#文献阅读整理-20181013" class="headerlink" title="文献阅读整理 20181013"></a>文献阅读整理 20181013</h1><h2 id="1-SPRD：基于应用UI-和程序依赖图的Android-重打包应用快速检测方法"><a href="#1-SPRD：基于应用UI-和程序依赖图的Android-重打包应用快速检测方法" class="headerlink" title="1.  SPRD：基于应用UI 和程序依赖图的Android 重打包应用快速检测方法"></a>1.  SPRD：基于应用UI 和程序依赖图的Android 重打包应用快速检测方法</h2><h3 id="1-1-文章的内容"><a href="#1-1-文章的内容" class="headerlink" title="1.1 文章的内容"></a>1.1 文章的内容</h3><p>这篇文章中说研究发现<strong>重打包应用通常不修改应用用户交互界面（UI, user interface）的结构</strong>，提出一种基于应用UI和程序代码的两阶段检测方法。首先，设计了一种基于UI 抽象表示的散列快速相似性检测方法，识别UI 相似的可疑重打包应用；然后，使用程序依赖图作为应用特征表示，实现细粒度、精准的代码克隆检测。</p><a id="more"></a><p>重打包静态检测一般会遇到的问题：在Android 应用程序静态分析中，通常会受到<strong>第三方的库文件和代码混淆</strong>的影响。</p><p>本文的研究的框架：</p><p><img src="/2018/10/21/PaperRead3/1.png" alt="1"></p><p>检测的过程：<br>    第一阶段应用UI 的快速相似性比较步骤主要分为预处理和相似性检测这2 个部分，在预处理中，首先抽取Android 应用的UI，将UI 中每一个视图（view）生成一种抽象化的表示，并使用散列算法生成view 的唯一指纹值；在相似性检测部分将每一个应用的view 指纹值进行比对，并将指纹值相同的view 做聚类处理，找出UI 相似的应用，输出可疑的重打包应用集合。</p><p>在第二阶段程序代码的细粒度克隆检测中，首先，反编译在第一阶段中输出的可疑重打包应用，生成每一个应用的PDG 作为其特征表示，利用图的相似性比较算法实现程序代码的克隆检测。最后，根据上述2 个阶段计算得出的相似值进行综合判定完成重打包应用的检测。</p><p>映射的具体规则：</p><p>表示为A=(I, D)，I表示UI，D表示code。</p><p>其中Android 应用UI 表示为<br>$$<br>I=\{V_{i}\},i=1,2,3,…,n<br>$$<br>其中<br>$$<br>V = &lt;L,C, \Phi &gt;<br>$$<br>L 和C 分别表示布局和组件集合，Φ 表示布局和组件之间的包含关系。</p><p>应用程序依赖图表示为<br>$$<br>G=＜S, E＞<br>$$<br>其中，S 表示函数的语句集，E 表示边集，当语句之间有数据或控制依赖时，语句之间存在有向边连接。</p><p>提取UI应用的过程：UI 的基本组成单元是view，抽取了view的结构，然后进行的映射</p><p><img src="/2018/10/21/PaperRead3/2.png" alt="2"></p><p>抽象表示：</p><p><img src="/2018/10/21/PaperRead3/3.png" alt="3"></p><p>其指纹的三元组表示为<code>＜length,hash_value, app_id＞</code>。其中，length 为线性抽象表示<br>字符串的长度， hash_value 表示字符串的散列值,app_id 表示为应用程序的ID。</p><p>UI的相似性检测：</p><p>将上面的三元组存放在字典中，key为length 。</p><p>依次遍历字典DIC 的键，针对DIC 中相同键值的列表，将列表中抽象表示字符串的散列值进行两两相似性比较。如果值相同，则检测出相似的应用view。在得到存在view 相似的应用后，通过分析2 个应用中所有的view 相似比例来度量应用UI 的相似性，从而判定其是否为一对可疑的重打包应用。</p><p>代码相似性检测：</p><p>PDG 主要用于表示程序函数体中语句之间的依赖关系，包括数据依赖和控制依赖等。</p><p><img src="/2018/10/21/PaperRead3/4.png" alt="4"></p><h2 id="2-Effective-and-Scalable-Repackaged-Application-Detection-based-on-User-Interface"><a href="#2-Effective-and-Scalable-Repackaged-Application-Detection-based-on-User-Interface" class="headerlink" title="2. Effective and Scalable Repackaged Application Detection based on User Interface"></a>2. Effective and Scalable Repackaged Application Detection based on User Interface</h2><p>在本文中，我们提出了一种基于静态UI特征的大规模检测的高效简单方法。所提出的方法包括粗粒度检测以通过比较图像哈希来选择可疑的重新包装的应用，以及细粒度检测以执行更详细的UI比较以通过使用熵比较布局来细化结果。此外，我们提出了一种动态选择方法来选择可疑应用程序，这比固定阈值更准确和有效。</p><p><img src="/2018/10/21/PaperRead3/5.png" alt="5"></p><p><strong>粗粒度分析：</strong></p><p>我们直接从文件MANIFEST.MF中提取它们，这样更简单，更快捷。（在apk签名过程中生成MANIFEST.MF并存储所有资源文件的摘要哈希值）。</p><p>通过比较图像哈希值的相似性先找到可疑的相似应用，然后在进行细粒度的分析。</p><p>动态阈值的选择过程：</p><p>首先统计我们获得相似值分布为0.1,0.3和0.8，最大间隙位于0.3和0.8之间。其次，大多数重新包装的应用程序对的相似度值分布在最大差距之上，并且大多数非重新打包应用程序对的相似度值低于它。对于相似度大于这些值的就直接不考虑他们之间的相似性了。</p><p><strong>细粒度分析：</strong></p><p>我们需要首先将所有引用的布局文件合并到一个文件（怎么合的也不说，感觉用程序来合并的话有一定的难度，暂时没啥想法，遍历嘛？？？？？，手动的话就滑稽了！！！），然后提取UI的树形结构，形成特征值。其实和第一篇文章应该差不多，但是这里面没有具体说。</p><p>然后使用基于熵的相似度算法来进行相似性的比较。</p><p><img src="/2018/10/21/PaperRead3/6.png" alt="6"></p><p>说实话这篇文章还是挺有意思的，因为这里把UI作为了细粒度的分析特征，但是上面的文章就把UI特征提取作为粗粒度的特征。</p><h2 id="3-A-Deep-Learning-Approach-to-Android-Malware-Feature-Learning-and-Detection"><a href="#3-A-Deep-Learning-Approach-to-Android-Malware-Feature-Learning-and-Detection" class="headerlink" title="3. A Deep Learning Approach to Android Malware Feature Learning and Detection"></a>3. A Deep Learning Approach to Android Malware Feature Learning and Detection</h2><p>这篇文章是恶意软件检测方法</p><p>在本文中，我们介绍了DroidDeep，这是一种针对Android恶意软件检测的深度学习方法，它考虑了多个级别的功能，以解决上述研究工作的局限性。DroidDeep首先考虑静态信息，包括权限，API调用和组件部署，以表征Android应用程序的行为模式，并从Android应用程序中提取包含超过30,000个功能的多级功能集。然后，我们将这些提取的特征提供给深度学习模型，以学习分类的典型特征。最后，我们将学到的特征放入基于支持向量机算法<br>（SVM）的检测器中，用于检测Android恶意软件。</p><p>对于这里面选择的特征集太多了导致计算资源的开销，为了解决这个问题，我们使用深度信念网（DBN），这是一种快速，贪婪的学习算法，能够学习典型特征并减少提取特征的数量以节省计算资源。</p><p>文章中说几乎没有误报，我觉得嗯，吹牛，机器学习的方的通病就是在自己收集的数据集上效果非常好，但是换一个数据集的话效果就不可能那么好了。</p><p>还有就是浅层的网络结构（少于两层的网络）解决约束良好的简单问题时很好，但是复杂问题的时候就不能够有很好的代表性。</p><p><strong>框架</strong>：</p><p><img src="/2018/10/21/PaperRead3/7.png" alt="7"></p><p>然后深度学习的框架如下图所示：</p><p><img src="/2018/10/21/PaperRead3/8.png" alt="8"></p><p>训练完成之后使用SVM分类算法对收集到的数据集进行分类，最后在这一组数据集上的分类准确率为97.5%。</p><p>在一组未知的数据集上准确率为92.2％（这种数据集是由VirusTotal来评估的）。</p><h2 id="4-DAPASA-Detecting-Android-Piggybacked-Apps-Through-Sensitive-Subgraph-Analysis"><a href="#4-DAPASA-Detecting-Android-Piggybacked-Apps-Through-Sensitive-Subgraph-Analysis" class="headerlink" title="4.  DAPASA: Detecting Android Piggybacked Apps Through Sensitive Subgraph Analysis"></a>4.  DAPASA: Detecting Android Piggybacked Apps Through Sensitive Subgraph Analysis</h2><h3 id="4-1-文章内容"><a href="#4-1-文章内容" class="headerlink" title="4.1 文章内容"></a>4.1 文章内容</h3><p>这一篇文章也是恶意软件检测方法，因为文章写的很详细，而且有些可以可以借鉴的地方，所以看一下。但是比较难。</p><p>本文成立的两个假设：</p><ul><li>恶意应用会请求更加敏感的权限。</li><li>Generally, in the rider, the cohesion of sensitive APIs, which is measured by calling distances, is higher than that in the carrier</li></ul><p>为了区分敏感API的恶意程度，使用类似于TF-IDF来定义API的敏感性。它可以减少在良性和恶意应用程序中经常出现的敏感API的干扰因素。因为良性的应用有的时候也会请求一些敏感的权限。所以避免这些对于检测的干扰还是很重要的。</p><p>我们构造了一个敏感的子图来表示整个调用图并描述给定应用程序的最可疑行为。并从子图中提取了5个特征。这个敏感子图是可以代表整个函数调用图的。因为直接比较图的相似性需要很高的开销。子图的话就好一些。而且他从子图中再寻找API灵敏度最高的最高的子图作为分析的特征。</p><p>DAPASA架构：</p><p><img src="/2018/10/21/PaperRead3/9.png" alt="9"></p><p>计算灵敏度系数以表示敏感API在执行恶意行为时的恶意程度。敏感API的灵敏系数是基于统计意义的，就是统计API在恶意应用中和良性应用中出现和使用的次数然后使用一个公式来度量这个敏感系数。而且并不是使用的频率越高灵敏度越高，他是恶性和良性中都使用的很高的时候比那个恶性中使用高而在良性中使用低的API的灵敏度要低。</p><p>然后就是从应用依赖图中构建子图，构建子图的过程中其实就是计算节点之间的距离，然后生成子图，。对于每个敏感API节点，将在SFCG中构建其子节点及其相邻节点。在计算两个节点之间的距离时，SFCG被视为无向图。<strong>在我们的工作中，SFCG的平均最短路径长度通常为3到5.构建子图时，正常节点到敏感API节点的距离小于或等于2。</strong> 不知道距离是怎么来的，可能生成SFCG的时候就有？？？？？</p><p>然后从子图中找灵敏系数最高的子图的时候，使用了类似于最小生成树的算法，因为就是已经给他计算出了每个节点的灵敏度系数，然后你就找到哪些子图的包含的节点是具有最高的灵敏度系数。（一个特征）</p><p>然后为了证明这个敏感系数和敏感距离是可以使用的区分特征，使用统计的方法分析了恶意应用中的敏感系数是大于良性应用的。（一个特征）</p><p>对于灵敏度最高的子图中他以三节点为单位统计三节点出现的频率，敏感图案在本文中被定义为包含至少一个敏感API节点的重要图案。这样就又把一些没有用的去除了，为了验证正确性买还是基于统计的方法来验证是不是就是在搭载应用中这种结构出现的频率比良性应用中出现的高。（三种视图三个特征）</p><p><img src="/2018/10/21/PaperRead3/10.png" alt="10"></p><p>在最后就是使用分类器来对应用进行分类。</p><p><strong>数据集</strong>：Android Malware Genome Project（一般是作为基准来做的）</p><h3 id="4-2文章中提到的值得注意的方法、"><a href="#4-2文章中提到的值得注意的方法、" class="headerlink" title="4.2文章中提到的值得注意的方法、"></a>4.2文章中提到的值得注意的方法、</h3><p>RepDetector的基于语义的方法，它首先在应用程序中提取核心功能的输入输出状态，然后比较功能和应用程序之间的相似性。RepDetector对依赖于每个应用程序的语义分析而不是语法特征的混淆攻击具有很强的鲁棒性。</p><p>动态方法的缺陷：但是，大多数动态分析方法需要一组有代表性的执行路径，并且很难确保可以覆盖应用程序的所有执行路径。</p><h2 id="5-Semantics-Based-Repackaging-Detection-for-Mobile-Apps-值得仔细看下细粒度分析"><a href="#5-Semantics-Based-Repackaging-Detection-for-Mobile-Apps-值得仔细看下细粒度分析" class="headerlink" title="5. Semantics-Based Repackaging Detection for Mobile Apps  值得仔细看下细粒度分析"></a>5. Semantics-Based Repackaging Detection for Mobile Apps  值得仔细看下细粒度分析</h2><p>本文的方法是提出了一种基于语义的检测方法，通过捕获函数的输入 - 输出关系以表达其语义。只要重新打包的应用程序保留了原始应用程序的关键语义，相似性就会很高。</p><p>本文的研究框架：</p><p><img src="/2018/10/21/PaperRead3/11.png" alt="11"></p><p>RepDetector由四个主要模块组成：核心类和功能提取，功能输出状态构造，功能相似性测量和应用程序相似性测量。核心功能以及重要的类将根据应用程序的字节码和清单文件提取。然后，我们为这些核心函数构造状态流图，并计算每个函数的输出状态。使用可满足模数理论（SMT）求解器，然后我们根据它们的输出状态检查两个核心函数的语义等价性。最后，我们使用Mahalanobis距离量化两个应用程序（每个应用程序由一些核心功能组成）之间的相似性。我们的方法使用符号执行，但通过合并流状态可以简化计算。</p><p>并非所有类都与应用程序的核心功能相关，而重新打包则保留了应用程序的核心功能。因此，对于重新打包检测，我们只考虑与功能相关的类。</p><p><strong>核心类和函数提取</strong>：清单文件（AndroidManifest.xml）向Android系统提供有关应用程序的基本信息。功能相关的类包括一个应用程序的主要组成部分：</p><ul><li>activities(&lt; activity &gt;)</li><li>services (&lt; service &gt;)</li><li>broadcast receivers (&lt; receiver &gt;) </li><li>content providers (&lt; provider &gt;).</li></ul><p>提取的时候只需要提取这些类和功能函数就可以了。减少工作量并且相当于变相去噪声。</p><p>通过解析AndroidManifest.xml文件直接检索这些类的列表。然后为类列表构造类调用图（CIG）。</p><p>在CIG中，每个节点表示一个类，两个节点之间的有向边表示它们之间存在函数（即方法）调用关系。我们的CIG通过静态分析考虑了类关系和函数调用。此外，我们根据几个属性（例如，CIG中类节点的扇入和扇出）计算CIG中每个类的权重。通过设置权重阈值，我们可以过滤掉权重低于阈值的类。其余的类称为核心类.</p><p>然后找输出语义的结构：通过状态流程图（SFC）分析这些核心功能的结构，一个SFC的结构如下图所示：</p><p>包括一个初始化块(变量初始化)，两个约束（if），5组语句</p><p><img src="/2018/10/21/PaperRead3/12.png" alt="12"></p><p>定义的输入输出就和右边的图所示：</p><p>在文章中举了一个例子，就是实现相同功能的两个函数，一个有噪声，一个没有噪声，最后的输出是相同的。</p><p>两个函数的等价性测量具体的实现：</p><p>在其核心功能之间执行成对相似性度量,由于不知道是怎么实现的，所以就需要成对的去比较。对于上面的图输入输出的等价关系是：</p><p><img src="/2018/10/21/PaperRead3/13.png" alt="13"></p><p>匹配输入的时候是通过将输入抽象成为整数或者是布尔变量，这样容易导致误报。但是这样的处理也简化了使用SMT检查相似性的准确度和速度。</p><p>最后是综合所有的核心函数的相似性得分形成一个矩阵，利用矩阵的相似性给出一个判定的标准。</p><p><strong>缺点</strong>：</p><p>这篇文章分析的足够细粒度，但是缺点就是太细了，计算复杂度非常高。应用之间需要相互比较，然后比较的还是成对比较核心函数的功能，就是两组的成对比较，太费资源了。而且他的通过这种语义的比较在语义的生成过程中还有粗粒度的一些做法，感觉不太好。还有就是我添加一些仿照函数，还有把几个函数合并到一起他都不能解决。</p><p>最后分析了自己的执行效率，比Androguard这个方法要快。</p><h2 id="6-一种静态Android重打包恶意应用检测方法（大体看了看）"><a href="#6-一种静态Android重打包恶意应用检测方法（大体看了看）" class="headerlink" title="6. 一种静态Android重打包恶意应用检测方法（大体看了看）"></a>6. 一种静态Android重打包恶意应用检测方法（大体看了看）</h2><p>这篇文章对应用之间相似性检测使用了1种基于质心的检测算法，把函数的控制流程图都映射成为一种质心，然后比较质心的相似性。</p><p>把二维的程序控制流程图先映射成为3D的，求出一个质心来，</p><p>然后通过API（就是语句里面有没有invoke语句）来给每个边赋值权重，再重新求一个质心，通过这两个质心的相似性来确定重打包的恶意应用。加权的方法是通过层次分析法来实现的。加权之后那些数量少但是更加敏感的API就能够更加的突出。</p><p>本文的框架如下：<img src="/2018/10/21/PaperRead3/14.png" alt="14"></p><h2 id="7-DeepRD：基于Siamese-LSTM-网络的Android-重打包应用检测方法"><a href="#7-DeepRD：基于Siamese-LSTM-网络的Android-重打包应用检测方法" class="headerlink" title="7.  DeepRD：基于Siamese LSTM 网络的Android 重打包应用检测方法"></a>7.  DeepRD：基于Siamese LSTM 网络的Android 重打包应用检测方法</h2><p>本文提出一种基于深度学习的Android 重打包应用检测方法，借助于深度学习强大的特征学习能力[19]，自动地学习应用的程序代码特征，通过程序代码的相似性度量实现重打包应用的检测.</p><p>本文提出将应用函数作为分析与检测的基本单元，应用函数被表示成序列特征形式并进行向量化处理，然后输入具有LSTM的Siamese 网络中学习程序代码的语义特征，最后通过应用程序代码的相似性度量判断是否为重打包应用。</p><p>特征的选取：本文中应用函数的序列特征及特征向量表示方法如下：首先，获取应用函数中API 的调用序列以及与API 存在数据依赖关系的上下文信息形成应用函数的序列特征；然后，将应用函数的序列特征表示成抽象字符串形式；最后，使用词向量嵌入模型将抽象字符串表示成向量形式输入深度学习模型Siamese LSTM 网络中训练。</p><p>在程序代码的相似性度量中，本文使用2个LSTM 网络自动地学习程序代码的序列特征表示，利用Siamese 网络度量程序代码的相似性。Siamese 网络是一种应用广泛的特征相似性度量方法。Siamese 网络常用于解决标签样本缺乏情况下的模型训练问题，它通过从数据中学习样本的相似性度量，然后与未知的标签样本进行比较。</p><p><strong>数据集</strong>：公开数据集AndroZoo。</p><blockquote><p>ZHOU W, ZHOU Y J, GRACE M, et al. Fast, scalable detection ofpiggybacked mobile applications[C]//The Third ACM Conference onData and Application Security and Privacy. 2013: 185-196.</p></blockquote><p>文献中发现重打包应用中加载的恶意组件不是应用的核心代码，使用基于PDG 的模块解耦技术将应用程序代码分为核心模块和非核心代码，设计了一种特征指纹技术抽取核心模块的语义特征，实现重打包应用的检测。现在一般的使用程序依赖图的都是不管核心不核心的，全部要用来生成PDG。</p><p>本文的检测框架如下图示：</p><p><img src="/2018/10/21/PaperRead3/15.png" alt="15"></p><p>本文API 的上下文信息是指与API 在函数体中存在数据依赖的语句，这里的数据依赖包括前向数据依赖和后向数据依赖这2 种。本文平台API 及其上下文信息表示为一个三元组的形式，即V=&lt;S_prior, S, S_post&gt;。特征集F=(V1,V2,…,Vi,…,Vt)</p><p>特征向量化：</p><p><img src="/2018/10/21/PaperRead3/16.png" alt="16"></p><p>每个函数的特征向量长度不同，本文使用MaLSTM 模型处理变长的序列特征数据。</p><p>训练模型的输入是将生成的特征向量及其对应的标签作为模型的输入。其中，标签是指一对特征向量的相似度。</p><p>本文基于应用函数相似性度量的重打包应用检测中，需要考虑以下2 个因素：①应用中相似函数的个数或比例；②相似应用函数的规模。给出了度量公式。</p><p>最后通过实验与SPRD进行了检测性能的比较，然后就是对自己定义的特征的有效性进行了比较。</p><h2 id="8-Fast-Scalable-Detection-of-“Piggybacked”-Mobile-Applications（可以返回来再仔细看看）"><a href="#8-Fast-Scalable-Detection-of-“Piggybacked”-Mobile-Applications（可以返回来再仔细看看）" class="headerlink" title="8. Fast, Scalable Detection of “Piggybacked” Mobile Applications（可以返回来再仔细看看）"></a>8. Fast, Scalable Detection of “Piggybacked” Mobile Applications（可以返回来再仔细看看）</h2><p>本文 的研究方法是研究的是Piggybacked这一种重打包的应用，搭载应用程序是重新打包的应用程序的一个子集。</p><p>本文中提出线性搜索算法（具有O（n log n）时间复杂度）以有效且可扩展地检测搭载的应用程序。</p><p>我们的方法基于两个主要观察。首先，在搭载应用程序中，注入代码相对独立，并且不与主机应用程序的主要功能紧密交织（如果有的话）。因此，我们提出了一种称为<strong>模块解耦</strong>的技术，以将应用程序代码有效地划分为主要和非主要模块。每个应用程序都有一个唯一的主模块，主要实现广告功能。同时，它可能有许多相对独立的非主要模块。各种支持例程或库，广告包和移动支付框架 - 以及嵌入式注入代码 - 都属于这一类。</p><p>其次搭载应用程序通常与原始运营商应用程序共享相同的主要模块。因此，我们提出另一种称为特征指纹识别的技术来提取主要模块中包含的某些语义特征（例如，所请求的许可和使用的Android API）。我们将它们表示为特征向量，将这些特征向量组织到度量空间中，然后提出线性搜索算法（具有O（n log n）时间复杂度 - 与之前的O（ n2）成对比较的复杂性相比）来检测搭载的应用程序。O(n2)是指映射完特征之后按照最近邻进行比较。但是我觉得要搜索最近邻的话也是需要n！次比较。</p><p>本文的框架：</p><p><img src="/2018/10/21/PaperRead3/17.png" alt="17"></p><p>本文成立的假设：我们假设捎带主要通过将Java代码添加到合法应用程序而不是本机代码来实现。考虑到本研究中使用的数据集，我们发现只有5％的应用程序包含本机代码。此外，我们假设合法的应用开发者不会向他人透露他们的私钥（用于app签名）。因此，搭载的应用程序将不会与原始应用程序共享相同的证书。</p><p>首先，基于Dalvik字节码，我们构建了一个程序依赖图（PDG），然后根据类的继承关系，函数调用关系，package homogeny和数据依赖关系来对PDG的每条边分配权重。(在生成图形时，我们将权重10,10,2,1分别分配给表示类继承，包同质，方法调用和成员字段引用的边。)两个类包之间的权重很高的话就合并成一个模块。这样程序的模块就分析完成。我们利用AndroidManifest.xml文件中的信息来声明应用程序的各种组件，包括其活动，服务，接收器和内容提供程序。具体来说，它指定将被调用以处理某些事件或操作的具体类。一个特殊的ACTION.MAIN代表应用程序的主要入口点。因此，我们选择包含此类的模块作为主模块的候选者。请注意主模块倾向于为用户提供与之交互的主界面。因此，我们还选择具有处理大多数活动的类的模块作为主要模块候选。候选者很多的时候，我们通过计算清单文件中模块名称与应用程序名称的相似性来选择最相似的候选者。</p><p><img src="/2018/10/21/PaperRead3/18.png" alt="18"></p><p>找到主模块之后，为了使主模块能够将代表APP，并且找到特征指纹将一个主模块的功能与另一个主模块的功能区分开，提取语义功能作为特征也就是权限API这些东西。<strong>我们然后将它们表示为向量，其中0和1分别表示主模块中某些特征的缺失和存在。之后，我们将这些特征向量（每个代表一个应用程序）组织到度量空间中，并将检测到搭载应用程序的问题转换为最近邻居搜索问题。用于最近邻居搜索的简单方法是执行成对比较并选择具有最小距离的比较。通过利用其三角不等式属性[43]，我们可以在搜索期间有效地修剪不相关的部分并实现O（n log n）时间复杂度</strong>。使用三角形不等式属性在构造的VPT树（表征特征向量的）中实现有效的搜索修剪。关于这一部分没太看懂。</p><p>关于查看哪些是搭载了应用的应用，文章中说如果应用程序A的非主要模块是B的严格子集，则B中的任何非主要模块（但不是A中的非主要模块）将被视为搭载代码的一部分。因此，我们将应用程序标记为搭载应用程序的应用程序。</p><h2 id="想法"><a href="#想法" class="headerlink" title="想法"></a>想法</h2><ol><li>恶意软件的范围大还是重打包范围大？我感觉重打包的话不一定是恶意的，恶意的也不一定是重打包。应该是有交叉的。恶意应用的话是可以通过机器学习分类的方法解决的，因为只需要分类就可以了，两个类别，恶意和非恶意的，恶意的一般是有特点的，比如获取敏感的权限这样子的。但是重打包的话不是这样子的，重打包的话一般是没有很好的特征，一般是基于两个应用之间的相似程度来分析的。相似的话就定义为重打包的，一般是需要两两比对的</li><li>一个框架，首先执行大致的聚类分析，相似的应用分为一类（关于具体的特征提取，提取的过多的话额外开销，然后特征过少的话就分类的效果很差，取几个重要的特征如API，权限和组件，然后就是向量化的表示的过程，这个过程是有问题的，怎么样将特征抽象成向量然后向量需要保持特征的语义和信息，相似的很相似，不相似的就差别较大，。这个地方可以参考文章8），而且这个也不是一个学习的过程，然后对聚为一类的执行细粒度分析。通过这种方案的话能够减少两两比较的数量，因为两两比较的话只需要比较聚为一类的应用，大大减少了比较的数量。关于细粒度的比较的话还是需要再看看文章，有什么好的方案。最后的效果怎么样就得看实现之后的效果了，关键的问题在于分类边界的问题。怎么去处理分类边界的问题。就是说两个边界上的点也有可能是重打包的应用（就是说要不要处理边界问题就是看分类的效果了。）还有就是初始聚类种类的设计，实在不行的话可以讨论一下聚类的类别对于检测的影响程度。</li><li>对于上面的想法，就是使用类似于最近邻的搜索方法，就是画一个圆，只比较每一个特征圆内的所有的APP，比较次数也减少了。对于23这两种是以后看文章的重点，并且关键和重点也是难点在于向量的抽象怎么抽象？关系到检测的准确性。这样的话其实还是和两两比较是一样的。可以看看近似最近邻检索这种方式，这个方法就是在牺牲精度的基础上去返回所有可能是最近邻的点。或者是先分区在搜索。就是把所有的特征分区。分完区之后呢，搜索一个点的近邻，就是如果一个点到一个分区的核心点的距离减去半径大于你所定义的阈值的时候这个分区可以直接不用计算。这两个分区可以直接忽略比较了。还是再想想，这个想法太多漏洞了。</li><li>如果上面的方法要是不好用，还可以提取出特征来之后使用深度学习的方式去训练模型，通过机器学习的分类只是来分析恶意软件和良性软件的，能够将良性软件和恶意软件分类，但是对于重打包来说，重打包的程序不一定是恶意的，而且通机器学习的分类能够分类出重打包和非重打包的嘛？感觉机器学习和深度学习的方式都是用来分类恶意软件得，因为恶意的软件一定会添加恶意的组件或者是调用恶意的权限。</li><li>对权限进行排名也是一种很好的方式，这样的话可以避免某些请求频率低的权限的影响，因为要是重打包的应用程序可能会添加更多的权限调用，但是这个权限的调用只用了一两次。</li></ol><p>参考文章：W. Wang, X. Wang, D. Feng, J. Liu, Z. Han, and X. Zhang, “Exploring permission-induced risk in Android applications for malicious application detection,” IEEE Trans. Inf. Forensics Security, vol. 9, no. 11,pp. 1869–1882, Nov. 2014.</p><ol><li>程序依赖图中能不能去燥，比如某些个只调用了一次或者是只出现了一次的调用？或者是类的调用也可以啊，就是每一个对象会new很多次的，只实例化了一次的那种直接给他去除，认定为是噪声代码。？？？？？关于去噪声的方法我觉得可以参考下文章4，他里面就是寻找了最主要的特征。</li><li>设计一个系统先粗粒度，然后细粒度检测，细粒度检测一般比较耗时间，粗粒度检测完成之后只需要检测粗粒度判定为可疑的应用即可。这样的话其实就是减少了一部分的细粒度的检测时间。具体粗粒度的检测方法是用什么还有细粒度用什么还得具体去考虑。</li><li>程序依赖图的话可以只分析某一些函数，比如说使用了API的，使用了组件的，使用了权限的，使用了其他的一些，因为他添加噪声代码的话一般是添加无用的代码，因为要是添加一些组件什么的肯定会导致成本增加，而且会导致程序运行的问题和程序的不相似性。还有就是可以分析UI函数的依赖关系图，因为要是为了保持重打包的吸引性，外观一般不会改变很大。其实也就是说分析其核心函数的调用依赖，核心函数怎么定义的呢，就是系统关键部分的东西，同时去除第三方库和Android库。这个第三方库影响很大的，因为有一些很小的软件自己的代码可能很少，绝大部分都是第三方库的，这样的话太容易误判了。罗宾的那篇文章中的第一个基于目录的方式就是那样子的，没有过滤第三方库。</li><li>分析完成之后，看一下漏报的应用的特征，是不是都是具有一类或几类典型特征的应用被漏报或者是误报了，然后返回来优化自己的模型。</li></ol><h2 id="工具"><a href="#工具" class="headerlink" title="工具"></a>工具</h2><ul><li>Pscout：敏感权限获取</li><li>LibD第三方广告库名单软件，并且有手动验证过准确性。</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;文献阅读整理-20181013&quot;&gt;&lt;a href=&quot;#文献阅读整理-20181013&quot; class=&quot;headerlink&quot; title=&quot;文献阅读整理 20181013&quot;&gt;&lt;/a&gt;文献阅读整理 20181013&lt;/h1&gt;&lt;h2 id=&quot;1-SPRD：基于应用UI-和程序依赖图的Android-重打包应用快速检测方法&quot;&gt;&lt;a href=&quot;#1-SPRD：基于应用UI-和程序依赖图的Android-重打包应用快速检测方法&quot; class=&quot;headerlink&quot; title=&quot;1.  SPRD：基于应用UI 和程序依赖图的Android 重打包应用快速检测方法&quot;&gt;&lt;/a&gt;1.  SPRD：基于应用UI 和程序依赖图的Android 重打包应用快速检测方法&lt;/h2&gt;&lt;h3 id=&quot;1-1-文章的内容&quot;&gt;&lt;a href=&quot;#1-1-文章的内容&quot; class=&quot;headerlink&quot; title=&quot;1.1 文章的内容&quot;&gt;&lt;/a&gt;1.1 文章的内容&lt;/h3&gt;&lt;p&gt;这篇文章中说研究发现&lt;strong&gt;重打包应用通常不修改应用用户交互界面（UI, user interface）的结构&lt;/strong&gt;，提出一种基于应用UI和程序代码的两阶段检测方法。首先，设计了一种基于UI 抽象表示的散列快速相似性检测方法，识别UI 相似的可疑重打包应用；然后，使用程序依赖图作为应用特征表示，实现细粒度、精准的代码克隆检测。&lt;/p&gt;
    
    </summary>
    
      <category term="文献阅读" scheme="https://songwell1024.github.io/categories/%E6%96%87%E7%8C%AE%E9%98%85%E8%AF%BB/"/>
    
    
      <category term="文献阅读" scheme="https://songwell1024.github.io/tags/%E6%96%87%E7%8C%AE%E9%98%85%E8%AF%BB/"/>
    
      <category term="安卓重打包" scheme="https://songwell1024.github.io/tags/%E5%AE%89%E5%8D%93%E9%87%8D%E6%89%93%E5%8C%85/"/>
    
  </entry>
  
  <entry>
    <title>设计模式之访问者模式</title>
    <link href="https://songwell1024.github.io/2018/10/18/VistorPattern/"/>
    <id>https://songwell1024.github.io/2018/10/18/VistorPattern/</id>
    <published>2018-10-18T06:45:47.000Z</published>
    <updated>2018-10-18T06:46:52.689Z</updated>
    
    <content type="html"><![CDATA[<h1 id="设计模式之访问者模式"><a href="#设计模式之访问者模式" class="headerlink" title="设计模式之访问者模式"></a>设计模式之访问者模式</h1><h2 id="1-什么是访问者模式"><a href="#1-什么是访问者模式" class="headerlink" title="1. 什么是访问者模式"></a>1. 什么是访问者模式</h2><p>   Visitor模式也叫访问者模式，是行为模式之一，它分离对象的数据和行为，使用Visitor模式，可以不修改已有类的情况下，增加新的操作。</p><a id="more"></a><p>换句话说就是访问者模式就是说对于一组对象，在不改变数据结构的前提下，增加作用于这些结构元素新的功能。适用于数据结构相对稳定，它把数据结构和作用于其上的操作解耦，使得操作集合可以相对自由地演化。</p><p><strong>访问者模式的结构：</strong></p><p><img src="/2018/10/18/VistorPattern/1.png" alt="1"></p><ul><li>访问者角色（Visitor）：为该对象结构中具体元素角色声明一个访问操作接口。该操作接口的名字和参数标识了发送访问请求给具体访问者的具体元素角色。这样访问者就可以通过该元素角色的特定接口直接访问它。 </li><li>具体访问者角色（Concrete Visitor）：实现每个由访问者角色（Visitor）声明的操作。 </li><li>元素角色（Element）：定义一个Accept操作，它以一个访问者为参数。 </li><li>具体元素角色（Concrete Element）：实现由元素角色提供的Accept操作。 </li><li>对象结构角色（Object Structure）： 这是使用访问者模式必备的角色。它要具备以下特征：能枚举它的元素；可以提供一个高层的接口以允许该访问者访问它的元素；可以是一个复合（组合模式）或是一个集合，如一个列表或一个无序集合。 </li></ul><p><strong>优缺点：</strong></p><p>优点：</p><ul><li>符合单一职责原则</li><li>扩展性良好</li><li>有益于系统的管理和维护</li></ul><p>缺点：</p><ul><li>增加新的元素类变得很困难</li><li>破坏封装性，就是访问者需要知道一些类的数据结构，这些类的数据结构就暴露给了访问者。</li></ul><p><strong>适用场合：</strong></p><ul><li>如果一个系统有比较稳定的数据结构，又有经常变化的功能需求，那么访问者模式就是比较合适的</li></ul><p><strong>注意事项：</strong></p><ul><li>系统有比较稳定的数据结构，数据结构不断更新的话访问者也就需要不断的修改。</li><li>与迭代器的关系，迭代器就是提供访问者的一种注入的方式，访问者需要对对象进行处理，迭代器就是访问，不管他是怎么处理的，但是访问者就是注重对对象的处理的。</li></ul><h2 id="2-具体实例"><a href="#2-具体实例" class="headerlink" title="2. 具体实例"></a>2. 具体实例</h2><p>雇员管理系统，每个员工都有自己的信息，有大家都一样的，也有每个人不一样的。例如每个人的工资，入职时间，工作年限等等。现在雇员管理系统遇到的问题，需要添加一些新的操作功能。那怎么设计呢？</p><p>我们想就是两个类，就是员工类和员工管理类，然后实现这些功能。但是当一个人的工资要涨了，休假的时间要变长了，或者要添加新的季度绩效这个评价指标，那就得去修改员工类和管理类。我们这里可以利用访问者模式来设计，就是使用访问者把变化的东西抽象出来，然后从员工类和员工管理类中获取进行处理显示。</p><p>设计的结构类图如下：</p><p><img src="/2018/10/18/VistorPattern/2.png" alt="2"></p><p>就是抽象一个vistor的访问者接口，然后由具体的访问者去实现，因为访问者可能有很多个，所以就设计一个接口。</p><p>然后在具体的员工中有一个accept方法，将vistor注入进来，然后员工类把自己传给vistor进行处理，这种双向传递是很有意思的。</p><p>看一下具体的代码实现：</p><p>员工的抽象类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Element</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">abstract</span> <span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Accept</span><span class="params">(Visitor visitor)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>因为可能不只有员工这一个类，所以为了能够使访问者能够统一管理就设计一个基类，然后访问者可以管理实现这个基类的所有子类。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Employee</span> <span class="keyword">extends</span> <span class="title">Element</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> String name;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">float</span> income;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> vacationDays;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> degree;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Employee</span><span class="params">(String name, <span class="keyword">float</span> income, <span class="keyword">int</span> vacationDays, <span class="keyword">int</span> degree)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.name = name;</span><br><span class="line"><span class="keyword">this</span>.income = income;</span><br><span class="line"><span class="keyword">this</span>.vacationDays = vacationDays;</span><br><span class="line"><span class="keyword">this</span>.degree = degree;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.name = name;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> name;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setIncome</span><span class="params">(<span class="keyword">float</span> income)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.income = income;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">float</span> <span class="title">getIncome</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> income;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setVacationDays</span><span class="params">(<span class="keyword">int</span> vacationDays)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.vacationDays = vacationDays;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getVacationDays</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> vacationDays;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setDegree</span><span class="params">(<span class="keyword">int</span> degree)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.degree = degree;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getDegree</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> degree;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Accept</span><span class="params">(Visitor visitor)</span> </span>&#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">visitor.Visit(<span class="keyword">this</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过public void Accept(Visitor visitor) 把自己传给访问者。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Employees</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> HashMap&lt;String, Employee&gt; employees;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Employees</span><span class="params">()</span> </span>&#123;</span><br><span class="line">employees = <span class="keyword">new</span> HashMap();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Attach</span><span class="params">(Employee employee)</span> </span>&#123;</span><br><span class="line">employees.put(employee.getName(), employee);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Detach</span><span class="params">(Employee employee)</span> </span>&#123;</span><br><span class="line">employees.remove(employee);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> Employee <span class="title">getEmployee</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> employees.get(name);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Accept</span><span class="params">(Visitor visitor)</span> </span>&#123;</span><br><span class="line"><span class="keyword">for</span> (Employee e : employees.values()) &#123;</span><br><span class="line">e.Accept(visitor);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>员工管理类通过遍历的方式把所有的员工都传给了访问者。</p><p>访问者</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Visitor</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">abstract</span> <span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Visit</span><span class="params">(Element element)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>具体的访问者：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CompensationVisitor</span> <span class="keyword">implements</span> <span class="title">Visitor</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Visit</span><span class="params">(Element element)</span> </span>&#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">Employee employee = ((Employee) element);  </span><br><span class="line"></span><br><span class="line">System.out.println(employee.getName() + <span class="string">"'s Compensation is "</span></span><br><span class="line">+ (employee.getDegree() * employee.getVacationDays() * <span class="number">10</span>));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过一个强制类型转换就把Element基类转换成具体实现的子类。</p><p>测试类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainTest</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">Employees mEmployees = <span class="keyword">new</span> Employees();</span><br><span class="line"></span><br><span class="line">mEmployees.Attach(<span class="keyword">new</span> Employee(<span class="string">"Tom"</span>, <span class="number">4500</span>, <span class="number">8</span>, <span class="number">1</span>));</span><br><span class="line">mEmployees.Attach(<span class="keyword">new</span> Employee(<span class="string">"Jerry"</span>, <span class="number">6500</span>, <span class="number">10</span>, <span class="number">2</span>));</span><br><span class="line">mEmployees.Attach(<span class="keyword">new</span> Employee(<span class="string">"Jack"</span>, <span class="number">9600</span>, <span class="number">12</span>, <span class="number">3</span>));</span><br><span class="line"></span><br><span class="line">mEmployees.Accept(<span class="keyword">new</span> CompensationVisitor());</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;设计模式之访问者模式&quot;&gt;&lt;a href=&quot;#设计模式之访问者模式&quot; class=&quot;headerlink&quot; title=&quot;设计模式之访问者模式&quot;&gt;&lt;/a&gt;设计模式之访问者模式&lt;/h1&gt;&lt;h2 id=&quot;1-什么是访问者模式&quot;&gt;&lt;a href=&quot;#1-什么是访问者模式&quot; class=&quot;headerlink&quot; title=&quot;1. 什么是访问者模式&quot;&gt;&lt;/a&gt;1. 什么是访问者模式&lt;/h2&gt;&lt;p&gt;   Visitor模式也叫访问者模式，是行为模式之一，它分离对象的数据和行为，使用Visitor模式，可以不修改已有类的情况下，增加新的操作。&lt;/p&gt;
    
    </summary>
    
      <category term="设计模式" scheme="https://songwell1024.github.io/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="设计模式 访问者模式" scheme="https://songwell1024.github.io/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E8%AE%BF%E9%97%AE%E8%80%85%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>设计模式之模板方法模式</title>
    <link href="https://songwell1024.github.io/2018/10/18/TemplateMethod/"/>
    <id>https://songwell1024.github.io/2018/10/18/TemplateMethod/</id>
    <published>2018-10-18T06:43:33.000Z</published>
    <updated>2018-10-18T06:45:21.031Z</updated>
    
    <content type="html"><![CDATA[<h1 id="设计模式之模板方法模式"><a href="#设计模式之模板方法模式" class="headerlink" title="设计模式之模板方法模式"></a>设计模式之模板方法模式</h1><h2 id="1-什么是模板方法模式"><a href="#1-什么是模板方法模式" class="headerlink" title="1.  什么是模板方法模式"></a>1.  什么是模板方法模式</h2><p>Template Method模式也叫模板方法模式，是行为模式之一，它把具有特定步骤算法中的某些必要的处理委让给抽象方法，通过子类继承对抽象方法的不同实现改变整个算法的行为。换句话说就是在一个方法中定义一个算法的骨架，而将一些步骤延迟到子类中去具体实现。</p><a id="more"></a><p><strong>一般的应用场景：</strong></p><p>Template Method模式一般应用在具有以下条件的应用中：</p><ul><li>具有统一的操作步骤或操作过程</li><li>具有不同的操作细节</li><li>存在多个具有同样操作步骤的应用场景，但某些具体的操作细节却各不相同</li></ul><p><strong>模板方法模式的结构：</strong></p><p><img src="/2018/10/18/TemplateMethod/1.png" alt="1"></p><ul><li>AbstractClass：抽象类的父类</li><li>ConcreteClass：具体的实现子类</li><li>templateMethod()：模板方法</li><li>method1()与method2()：具体步骤方法  </li><li>hook()其实AbstractClass里面还应该有hook这个方法，这个方法是在抽象类中实现了，但是可以在继承的子类中进行改动</li></ul><h2 id="2-具体的实例"><a href="#2-具体的实例" class="headerlink" title="2.  具体的实例"></a>2.  具体的实例</h2><p>假设我们是星巴克的师傅，有一个训练手册，我们需要设计冲泡方法就是咖啡的冲泡方法和茶的冲泡方法</p><p>咖啡的冲泡方法：烧水，沸水冲泡，咖啡倒进杯子，最后是加糖和牛奶</p><p>茶的冲泡方法：烧水，沸水冲泡，茶倒进杯子，最后是加柠檬</p><p>对于上面的项目首先我们一开始的设计想法一般是定义两个类分别实现各自的流程呗。但是我们看到这两个类中是有重复的方法的，比如烧水，冲泡，然后我们就想可以把这两个方法拿出来，作为公共的方法。这样的话就又解耦合了一些。最后我们想饮料倒进杯子和加调料是两个抽象的方法定义在一个抽象类中，然后有各自的类去继承和个性化定制。这样我们就完成了整个的设计，这个过程其实就是模板模式的应用。</p><p>具体的代码实现：</p><p>模板类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">HotDrink</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span>  <span class="title">prepareRecipe</span><span class="params">()</span></span>&#123;</span><br><span class="line">        boilWater();</span><br><span class="line">        brew();</span><br><span class="line">        pourIncup();</span><br><span class="line">        addCondiments();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">boilWater</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"boil water"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">brew</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">pourIncup</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"pour in cup"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">addCondiments</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Coffee</span> <span class="keyword">extends</span> <span class="title">HotDrink</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">brew</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"brew coffee"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addCondiments</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"add sugar and milk"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Tea</span> <span class="keyword">extends</span> <span class="title">HotDrink</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">brew</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"brew tea"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addCondiments</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"add lemon"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        HotDrink drinkTea = <span class="keyword">new</span> Tea();</span><br><span class="line">        drinkTea.prepareRecipe();</span><br><span class="line"></span><br><span class="line">        HotDrink drinkCoffee = <span class="keyword">new</span> Coffee();</span><br><span class="line">        drinkCoffee.prepareRecipe();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样我们就使用模板方法模式完成了设计。</p><p>其实还可以通过对模板方法进行挂钩。钩子是一种被声明在抽象类中的方法，但是只有空的或者是默认的实现，其实就是让我们自己来进行个性化扩展的。</p><p>对上面的例子我们来进行钩子方式的扩展。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">HotDrinkWithHook</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span>  <span class="title">prepareRecipe</span><span class="params">()</span></span>&#123;</span><br><span class="line">        boilWater();</span><br><span class="line">        brew();</span><br><span class="line">        pourIncup();</span><br><span class="line">        <span class="keyword">if</span> (WantCondimentsHook())&#123;</span><br><span class="line">            addCondiments();</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">"No Condiments"</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">WantCondimentsHook</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">boilWater</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"boil water"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">brew</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">pourIncup</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"pour in cup"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">addCondiments</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TeaWithHook</span> <span class="keyword">extends</span> <span class="title">HotDrinkWithHook</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">brew</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"brew tea"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addCondiments</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"add lemon"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">WantCondimentsHook</span><span class="params">()</span></span>&#123;</span><br><span class="line">        BufferedReader bufferedReader = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(System.in));</span><br><span class="line">        System.out.println(<span class="string">"Would you like add milk and sugar in your coffee (y/n)"</span>);</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            String str = bufferedReader.readLine();</span><br><span class="line">            <span class="keyword">if</span> (str.equals(<span class="string">"y"</span>))&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span> (str.equals(<span class="string">"n"</span>))&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                System.out.println(<span class="string">"you have input nothing"</span>);</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">catch</span> (IOException e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过上面的实例我们发现其实模板方法模式就是封装了一个算法步骤，并允许子类为一个或多个步骤方法提供实现，模板模式可以使子类在不改变算法结构的情况下，重新定义算法的某些步骤。</p><p>其实java中的Comparable接口就是一个模板方法模式设计的，我们可以自己设计个性化方法compareTo()方法。然后使用sort方法就可以实现排序了。</p><p>还有一个经典的例子就是Swing的窗口，我们一般写Swing的时候，会使用JFrame,就是那个最基本的Swing容器，使用JFrame的时候我们会继承paint()方法，默认他是不做任何事情的，他就是一个hook(),也就是我们可以自己定制的个性化方法。这里其实就是用的模板方法模式设计的。</p><h2 id="3-好莱坞原则"><a href="#3-好莱坞原则" class="headerlink" title="3. 好莱坞原则"></a>3. 好莱坞原则</h2><p>《Head First 设计模式》上是这样给的定义：你别调用我们，我们会调用你。怎么理解呢？其实就是有的时候高层组件会依赖低层组件，低层组件又依赖高层组件，然后高层组件又依赖边侧组件，边侧组件又依赖低层组件，反正就是乱七八糟的依赖，导致发生了依赖腐败的问题。在好莱坞原则下呢我们允许低层组件挂钩到系统上，但是什么时候使用和怎么使用这些低层组件是由高层组件决定的。换句话就是高层组件对待低层组件的方式就是你别调用我们，我们会调用你。</p><h2 id="4-模板方法模式和策略模式的差异"><a href="#4-模板方法模式和策略模式的差异" class="headerlink" title="4. 模板方法模式和策略模式的差异"></a>4. 模板方法模式和策略模式的差异</h2><p>其实模板方法模式和策略模式还是有点相似的，但是也是有一定的差异的.</p><p>模板方法模式是抽象一个子类中的步骤方法，个别的步骤是可以有不同的实现的，而策略模式是将一类方法封装成算法族。</p><p>模板方法模式是通过继承实现的，而策略模式是通过对象组合的方式实现的。</p><p>模板方法模式的超类是抽象的，而且必须依赖于超类中的方法的实现，而策略模式不依赖于任何人，整个算法可以由他自己搞定。</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;设计模式之模板方法模式&quot;&gt;&lt;a href=&quot;#设计模式之模板方法模式&quot; class=&quot;headerlink&quot; title=&quot;设计模式之模板方法模式&quot;&gt;&lt;/a&gt;设计模式之模板方法模式&lt;/h1&gt;&lt;h2 id=&quot;1-什么是模板方法模式&quot;&gt;&lt;a href=&quot;#1-什么是模板方法模式&quot; class=&quot;headerlink&quot; title=&quot;1.  什么是模板方法模式&quot;&gt;&lt;/a&gt;1.  什么是模板方法模式&lt;/h2&gt;&lt;p&gt;Template Method模式也叫模板方法模式，是行为模式之一，它把具有特定步骤算法中的某些必要的处理委让给抽象方法，通过子类继承对抽象方法的不同实现改变整个算法的行为。换句话说就是在一个方法中定义一个算法的骨架，而将一些步骤延迟到子类中去具体实现。&lt;/p&gt;
    
    </summary>
    
      <category term="设计模式" scheme="https://songwell1024.github.io/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="设计模式" scheme="https://songwell1024.github.io/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
      <category term="模板方法模式" scheme="https://songwell1024.github.io/tags/%E6%A8%A1%E6%9D%BF%E6%96%B9%E6%B3%95%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>设计模式之状态模式</title>
    <link href="https://songwell1024.github.io/2018/10/18/StateMode/"/>
    <id>https://songwell1024.github.io/2018/10/18/StateMode/</id>
    <published>2018-10-18T06:41:48.000Z</published>
    <updated>2018-10-18T06:43:02.130Z</updated>
    
    <content type="html"><![CDATA[<h1 id="设计模式之状态模式"><a href="#设计模式之状态模式" class="headerlink" title="设计模式之状态模式"></a>设计模式之状态模式</h1><h2 id="1-什么是状态模式"><a href="#1-什么是状态模式" class="headerlink" title="1. 什么是状态模式"></a>1. 什么是状态模式</h2><p>   State模式也叫状态模式，是行为设计模式的一种。State模式允许通过改变对象的内部状态而改变对象的行为，这个对象表现得就好像修改了它的类一样。</p><a id="more"></a><p> 状态模式主要解决的是当控制一个对象状态转换的条件表达式过于复杂时的情况。把状态的判断逻辑转译到表现不同状态的一系列类当中，可以把复杂的判断逻辑简化。</p><p><img src="/2018/10/18/StateMode/1.png" alt="1"></p><ul><li>Context：用户对象拥有一个State类型的成员，以标识对象的当前状态； </li><li>State：接口或基类封装与Context的特定状态相关的行为； </li><li>ConcreteState：接口实现类或子类实现了一个与Context某个状态相关的行为。 </li></ul><h2 id="2-具体实例"><a href="#2-具体实例" class="headerlink" title="2. 具体实例"></a>2. 具体实例</h2><p>智能糖果机，用Java软件控制糖果机，他有以下几个动作：<br>       待机、投入一元硬币、转动把手、滑落一颗糖果、待机（根据机器内糖果库存情况，是否提示售罄）。</p><p>传统的设计怎么设计呢？很容易想到，我们就把糖果机封装成一个类，然后里面有具体的状态函数，在不同的状态函数中去判断和更新状态。具体代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CandyMachine</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">final</span> <span class="keyword">static</span> <span class="keyword">int</span> SoldOutState = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">final</span> <span class="keyword">static</span> <span class="keyword">int</span> OnReadyState = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">final</span> <span class="keyword">static</span> <span class="keyword">int</span> HasCoin = <span class="number">2</span>;</span><br><span class="line"><span class="keyword">final</span> <span class="keyword">static</span> <span class="keyword">int</span> SoldState = <span class="number">3</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> state = SoldOutState;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">CandyMachine</span><span class="params">(<span class="keyword">int</span> count)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.count = count;</span><br><span class="line"><span class="keyword">if</span> (count &gt; <span class="number">0</span>) &#123;</span><br><span class="line">state = OnReadyState;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">insertCoin</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">switch</span> (state) &#123;</span><br><span class="line"><span class="keyword">case</span> SoldOutState:</span><br><span class="line">System.out.println(<span class="string">"you can't insert coin,the machine sold out!"</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> OnReadyState:</span><br><span class="line">state = HasCoin;</span><br><span class="line">System.out</span><br><span class="line">.println(<span class="string">"you have inserted a coin,next,please turn crank!"</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> HasCoin:</span><br><span class="line">System.out.println(<span class="string">"you can't insert another coin!"</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> SoldState:</span><br><span class="line">System.out.println(<span class="string">"please wait!we are giving you a candy!"</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">returnCoin</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">switch</span> (state) &#123;</span><br><span class="line"><span class="keyword">case</span> SoldOutState:</span><br><span class="line">System.out</span><br><span class="line">.println(<span class="string">"you can't return,you haven't inserted a coin yet!"</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> OnReadyState:</span><br><span class="line">System.out.println(<span class="string">"you haven't inserted a coin yet!"</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> HasCoin:</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">"coin return!"</span>);</span><br><span class="line">state = OnReadyState;</span><br><span class="line"></span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> SoldState:</span><br><span class="line">System.out.println(<span class="string">"sorry,you already have turned the crank!"</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">turnCrank</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">switch</span> (state) &#123;</span><br><span class="line"><span class="keyword">case</span> SoldOutState:</span><br><span class="line">System.out.println(<span class="string">"you turned,but there are no candies!"</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> OnReadyState:</span><br><span class="line">System.out.println(<span class="string">"you turned,but you haven't inserted a coin!"</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> HasCoin:</span><br><span class="line">System.out.println(<span class="string">"crank turn...!"</span>);</span><br><span class="line">state = SoldState;</span><br><span class="line">dispense();</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> SoldState:</span><br><span class="line">System.out</span><br><span class="line">.println(<span class="string">"we are giving you a candy,turning another get nothing,!"</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">dispense</span><span class="params">()</span> </span>&#123;</span><br><span class="line">count = count - <span class="number">1</span>;</span><br><span class="line">System.out.println(<span class="string">"a candy rolling out!"</span>);</span><br><span class="line"><span class="keyword">if</span> (count &gt; <span class="number">0</span>) &#123;</span><br><span class="line">state = OnReadyState;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">System.out.println(<span class="string">"Oo,out of candies"</span>);</span><br><span class="line">state = SoldOutState;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">printstate</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">switch</span> (state) &#123;</span><br><span class="line"><span class="keyword">case</span> SoldOutState:</span><br><span class="line">System.out.println(<span class="string">"***SoldOutState***"</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> OnReadyState:</span><br><span class="line">System.out.println(<span class="string">"***OnReadyState***"</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> HasCoin:</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">"***HasCoin***"</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> SoldState:</span><br><span class="line">System.out.println(<span class="string">"***SoldState***"</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这种设计没有什么问题吧，可以实现现有的需要。但是现在有了新的需求了，糖果机有新的功能要添加，比如有一个幸运功能，当转到幸运功能时会给出更多的糖果，对于这个功能我们可以在上面的类中去添加，然后更改每一个方法，这样做的话其实不符合开闭原则了。我们的上面设计其实是面向功能来做的，而我们应该做的是面向接口去编程，实现对修改封闭，对扩展开放。</p><p>根据上面的想法，我们想这个项目中什么是改变的，什么是不变的呢？其实动作是不变的，就那几个动作，然后状态是改变的，我们就把改变的地方抽取出来然后设计成接口，由具体的状态去扩展继承。</p><p>类图如下：</p><p><img src="/2018/10/18/StateMode/2.png" alt="2"></p><p>我们想状态模式能根据内部状态的变化，改变对象的行为，看起来好像修改了类。上面的设计就是根据这种模式设计的。我们把改变的状态抽象出来，然后取让行为跟着状态变化。</p><p>具体的代码实现：</p><p>状态接口：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">State</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">insertCoin</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">returnCoin</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">turnCrank</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">dispense</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">printstate</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>具体的状态：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HasCoin</span> <span class="keyword">implements</span> <span class="title">State</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> CandyMachine mCandyMachine;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">HasCoin</span><span class="params">(CandyMachine mCandyMachine)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.mCandyMachine = mCandyMachine;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">insertCoin</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">System.out.println(<span class="string">"you can't insert another coin!"</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">returnCoin</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">System.out.println(<span class="string">"coin return!"</span>);</span><br><span class="line">mCandyMachine.setState(mCandyMachine.mOnReadyState);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">turnCrank</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">System.out.println(<span class="string">"crank turn...!"</span>);</span><br><span class="line">Random ranwinner=<span class="keyword">new</span> Random();</span><br><span class="line"><span class="keyword">int</span> winner=ranwinner.nextInt(<span class="number">10</span>);</span><br><span class="line"><span class="keyword">if</span>(winner==<span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">mCandyMachine.setState(mCandyMachine.mWinnerState);</span><br><span class="line"></span><br><span class="line">&#125;<span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">mCandyMachine.setState(mCandyMachine.mSoldState);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">dispense</span><span class="params">()</span> </span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">printstate</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">System.out.println(<span class="string">"***HasCoin***"</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其他的状态同理。。。</p><p>糖果机：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CandyMachine</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">State mSoldOutState;</span><br><span class="line">State mOnReadyState;</span><br><span class="line">State mHasCoin;</span><br><span class="line">State mSoldState;</span><br><span class="line">State mWinnerState;</span><br><span class="line"><span class="keyword">private</span> State state;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">CandyMachine</span><span class="params">(<span class="keyword">int</span> count)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.count = count;</span><br><span class="line">mSoldOutState = <span class="keyword">new</span> SoldOutState(<span class="keyword">this</span>);</span><br><span class="line">mOnReadyState = <span class="keyword">new</span> OnReadyState(<span class="keyword">this</span>);</span><br><span class="line">mHasCoin = <span class="keyword">new</span> HasCoin(<span class="keyword">this</span>);</span><br><span class="line">mSoldState = <span class="keyword">new</span> SoldState(<span class="keyword">this</span>);</span><br><span class="line">mWinnerState = <span class="keyword">new</span> WinnerState(<span class="keyword">this</span>);</span><br><span class="line"><span class="keyword">if</span> (count &gt; <span class="number">0</span>) &#123;</span><br><span class="line">state = mOnReadyState;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">state = mSoldOutState;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setState</span><span class="params">(State state)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.state = state;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">insertCoin</span><span class="params">()</span> </span>&#123;</span><br><span class="line">state.insertCoin();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">returnCoin</span><span class="params">()</span> </span>&#123;</span><br><span class="line">state.returnCoin();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">turnCrank</span><span class="params">()</span> </span>&#123;</span><br><span class="line">state.turnCrank();</span><br><span class="line">state.dispense();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">releaseCandy</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line"><span class="keyword">if</span> (count &gt; <span class="number">0</span>) &#123;</span><br><span class="line">count = count - <span class="number">1</span>;</span><br><span class="line">System.out.println(<span class="string">"a candy rolling out!"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getCount</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> count;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">printstate</span><span class="params">()</span> </span>&#123;</span><br><span class="line">state.printstate();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在糖果机这个类中我们只需要初始化所有的State，然后在具体的行为中去使用state下的行为。其实也就是内部状态的变化改变了对象的行为。</p><p>测试类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainTest</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">CandyMachine mCandyMachine = <span class="keyword">new</span> CandyMachine(<span class="number">6</span>);</span><br><span class="line"></span><br><span class="line">mCandyMachine.printstate();</span><br><span class="line"></span><br><span class="line">mCandyMachine.insertCoin();</span><br><span class="line">mCandyMachine.printstate();</span><br><span class="line"></span><br><span class="line">mCandyMachine.turnCrank();</span><br><span class="line"></span><br><span class="line">mCandyMachine.printstate();</span><br><span class="line"></span><br><span class="line">mCandyMachine.insertCoin();</span><br><span class="line">mCandyMachine.printstate();</span><br><span class="line"></span><br><span class="line">mCandyMachine.turnCrank();</span><br><span class="line"></span><br><span class="line">mCandyMachine.printstate();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;设计模式之状态模式&quot;&gt;&lt;a href=&quot;#设计模式之状态模式&quot; class=&quot;headerlink&quot; title=&quot;设计模式之状态模式&quot;&gt;&lt;/a&gt;设计模式之状态模式&lt;/h1&gt;&lt;h2 id=&quot;1-什么是状态模式&quot;&gt;&lt;a href=&quot;#1-什么是状态模式&quot; class=&quot;headerlink&quot; title=&quot;1. 什么是状态模式&quot;&gt;&lt;/a&gt;1. 什么是状态模式&lt;/h2&gt;&lt;p&gt;   State模式也叫状态模式，是行为设计模式的一种。State模式允许通过改变对象的内部状态而改变对象的行为，这个对象表现得就好像修改了它的类一样。&lt;/p&gt;
    
    </summary>
    
      <category term="设计模式" scheme="https://songwell1024.github.io/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="设计模式" scheme="https://songwell1024.github.io/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
      <category term="状态模式" scheme="https://songwell1024.github.io/tags/%E7%8A%B6%E6%80%81%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>设计模式之代理模式</title>
    <link href="https://songwell1024.github.io/2018/10/18/ProxyMode/"/>
    <id>https://songwell1024.github.io/2018/10/18/ProxyMode/</id>
    <published>2018-10-18T06:39:23.000Z</published>
    <updated>2018-10-18T06:41:14.239Z</updated>
    
    <content type="html"><![CDATA[<h1 id="设计模式之代理模式"><a href="#设计模式之代理模式" class="headerlink" title="设计模式之代理模式"></a>设计模式之代理模式</h1><h2 id="1-什么是代理模式"><a href="#1-什么是代理模式" class="headerlink" title="1. 什么是代理模式"></a>1. 什么是代理模式</h2><p>Proxy模式又叫做代理模式，是构造型的设计模式之一，它可以为其他对象提供一种代理（Proxy）以控制对这个对象的访问。</p><a id="more"></a><p> 所谓代理，是指具有与代理元（被代理的对象）具有相同的接口的类，客户端必须通过代理与被代理的目标类交互，而代理一般在交互的过程中（交互前后），进行某些特别的处理。</p><p>代理模式为一个对象提供一个替身，以控制对这个对象的访问被代理的对象可以是远程对象、创建开销大的对象或需要安全控制的对象代理模式有很多变体，都是为了控制与管理对象访问</p><p>代理模式的一般结构：</p><p><img src="/2018/10/18/ProxyMode/1.png" alt="1"></p><p>subject（抽象主题角色）：真实主题与代理主题的共同接口。</p><p>RealSubject（真实主题角色）：定义了代理角色所代表的真实对象。 </p><p>Proxy（代理主题角色）：含有对真实主题角色的引用，代理角色通常在将客户端调用传递给真是主题对象之前或者之后执行某些操作，而不是单纯返回真实的对象。</p><p>动态代理：</p><ol><li>InvocationHandler 接口</li><li>invoke方法</li><li>Proxy.newProxyInstance();</li></ol><p><strong>代理模式和装饰者模式差异</strong>:装饰者模式，装饰以后会添加新功能，而代理模式目的是对目标对象访问的控制和管理。</p><h2 id="2-具体实例"><a href="#2-具体实例" class="headerlink" title="2. 具体实例"></a>2. 具体实例</h2><p>对于在状态模式中介绍的糖果机项目，我们现在要添加一个监控糖果机：监控糖果机的地点、糖果库存和当前状态。这时候我们使用远程代理的模式来设计这个项目是合适的。通过代理模式获取远程对象（糖果机）的本地代表，通过它可以让远程对象当本地对象来调用。这样就相当于在本地查看糖果机的状态了。</p><p>可以使用JAVA的RMI来实现远程代理：</p><p>RMI的结构图：</p><p><img src="/2018/10/18/ProxyMode/2.png" alt="2"></p><p>RMI远程方法调用是计算机之间通过网络实现对象调用的一种通讯机制。使用这种机制，一台计算机上的对象可以调用另外 一台计算机上的对象来获取远程数据。</p><p>在过去，TCP/IP通讯是远程通讯的主要手段，面向过程的开发。而RPC使程序员更容易地调用远程程序，但在面对复杂的信息传讯时，RPC依然未能很好的支持。</p><p>RMI被设计成一种面向对象开发方式，允许程序员使用远程对象来实现通信。</p><p>RMI的实现步骤：</p><ol><li>制作远程接口：接口文件</li><li>远程接口的实现：Service文件</li><li>RMI服务端注册，开启服务</li><li>RMI代理端通过RMI查询到服务端，建立联系，通过接口调用远程方法</li></ol><p>通过上面的步骤，实现一个简单的JavaRMI 的实例：</p><p>远程接口：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">MyRemote</span> <span class="keyword">extends</span> <span class="title">Remote</span></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">sayHello</span><span class="params">()</span> <span class="keyword">throws</span> RemoteException</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接口的实现：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyRemoteImpl</span> <span class="keyword">extends</span> <span class="title">UnicastRemoteObject</span> <span class="keyword">implements</span> <span class="title">MyRemote</span></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="title">MyRemoteImpl</span><span class="params">()</span> <span class="keyword">throws</span> RemoteException </span>&#123;</span><br><span class="line"><span class="keyword">super</span>();</span><br><span class="line"><span class="comment">// TODO Auto-generated constructor stub</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">sayHello</span><span class="params">()</span> <span class="keyword">throws</span> RemoteException </span>&#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line"><span class="keyword">return</span> <span class="string">"Hello World!"</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">MyRemote service=<span class="keyword">new</span> MyRemoteImpl();</span><br><span class="line"><span class="comment">// LocateRegistry.createRegistry(6600);  </span></span><br><span class="line">Naming.rebind(<span class="string">"rmi://127.0.0.1:6600/RemoteHello"</span>, service);</span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">e.printStackTrace();</span><br><span class="line">System.out.println( e.toString());</span><br><span class="line">&#125; </span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyRemoteClient</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> MyRemoteClient().go();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">go</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">MyRemote service=(MyRemote)Naming.lookup(<span class="string">"rmi://127.0.0.1:6600/RemoteHello"</span>);</span><br><span class="line">String s=service.sayHello();</span><br><span class="line">System.out.println(s);</span><br><span class="line"></span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125; </span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后通过使用RMI怎么来实现上面所讲的糖果机的项目呢？具体代码如下：</p><p>接口：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">CandyMachineRemote</span> <span class="keyword">extends</span> <span class="title">Remote</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> String  <span class="title">getLocation</span><span class="params">()</span> <span class="keyword">throws</span> RemoteException</span>;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getCount</span><span class="params">()</span> <span class="keyword">throws</span> RemoteException</span>;</span><br><span class="line"><span class="function"><span class="keyword">public</span> State <span class="title">getstate</span><span class="params">()</span> <span class="keyword">throws</span> RemoteException</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接口的实现：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CandyMachine</span> <span class="keyword">extends</span> <span class="title">UnicastRemoteObject</span> <span class="keyword">implements</span> <span class="title">CandyMachineRemote</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">State mSoldOutState;</span><br><span class="line">State mOnReadyState;</span><br><span class="line">State mHasCoin;</span><br><span class="line">State mSoldState;</span><br><span class="line">State mWinnerState;</span><br><span class="line"><span class="keyword">private</span> String location=<span class="string">""</span>;</span><br><span class="line"><span class="keyword">private</span> State state;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">CandyMachine</span><span class="params">(String location,<span class="keyword">int</span> count)</span> <span class="keyword">throws</span> RemoteException</span>&#123;</span><br><span class="line"><span class="keyword">this</span>.location=location;</span><br><span class="line"><span class="keyword">this</span>.count = count;</span><br><span class="line">mSoldOutState = <span class="keyword">new</span> SoldOutState(<span class="keyword">this</span>);</span><br><span class="line">mOnReadyState = <span class="keyword">new</span> OnReadyState(<span class="keyword">this</span>);</span><br><span class="line">mHasCoin = <span class="keyword">new</span> HasCoin(<span class="keyword">this</span>);</span><br><span class="line">mSoldState = <span class="keyword">new</span> SoldState(<span class="keyword">this</span>);</span><br><span class="line">mWinnerState = <span class="keyword">new</span> WinnerState(<span class="keyword">this</span>);</span><br><span class="line"><span class="keyword">if</span> (count &gt; <span class="number">0</span>) &#123;</span><br><span class="line">state = mOnReadyState;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">state = mSoldOutState;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getLocation</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> location;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setState</span><span class="params">(State state)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.state = state;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">insertCoin</span><span class="params">()</span> </span>&#123;</span><br><span class="line">state.insertCoin();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">returnCoin</span><span class="params">()</span> </span>&#123;</span><br><span class="line">state.returnCoin();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">turnCrank</span><span class="params">()</span> </span>&#123;</span><br><span class="line">state.turnCrank();</span><br><span class="line">state.dispense();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">releaseCandy</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line"><span class="keyword">if</span> (count &gt; <span class="number">0</span>) &#123;</span><br><span class="line">count = count - <span class="number">1</span>;</span><br><span class="line">System.out.println(<span class="string">"a candy rolling out!"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getCount</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> count;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">printstate</span><span class="params">()</span> </span>&#123;</span><br><span class="line">state.printstate();</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> State <span class="title">getstate</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> state;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注册：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Monitor</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> ArrayList&lt;CandyMachineRemote&gt; candyMachinelst;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Monitor</span><span class="params">()</span> </span>&#123;</span><br><span class="line">candyMachinelst = <span class="keyword">new</span> ArrayList&lt;CandyMachineRemote&gt;();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addMachine</span><span class="params">(CandyMachineRemote mCandyMachine)</span> </span>&#123;</span><br><span class="line">candyMachinelst.add(mCandyMachine);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">report</span><span class="params">()</span> </span>&#123;</span><br><span class="line">CandyMachineRemote mCandyMachine;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>, len = candyMachinelst.size(); i &lt; len; i++) &#123;</span><br><span class="line">mCandyMachine = candyMachinelst.get(i);</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">System.out</span><br><span class="line">.println(<span class="string">"Machine Loc:"</span> + mCandyMachine.getLocation());</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">"Machine Candy count:"</span></span><br><span class="line">+ mCandyMachine.getCount());</span><br><span class="line">System.out.println(<span class="string">"Machine State:"</span></span><br><span class="line">+ mCandyMachine.getstate().getstatename());</span><br><span class="line">&#125; <span class="keyword">catch</span> (RemoteException e) &#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RemoteMainTest</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">CandyMachine service = <span class="keyword">new</span> CandyMachine(<span class="string">"test1"</span>, <span class="number">7</span>);</span><br><span class="line"><span class="comment">// LocateRegistry.createRegistry(6602);</span></span><br><span class="line">Naming.rebind(<span class="string">"rmi://127.0.0.1:6602/test1"</span>, service);</span><br><span class="line">service.insertCoin();</span><br><span class="line">service = <span class="keyword">new</span> CandyMachine(<span class="string">"test2"</span>, <span class="number">5</span>);</span><br><span class="line">Naming.rebind(<span class="string">"rmi://127.0.0.1:6602/test2"</span>, service);</span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">e.printStackTrace();</span><br><span class="line">System.out.println(e.toString());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">Monitor mMonitor = <span class="keyword">new</span> Monitor();</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">CandyMachineRemote mCandyMachine = (CandyMachineRemote) Naming</span><br><span class="line">.lookup(<span class="string">"rmi://127.0.0.1:6602/test1"</span>);</span><br><span class="line">mMonitor.addMachine(mCandyMachine);</span><br><span class="line">mCandyMachine = (CandyMachineRemote) Naming</span><br><span class="line">.lookup(<span class="string">"rmi://127.0.0.1:6602/test2"</span>);</span><br><span class="line">mMonitor.addMachine(mCandyMachine);</span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">mMonitor.report();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-几种其他常见的代理模式"><a href="#3-几种其他常见的代理模式" class="headerlink" title="3.  几种其他常见的代理模式"></a>3.  几种其他常见的代理模式</h2><ul><li>虚拟代理： 虚拟代理为创建开销大的对象提供代理服务。真正的对象在创建前和创建中时，由虚拟代理来扮演替身。例如手机加载图片，一开始是个模糊的，加载完成才显示清楚，开始就就是本地代理的显示。</li><li>动态代理：运行时动态的创建代理类，并将方法调用转发到指定类</li><li>保护代理：这种代理用于对真实对象的功能做一些访问限制, 在代理层做身份验证. 通过了验证, 才调用真实的主体对象的相应方法.</li><li>几种变体：、防火墙代理、缓存代理、智能引用代理、同步代理、写入时复制代理</li></ul><p>关于保护代理和动态代理的使用举一个简单的例子：</p><p>一个相亲网的项目，每个人都有自己的信息和评分，评分别人可以评价自己不能评价，个人信息自己可以修改别人只能查看。</p><p>具体的代码：</p><p>接口：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">PersonBean</span> </span>&#123;</span><br><span class="line"><span class="function">String <span class="title">getName</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function">String <span class="title">getGender</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function">String <span class="title">getInterests</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">getHotOrNotRating</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setGender</span><span class="params">(String gender)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setInterests</span><span class="params">(String interests)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setHotOrNotRating</span><span class="params">(<span class="keyword">int</span> rating)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接口的实现：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PersonBeanImpl</span> <span class="keyword">implements</span> <span class="title">PersonBean</span></span>&#123;</span><br><span class="line">String name;</span><br><span class="line">String gender;</span><br><span class="line">String interests;</span><br><span class="line"><span class="keyword">int</span> rating;</span><br><span class="line"><span class="keyword">int</span> ratingcount=<span class="number">0</span>;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line"><span class="keyword">return</span> name;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getGender</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line"><span class="keyword">return</span> gender;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getInterests</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line"><span class="keyword">return</span> interests;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getHotOrNotRating</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line"><span class="keyword">if</span>(ratingcount==<span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">return</span> (rating/ratingcount);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line"><span class="keyword">this</span>.name=name;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setGender</span><span class="params">(String gender)</span> </span>&#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line"><span class="keyword">this</span>.gender=gender;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setInterests</span><span class="params">(String interests)</span> </span>&#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line"><span class="keyword">this</span>.interests=interests;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setHotOrNotRating</span><span class="params">(<span class="keyword">int</span> rating)</span> </span>&#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line"><span class="keyword">this</span>.rating=rating;</span><br><span class="line">ratingcount++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>非本人代理</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NonOwnerInvocationHandler</span> <span class="keyword">implements</span> <span class="title">InvocationHandler</span></span>&#123;</span><br><span class="line">PersonBean person;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">NonOwnerInvocationHandler</span><span class="params">(PersonBean person)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">this</span>.person=person;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span></span></span><br><span class="line"><span class="function"><span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(method.getName().startsWith(<span class="string">"get"</span>))</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> method.invoke(person,args);</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(method.getName().equals(<span class="string">"setHotOrNotRating"</span>))</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> method.invoke(person,args);</span><br><span class="line"></span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(method.getName().startsWith(<span class="string">"set"</span>))</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> IllegalAccessException();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>本人代理</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OwnerInvocationHandler</span> <span class="keyword">implements</span> <span class="title">InvocationHandler</span></span>&#123;</span><br><span class="line">PersonBean person;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">OwnerInvocationHandler</span><span class="params">(PersonBean person)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">this</span>.person=person;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span></span></span><br><span class="line"><span class="function"><span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(method.getName().startsWith(<span class="string">"get"</span>))</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> method.invoke(person,args);</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(method.getName().equals(<span class="string">"setHotOrNotRating"</span>))</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> IllegalAccessException();</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(method.getName().startsWith(<span class="string">"set"</span>))</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> method.invoke(person,args);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>调用代理方法的类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MatchService</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">MatchService</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">PersonBean joe = getPersonInfo(<span class="string">"joe"</span>, <span class="string">"male"</span>, <span class="string">"running"</span>);</span><br><span class="line"></span><br><span class="line">PersonBean OwnerProxy = getOwnerProxy(joe);</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">"Name is "</span> + OwnerProxy.getName());</span><br><span class="line">System.out.println(<span class="string">"Interests is "</span> + OwnerProxy.getInterests());</span><br><span class="line"></span><br><span class="line">OwnerProxy.setInterests(<span class="string">"Bowling"</span>);</span><br><span class="line">System.out.println(<span class="string">"Interests are "</span> + OwnerProxy.getInterests());</span><br><span class="line">OwnerProxy.setHotOrNotRating(<span class="number">50</span>);</span><br><span class="line">System.out.println(<span class="string">"Rating is "</span> + OwnerProxy.getHotOrNotRating());</span><br><span class="line">OwnerProxy.setHotOrNotRating(<span class="number">40</span>);</span><br><span class="line">System.out.println(<span class="string">"Rating is "</span> + OwnerProxy.getHotOrNotRating());</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">"**************"</span>);</span><br><span class="line"></span><br><span class="line">PersonBean nonOwnerProxy = getNonOwnerProxy(joe);</span><br><span class="line">System.out.println(<span class="string">"Name is "</span> + nonOwnerProxy.getName());</span><br><span class="line">System.out.println(<span class="string">"Interests are "</span> + nonOwnerProxy.getInterests());</span><br><span class="line">nonOwnerProxy.setInterests(<span class="string">"haha"</span>);</span><br><span class="line">System.out.println(<span class="string">"Interests are "</span> + nonOwnerProxy.getInterests());</span><br><span class="line">nonOwnerProxy.setHotOrNotRating(<span class="number">60</span>);</span><br><span class="line">System.out.println(<span class="string">"Rating is "</span> + nonOwnerProxy.getHotOrNotRating());</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">PersonBean <span class="title">getPersonInfo</span><span class="params">(String name, String gender, String interests)</span> </span>&#123;</span><br><span class="line">PersonBean person = <span class="keyword">new</span> PersonBeanImpl();</span><br><span class="line">person.setName(name);</span><br><span class="line">person.setGender(gender);</span><br><span class="line">person.setInterests(interests);</span><br><span class="line"><span class="keyword">return</span> person;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">PersonBean <span class="title">getOwnerProxy</span><span class="params">(PersonBean person)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> (PersonBean) Proxy.newProxyInstance(person.getClass()</span><br><span class="line">.getClassLoader(), person.getClass().getInterfaces(),</span><br><span class="line"><span class="keyword">new</span> OwnerInvocationHandler(person));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">PersonBean <span class="title">getNonOwnerProxy</span><span class="params">(PersonBean person)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> (PersonBean) Proxy.newProxyInstance(person.getClass()</span><br><span class="line">.getClassLoader(), person.getClass().getInterfaces(),</span><br><span class="line"><span class="keyword">new</span> NonOwnerInvocationHandler(person));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">MatchService mMatchService=<span class="keyword">new</span> MatchService();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;设计模式之代理模式&quot;&gt;&lt;a href=&quot;#设计模式之代理模式&quot; class=&quot;headerlink&quot; title=&quot;设计模式之代理模式&quot;&gt;&lt;/a&gt;设计模式之代理模式&lt;/h1&gt;&lt;h2 id=&quot;1-什么是代理模式&quot;&gt;&lt;a href=&quot;#1-什么是代理模式&quot; class=&quot;headerlink&quot; title=&quot;1. 什么是代理模式&quot;&gt;&lt;/a&gt;1. 什么是代理模式&lt;/h2&gt;&lt;p&gt;Proxy模式又叫做代理模式，是构造型的设计模式之一，它可以为其他对象提供一种代理（Proxy）以控制对这个对象的访问。&lt;/p&gt;
    
    </summary>
    
      <category term="设计模式" scheme="https://songwell1024.github.io/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="设计模式" scheme="https://songwell1024.github.io/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
      <category term="代理模式" scheme="https://songwell1024.github.io/tags/%E4%BB%A3%E7%90%86%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>设计模式之原型模式</title>
    <link href="https://songwell1024.github.io/2018/10/18/PrototypePattern/"/>
    <id>https://songwell1024.github.io/2018/10/18/PrototypePattern/</id>
    <published>2018-10-18T06:37:07.000Z</published>
    <updated>2018-10-18T06:38:49.597Z</updated>
    
    <content type="html"><![CDATA[<h1 id="设计模式之原型模式"><a href="#设计模式之原型模式" class="headerlink" title="设计模式之原型模式"></a>设计模式之原型模式</h1><h2 id="1-什么是原型模式"><a href="#1-什么是原型模式" class="headerlink" title="1. 什么是原型模式"></a>1. 什么是原型模式</h2><p>Prototype模式是一种对象创建型模式，它采取复制原型对象的方法来创建对象的实例。使用Prototype模式创建的实例，具有与原型一样的数据。</p><a id="more"></a><p>换句话说原型模式就是通过复制现有实例来创建新的实例，无须知道相应类的信息。</p><p><strong>原型模式的结构：</strong></p><p><img src="/2018/10/18/PrototypePattern/1.gif" alt="1"></p><p><strong>优缺点</strong>：</p><p>优点：</p><ul><li>使用原型模式创建对象比直接new一个对象更有效，因为他是直接对内存进行拷贝，数据对象的内容就全部都有了，不需要重新创建内存区域重新实例化赋值这些操作了，这样的话速度能够快很多。</li><li>隐藏制造新实例的复杂性</li><li>重复地创建相似对象时可以考虑使用原型模式</li></ul><p>缺点：</p><ul><li>每一个类必须配备一个克隆方法</li><li>深层复制比较复杂</li></ul><p><strong>特点：</strong></p><ul><li>由原型对象自身创建目标对象。也就是说，对象创建这一动作发自原型对象本身。</li><li>目标对象是原型对象的一个克隆。也就是说，通过Prototype模式创建的对象，不仅仅与原型对象具有相同的结构，还与原型对象具有相同的值。</li><li>根据对象克隆深度层次的不同，有浅度克隆与深度克隆。</li></ul><p><strong>适用场合：</strong></p><ul><li>复制对象的结构与数据</li><li>希望对目标对象的修改不影响既有的原型对象</li><li>创建对象成本较大的情况下</li><li>在创建对象的时候，我们不只是希望被创建的对象继承其基类的基本结构，还希望继承原型对象的数据。 </li><li>希望对目标对象的修改不影响既有的原型对象（深度克隆的时候可以完全互不影响） </li><li>隐藏克隆操作的细节。很多时候，对对象本身的克隆需要涉及到类本身的数据细节。 </li></ul><p><strong>使用时注意事项：</strong></p><ul><li>使用原型模式复制对象不会调用类的构造方法。所以，单例模式与原型模式是冲突的，在使用时要特别注意。</li><li>Object类的clone方法只会拷贝对象中的基本的数据类型，对于数组、容器对象、引用对象等都不会拷贝，这就是浅拷贝。如果要实现深拷贝，必须将原型模式中的数组、容器对象、引用对象等另行拷贝。</li></ul><h2 id="2-具体实例："><a href="#2-具体实例：" class="headerlink" title="2. 具体实例："></a>2. 具体实例：</h2><p>银行的电子账单、广告信需要你群发邮件，特点：量大、时间要求紧。</p><p>想一下这个怎么实现，其实简单的想法就是邮件类，邮件模板类，发送邮件类这样三个函数，然后使用多线程给每个线程分配一个邮件的对象进行发送。这样的话的缺点就是需要实例化很多的对象，实例化对象的时候会有类的初始化赋值这一类的操作，速度慢，然后我们想就是因为每一封邮件是类似的，只是发送的人姓名什么的不同，我们直接拷贝对象，直接从内存中拷贝对象的话对象的信息都有然后重新进行修改，省下了new的整个过程，速度快很多。</p><p>设计的类图：</p><p><img src="/2018/10/18/PrototypePattern/2.png" alt="2"></p><p>其实从图中看不出具体的原型模式是怎么回事。看一下具体的代码;</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EventTemplate</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> String eventSubject, eventContent;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">EventTemplate</span><span class="params">(String eventSubject, String eventContent)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.eventSubject = eventSubject;</span><br><span class="line"><span class="keyword">this</span>.eventContent = eventContent;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">geteventSubject</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> eventSubject;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">geteventContent</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> eventContent;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Mail</span> <span class="keyword">implements</span> <span class="title">Cloneable</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> String receiver;</span><br><span class="line"><span class="keyword">private</span> String subject;</span><br><span class="line"><span class="keyword">private</span> String content;</span><br><span class="line"><span class="keyword">private</span> String tail;</span><br><span class="line"><span class="keyword">private</span> ArrayList&lt;String&gt; ars;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Mail</span><span class="params">(EventTemplate et)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.tail = et.geteventContent();</span><br><span class="line"><span class="keyword">this</span>.subject = et.geteventSubject();</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Mail <span class="title">clone</span><span class="params">()</span> </span>&#123;</span><br><span class="line">Mail mail = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">mail = (Mail) <span class="keyword">super</span>.clone();</span><br><span class="line">mail.ars = (ArrayList&lt;String&gt;)<span class="keyword">this</span>.ars.clone();</span><br><span class="line">&#125; <span class="keyword">catch</span> (CloneNotSupportedException e) &#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> mail;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getReceiver</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> receiver;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setReceiver</span><span class="params">(String receiver)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.receiver = receiver;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getSubject</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> subject;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setSubject</span><span class="params">(String subject)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.subject = subject;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setContent</span><span class="params">(String content)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.content = content;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getContent</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> content;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getTail</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> tail;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setTail</span><span class="params">(String tail)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.tail = tail;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Mail这个类实现了Cloneable，继承了public Mail clone() {}这个方法，用来实现对象的拷贝。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainTest</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> MAX_COUNT = <span class="number">10</span>;</span><br><span class="line">EventTemplate et = <span class="keyword">new</span> EventTemplate(<span class="string">"9月份信用卡账单"</span>, <span class="string">"国庆抽奖活动..."</span>);</span><br><span class="line"></span><br><span class="line">Mail mail = <span class="keyword">new</span> Mail(et);</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (i &lt; MAX_COUNT) &#123;</span><br><span class="line"><span class="comment">// 以下是每封邮件不同的地方</span></span><br><span class="line">Mail cloneMail = mail.clone();</span><br><span class="line">cloneMail.setContent(getRandString(<span class="number">5</span>) + <span class="string">",先生（女士）:你的信用卡账单..."</span></span><br><span class="line">+ mail.getTail());</span><br><span class="line">cloneMail.setReceiver(getRandString(<span class="number">5</span>) + <span class="string">"@"</span> + getRandString(<span class="number">8</span>)</span><br><span class="line">+ <span class="string">".com"</span>);</span><br><span class="line"><span class="comment">// 然后发送邮件</span></span><br><span class="line">sendMail(cloneMail);</span><br><span class="line">i++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">getRandString</span><span class="params">(<span class="keyword">int</span> maxLength)</span> </span>&#123;</span><br><span class="line">String source = <span class="string">"abcdefghijklmnopqrskuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ"</span>;</span><br><span class="line">StringBuffer sb = <span class="keyword">new</span> StringBuffer();</span><br><span class="line">Random rand = <span class="keyword">new</span> Random();</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; maxLength; i++) &#123;</span><br><span class="line">sb.append(source.charAt(rand.nextInt(source.length())));</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> sb.toString();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">sendMail</span><span class="params">(Mail mail)</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"标题："</span> + mail.getSubject() + <span class="string">"\t收件人："</span></span><br><span class="line">+ mail.getReceiver() + <span class="string">"\t内容："</span> + mail.getContent()</span><br><span class="line">+ <span class="string">"\t....发送成功！"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在测试类中每次发不同的邮件时都会Mail cloneMail = mail.clone();就是对象的复制。</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;设计模式之原型模式&quot;&gt;&lt;a href=&quot;#设计模式之原型模式&quot; class=&quot;headerlink&quot; title=&quot;设计模式之原型模式&quot;&gt;&lt;/a&gt;设计模式之原型模式&lt;/h1&gt;&lt;h2 id=&quot;1-什么是原型模式&quot;&gt;&lt;a href=&quot;#1-什么是原型模式&quot; class=&quot;headerlink&quot; title=&quot;1. 什么是原型模式&quot;&gt;&lt;/a&gt;1. 什么是原型模式&lt;/h2&gt;&lt;p&gt;Prototype模式是一种对象创建型模式，它采取复制原型对象的方法来创建对象的实例。使用Prototype模式创建的实例，具有与原型一样的数据。&lt;/p&gt;
    
    </summary>
    
      <category term="设计模式" scheme="https://songwell1024.github.io/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="设计模式" scheme="https://songwell1024.github.io/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
      <category term="原型模式" scheme="https://songwell1024.github.io/tags/%E5%8E%9F%E5%9E%8B%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>设计模式之备忘录模式</title>
    <link href="https://songwell1024.github.io/2018/10/18/MementoPattern/"/>
    <id>https://songwell1024.github.io/2018/10/18/MementoPattern/</id>
    <published>2018-10-18T06:29:48.000Z</published>
    <updated>2018-10-18T06:31:37.761Z</updated>
    
    <content type="html"><![CDATA[<h1 id="设计模式之备忘录模式"><a href="#设计模式之备忘录模式" class="headerlink" title="设计模式之备忘录模式"></a>设计模式之备忘录模式</h1><h2 id="1-什么是备忘录模式"><a href="#1-什么是备忘录模式" class="headerlink" title="1. 什么是备忘录模式"></a>1. 什么是备忘录模式</h2><p>备忘录模式就是说在不破坏封装的前提下，存储关键对象的重要状态，从而可以在将来把对象还原到存储的那个状态。</p><a id="more"></a><p><strong>备忘录模式的结构：</strong></p><p><img src="/2018/10/18/MementoPattern/1.png" alt="1"></p><p>   如果一个对象需要保存状态并可通过undo或rollback等操作恢复到以前的状态时，可以使用Memento模式。</p><ul><li>Originator（原生者）需要被保存状态以便恢复的那个对象。</li><li>Memento（备忘录）该对象由Originator创建，主要用来保存Originator的内部状态。</li><li>Caretaker（管理者）负责在适当的时间保存/恢复Originator对象的状态。</li></ul><p>具体的就是说：</p><ul><li>一个类需要保存它的对象的状态（相当于Originator角色）</li><li>设计一个类，该类只是用来保存上述对象的状态（相当于Memento角色）</li><li>需要的时候，Caretaker角色要求Originator返回一个Memento并加以保存</li><li>undo或rollback操作时，通过Caretaker保存的Memento恢复Originator对象的状态</li></ul><p><strong>优缺点：</strong></p><p>优点：</p><ul><li>状态存储在外面，不和关键对象混在一起，这可以帮助维护内聚  </li><li>提供了容易实现的恢复能力</li><li>保持了关键对象的数据封装</li></ul><p>缺点：</p><ul><li>资源消耗上面备忘录对象会很昂贵</li><li>存储和恢复状态的过程比较耗时</li></ul><h2 id="2-具体实例"><a href="#2-具体实例" class="headerlink" title="2.  具体实例"></a>2.  具体实例</h2><p>游戏进度保存：对象状态，场景…然后一个游戏中或者团队中有很多人要保存进度，然后每个人保存的进度必须是独立的，读取的时候也是只能自己读取自己的状态，这个时候我们就使用备忘录模式来设计。设计的类图如下：</p><p><img src="/2018/10/18/MementoPattern/2.png" alt="2"></p><p>就是先设计一个备忘录的接口，然后由具体的发起者去实现和扩展这个接口，当发起者需要保存状态时就创建一个备忘录然后交给Caretaker（管理者）去管理，读取的时候直接从管理者那里读取，并且只能读取到自己的状态。</p><p>看一下具体的代码实现：</p><p>备忘录的接口:空的，因为这个例子中没有什么要实现的，具体的都要发起者中自己个性化实现了。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">MementoIF</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Originator</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> HashMap&lt;String, String&gt; state;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Originator</span><span class="params">()</span> </span>&#123;</span><br><span class="line">state = <span class="keyword">new</span> HashMap();</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> MementoIF <span class="title">createMemento</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> Memento(state);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">restoreMemento</span><span class="params">(MementoIF memento)</span> </span>&#123;</span><br><span class="line">state = ((Memento) memento).getState();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">showState</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"now state:"</span> + state.toString());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testState1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">state.put(<span class="string">"blood"</span>, <span class="string">"500"</span>);</span><br><span class="line">state.put(<span class="string">"progress"</span>, <span class="string">"gate1 end"</span>);</span><br><span class="line">state.put(<span class="string">"enemy"</span>, <span class="string">"5"</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testState2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">state.put(<span class="string">"blood"</span>, <span class="string">"450"</span>);</span><br><span class="line">state.put(<span class="string">"progress"</span>, <span class="string">"gate3 start"</span>);</span><br><span class="line">state.put(<span class="string">"enemy"</span>, <span class="string">"3"</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">Memento</span> <span class="keyword">implements</span> <span class="title">MementoIF</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> HashMap&lt;String, String&gt; state;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="title">Memento</span><span class="params">(HashMap state)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.state = <span class="keyword">new</span> HashMap(state);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> HashMap <span class="title">getState</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> state;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">setState</span><span class="params">(HashMap state)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.state = state;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Originator2</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> ArrayList&lt;String&gt; state;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Originator2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">state = <span class="keyword">new</span> ArrayList&lt;String&gt;();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> MementoIF <span class="title">createMemento</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> Memento(state);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">restoreMemento</span><span class="params">(MementoIF memento)</span> </span>&#123;</span><br><span class="line">state = ((Memento) memento).getState();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testState1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">state = <span class="keyword">new</span> ArrayList&lt;String&gt;();</span><br><span class="line">state.add(<span class="string">"blood:320"</span>);</span><br><span class="line">state.add(<span class="string">"progress:gate2 mid"</span>);</span><br><span class="line">state.add(<span class="string">"enemy:15"</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testState2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">state = <span class="keyword">new</span> ArrayList&lt;String&gt;();</span><br><span class="line">state.add(<span class="string">"blood:230"</span>);</span><br><span class="line">state.add(<span class="string">"progress:gate8 last"</span>);</span><br><span class="line">state.add(<span class="string">"enemy:12"</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">showState</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"now state:"</span> + state.toString());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">Memento</span> <span class="keyword">implements</span> <span class="title">MementoIF</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> ArrayList&lt;String&gt; state;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="title">Memento</span><span class="params">(ArrayList&lt;String&gt; state)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.state = <span class="keyword">new</span> ArrayList(state);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> ArrayList&lt;String&gt; <span class="title">getState</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> state;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">setState</span><span class="params">(ArrayList&lt;String&gt; state)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.state = state;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>备忘录的管理者</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MementoCaretaker</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> HashMap&lt;String, MementoIF&gt; mementomap;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">MementoCaretaker</span><span class="params">()</span> </span>&#123;</span><br><span class="line">mementomap = <span class="keyword">new</span> HashMap&lt;String, MementoIF&gt;();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> MementoIF <span class="title">retrieveMemento</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> mementomap.get(name);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 备忘录赋值方法</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">saveMemento</span><span class="params">(String name, MementoIF memento)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.mementomap.put(name, memento);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">MementoCaretaker mMementoCaretaker = <span class="keyword">new</span> MementoCaretaker();</span><br><span class="line">Originator mOriginator = <span class="keyword">new</span> Originator();</span><br><span class="line">Originator2 mOriginator2 = <span class="keyword">new</span> Originator2();</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">"*****Originator*****"</span>);</span><br><span class="line">mOriginator.testState1();</span><br><span class="line">mMementoCaretaker</span><br><span class="line">.saveMemento(<span class="string">"Originator"</span>, mOriginator.createMemento());</span><br><span class="line">mOriginator.showState();</span><br><span class="line">mOriginator.testState2();</span><br><span class="line">mOriginator.showState();</span><br><span class="line">mOriginator.restoreMemento(mMementoCaretaker</span><br><span class="line">.retrieveMemento(<span class="string">"Originator"</span>));</span><br><span class="line">mOriginator.showState();</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">"*****Originator 2*****"</span>);</span><br><span class="line">mOriginator2.testState1();</span><br><span class="line">mOriginator2.showState();</span><br><span class="line">mMementoCaretaker.saveMemento(<span class="string">"Originator2"</span>,</span><br><span class="line">mOriginator2.createMemento());</span><br><span class="line">mOriginator2.testState2();</span><br><span class="line">mOriginator2.showState();</span><br><span class="line">mOriginator2.restoreMemento(mMementoCaretaker</span><br><span class="line">.retrieveMemento(<span class="string">"Originator2"</span>));</span><br><span class="line">mOriginator2.showState();</span><br><span class="line"></span><br><span class="line"><span class="comment">//System.out.println("*****Originator&amp;&amp;Originator 2*****");</span></span><br><span class="line"><span class="comment">//mOriginator.restoreMemento(mMementoCaretaker</span></span><br><span class="line"><span class="comment">//.retrieveMemento("Originator2"));</span></span><br><span class="line"><span class="comment">//mOriginator.showState();</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;设计模式之备忘录模式&quot;&gt;&lt;a href=&quot;#设计模式之备忘录模式&quot; class=&quot;headerlink&quot; title=&quot;设计模式之备忘录模式&quot;&gt;&lt;/a&gt;设计模式之备忘录模式&lt;/h1&gt;&lt;h2 id=&quot;1-什么是备忘录模式&quot;&gt;&lt;a href=&quot;#1-什么是备忘录模式&quot; class=&quot;headerlink&quot; title=&quot;1. 什么是备忘录模式&quot;&gt;&lt;/a&gt;1. 什么是备忘录模式&lt;/h2&gt;&lt;p&gt;备忘录模式就是说在不破坏封装的前提下，存储关键对象的重要状态，从而可以在将来把对象还原到存储的那个状态。&lt;/p&gt;
    
    </summary>
    
      <category term="设计模式" scheme="https://songwell1024.github.io/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="设计模式" scheme="https://songwell1024.github.io/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
      <category term="备忘录模式" scheme="https://songwell1024.github.io/tags/%E5%A4%87%E5%BF%98%E5%BD%95%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>设计模式之迭代器模式</title>
    <link href="https://songwell1024.github.io/2018/10/18/IteratorMode/"/>
    <id>https://songwell1024.github.io/2018/10/18/IteratorMode/</id>
    <published>2018-10-18T06:23:28.000Z</published>
    <updated>2018-10-18T06:25:02.192Z</updated>
    
    <content type="html"><![CDATA[<h1 id="设计模式之迭代器模式"><a href="#设计模式之迭代器模式" class="headerlink" title="设计模式之迭代器模式"></a>设计模式之迭代器模式</h1><h2 id="1-什么是迭代器模式"><a href="#1-什么是迭代器模式" class="headerlink" title="1.  什么是迭代器模式"></a>1.  什么是迭代器模式</h2><p>Iterator模式也叫迭代模式，是行为模式之一，它把对容器中包含的内部对象的访问委让给外部类，使用Iterator（遍历）按顺序进行遍历访问的设计模式。</p><a id="more"></a><p>在应用Iterator模式之前，首先应该明白Iterator模式用来解决什么问题。或者说，如果不使用</p><p>Iterator模式，会存在什么问题：</p><ol><li>由容器自己实现顺序遍历。直接在容器类里直接添加顺序遍历方法 </li><li>让调用者自己实现遍历。直接暴露数据细节给外部。</li></ol><p>以上方法1与方法2都可以实现对遍历，这样有问题呢？</p><ol><li>容器类承担了太多功能：一方面需要提供添加删除等本身应有的功能；一方面还需要提供遍历访问功能。</li><li>往往容器在实现遍历的过程中，需要保存遍历状态，当跟元素的添加删除等功能夹杂在一起，很容易引起混乱和程序运行错误等。</li></ol><p>迭代器模式的一般应用：</p><p>   Iterator模式就是为了有效地处理按顺序进行遍历访问的一种设计模式，简单地说，Iterator模式提供一种有效的方法，可以屏蔽聚集对象集合的容器类的实现细节，而能对容器内包含的对象元素按顺序进行有效的遍历访问。</p><p>所以，Iterator模式的应用场景可以归纳为满足以下几个条件：</p><ul><li>访问容器中包含的内部对象</li><li>按顺序访问</li></ul><p><strong>迭代器模式的结构</strong>：</p><p><img src="/2018/10/18/IteratorMode/1.png" alt="1"></p><ul><li>Iterator（迭代器接口）：该接口必须定义实现迭代功能的最小定义方法集比如提供hasNext()和next()方法。这是所有的迭代器必须要实现的方法，可以使用java内置的Iterator也可以自己个性化定制</li><li>ConcreteIterator（迭代器实现类）：迭代器接口Iterator的实现类。可以根据具体情况加以实现。</li><li>Aggregate（容器接口）：定义基本功能以及提供类似Iterator iterator()的方法；</li><li>concreteAggregate（容器实现类）：容器接口的实现类。必须实现Iterator iterator()方法。 </li></ul><p><strong>优点</strong>：</p><ol><li>实现功能分离，简化容器接口。让容器只实现本身的基本功能，把迭代功能委让给外部类实现，符合类的设计原则。</li><li>隐藏容器的实现细节。</li><li>为容器或其子容器提供了一个统一接口，一方面方便调用；另一方面使得调用者不必关注迭代器的实现细节。</li><li>可以为容器或其子容器实现不同的迭代方法或多个迭代方法。 </li></ol><h2 id="2-1具体实例"><a href="#2-1具体实例" class="headerlink" title="2.1具体实例"></a>2.1具体实例</h2><p>举一个具体的例子吧，xain’z现在有两家餐厅要合并，合并之后呢需要把菜单统一合并，形成一个统一的菜单，在打印的时候呢能够全部打印出来。</p><p>首先的设计想法呢就是每一个餐厅设计一个自己的菜单的类，但是自己在设计的时候使用的是不同的数据结构实现的这个菜单类，这样子的话其实在写一个专门的类似于打印的类，然后实例化两个餐厅然后打印出来。这样的话就是我要再合并一个餐厅的时候需要更改这个类。比较麻烦，所以我们就需要使用迭代器模式来设计这个项目。使用迭代器的话就很容易解耦餐厅和打印菜单之间的耦合关系。具体是怎么实现呢？</p><p>首先需要实现一个迭代器的接口：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">public interface Iterator &#123;</span><br><span class="line">   </span><br><span class="line">   public boolean hasNext();</span><br><span class="line">   public Object next();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后具体的类去扩展实现它：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line">ublic <span class="class"><span class="keyword">class</span> <span class="title">DinerMenu</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="keyword">int</span> Max_Items = <span class="number">5</span>;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> numberOfItems = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">private</span> MenuItem[] menuItems;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">DinerMenu</span><span class="params">()</span> </span>&#123;</span><br><span class="line">menuItems = <span class="keyword">new</span> MenuItem[Max_Items];</span><br><span class="line">addItem(<span class="string">"vegetable Blt"</span>, <span class="string">"bacon&amp;lettuce&amp;tomato&amp;cabbage"</span>, <span class="keyword">true</span>, <span class="number">3.58f</span>);</span><br><span class="line">addItem(<span class="string">"Blt"</span>, <span class="string">"bacon&amp;lettuce&amp;tomato"</span>, <span class="keyword">false</span>, <span class="number">3.00f</span>);</span><br><span class="line">addItem(<span class="string">"bean soup"</span>, <span class="string">"bean&amp;potato salad"</span>, <span class="keyword">true</span>, <span class="number">3.28f</span>);</span><br><span class="line">addItem(<span class="string">"hotdog"</span>, <span class="string">"onions&amp;cheese&amp;bread"</span>, <span class="keyword">false</span>, <span class="number">3.05f</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">addItem</span><span class="params">(String name, String description, <span class="keyword">boolean</span> vegetable,</span></span></span><br><span class="line"><span class="function"><span class="params"><span class="keyword">float</span> price)</span> </span>&#123;</span><br><span class="line">MenuItem menuItem = <span class="keyword">new</span> MenuItem(name, description, vegetable, price);</span><br><span class="line"><span class="keyword">if</span> (numberOfItems &gt;= Max_Items) &#123;</span><br><span class="line">System.err.println(<span class="string">"sorry,menu is full!can not add another item"</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">menuItems[numberOfItems] = menuItem;</span><br><span class="line">numberOfItems++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> Iterator <span class="title">getIterator</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> DinerIterator();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DinerIterator</span> <span class="keyword">implements</span> <span class="title">Iterator</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> position;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">DinerIterator</span><span class="params">()</span> </span>&#123;</span><br><span class="line">position = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">hasNext</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line"><span class="keyword">if</span> (position &lt; numberOfItems) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">next</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">MenuItem menuItem = menuItems[position];</span><br><span class="line">position++;</span><br><span class="line"><span class="keyword">return</span> menuItem;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CakeHouseMenu</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> ArrayList&lt;MenuItem&gt; menuItems;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">CakeHouseMenu</span><span class="params">()</span> </span>&#123;</span><br><span class="line">menuItems = <span class="keyword">new</span> ArrayList&lt;MenuItem&gt;();</span><br><span class="line"></span><br><span class="line">addItem(<span class="string">"KFC Cake Breakfast"</span>,<span class="string">"boiled eggs&amp;toast&amp;cabbage"</span>,<span class="keyword">true</span>,<span class="number">3.99f</span>);</span><br><span class="line">addItem(<span class="string">"MDL Cake Breakfast"</span>,<span class="string">"fried eggs&amp;toast"</span>,<span class="keyword">false</span>,<span class="number">3.59f</span>);</span><br><span class="line">addItem(<span class="string">"Stawberry Cake"</span>,<span class="string">"fresh stawberry"</span>,<span class="keyword">true</span>,<span class="number">3.29f</span>);</span><br><span class="line">addItem(<span class="string">"Regular Cake Breakfast"</span>,<span class="string">"toast&amp;sausage"</span>,<span class="keyword">true</span>,<span class="number">2.59f</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">addItem</span><span class="params">(String name, String description, <span class="keyword">boolean</span> vegetable,</span></span></span><br><span class="line"><span class="function"><span class="params"><span class="keyword">float</span> price)</span> </span>&#123;</span><br><span class="line">MenuItem menuItem = <span class="keyword">new</span> MenuItem(name, description, vegetable, price);</span><br><span class="line">menuItems.add(menuItem);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> Iterator <span class="title">getIterator</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> CakeHouseIterator() ;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CakeHouseIterator</span> <span class="keyword">implements</span>  <span class="title">Iterator</span></span></span><br><span class="line"><span class="class"> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> position=<span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">CakeHouseIterator</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  position=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"> <span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">hasNext</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line"><span class="keyword">if</span>(position&lt;menuItems.size())</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">next</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">MenuItem menuItem =menuItems.get(position);</span><br><span class="line">position++;</span><br><span class="line"><span class="keyword">return</span> menuItem;</span><br><span class="line">&#125;&#125;;</span><br><span class="line"><span class="comment">//其他功能代码</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最后就是具体的合并之后的打印类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Waitress</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> ArrayList&lt;Iterator&gt; iterators=<span class="keyword">new</span> ArrayList&lt;Iterator&gt;();</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Waitress</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addIterator</span><span class="params">(Iterator iterator)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">iterators.add(iterator);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">printMenu</span><span class="params">()</span> </span>&#123;</span><br><span class="line">Iterator iterator;</span><br><span class="line">MenuItem menuItem;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>, len = iterators.size(); i &lt; len; i++) &#123;</span><br><span class="line">iterator = iterators.get(i);</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>(iterator.hasNext())</span><br><span class="line">&#123;</span><br><span class="line">menuItem=(MenuItem)iterator.next();</span><br><span class="line">System.out.println(menuItem.getName() + <span class="string">"***"</span></span><br><span class="line">+menuItem.getPrice()+<span class="string">"***"</span>+ menuItem.getDescription());</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">printBreakfastMenu</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">printLunchMenu</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">printVegetableMenu</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainTest</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">Waitress mWaitress=<span class="keyword">new</span> Waitress();</span><br><span class="line">CakeHouseMenu mCakeHouseMenu = <span class="keyword">new</span> CakeHouseMenu();</span><br><span class="line">DinerMenumDinerMenu = <span class="keyword">new</span> DinerMenu();</span><br><span class="line"></span><br><span class="line">mWaitress.addIterator(mCakeHouseMenu.getIterator());</span><br><span class="line">mWaitress.addIterator(mDinerMenu.getIterator());</span><br><span class="line">mWaitress.printMenu();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面的方式其实是我们自己写了一个迭代器，其实java有内置的迭代器，我们用过collection的就知道，遍历的时候就是使用的Iterator。</p><p>上面的扩展实现Iterator的类使用java内置的Iterator怎么来做呢？</p><p>首先是： DinerMenu，因为他的菜单是数组实现的，没有内置的迭代器，所以还是需要我们自己继承内置的迭代器然后自己扩展实现一个。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DinerMenu</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="keyword">int</span> Max_Items = <span class="number">5</span>;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> numberOfItems = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">private</span> MenuItem[] menuItems;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">DinerMenu</span><span class="params">()</span> </span>&#123;</span><br><span class="line">menuItems = <span class="keyword">new</span> MenuItem[Max_Items];</span><br><span class="line">addItem(<span class="string">"vegetable Blt"</span>, <span class="string">"bacon&amp;lettuce&amp;tomato&amp;cabbage"</span>, <span class="keyword">true</span>, <span class="number">3.58f</span>);</span><br><span class="line">addItem(<span class="string">"Blt"</span>, <span class="string">"bacon&amp;lettuce&amp;tomato"</span>, <span class="keyword">false</span>, <span class="number">3.00f</span>);</span><br><span class="line">addItem(<span class="string">"bean soup"</span>, <span class="string">"bean&amp;potato salad"</span>, <span class="keyword">true</span>, <span class="number">3.28f</span>);</span><br><span class="line">addItem(<span class="string">"hotdog"</span>, <span class="string">"onions&amp;cheese&amp;bread"</span>, <span class="keyword">false</span>, <span class="number">3.05f</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">addItem</span><span class="params">(String name, String description, <span class="keyword">boolean</span> vegetable,</span></span></span><br><span class="line"><span class="function"><span class="params"><span class="keyword">float</span> price)</span> </span>&#123;</span><br><span class="line">MenuItem menuItem = <span class="keyword">new</span> MenuItem(name, description, vegetable, price);</span><br><span class="line"><span class="keyword">if</span> (numberOfItems &gt;= Max_Items) &#123;</span><br><span class="line">System.err.println(<span class="string">"sorry,menu is full!can not add another item"</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">menuItems[numberOfItems] = menuItem;</span><br><span class="line">numberOfItems++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> Iterator <span class="title">getIterator</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> DinerIterator();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DinerIterator</span> <span class="keyword">implements</span> <span class="title">Iterator</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> position = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">hasNext</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line"><span class="keyword">if</span> (position &lt; numberOfItems) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br><span class="line">position = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">next</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">MenuItem menuItem = menuItems[position];</span><br><span class="line">position++;</span><br><span class="line"><span class="keyword">return</span> menuItem;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">remove</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>CakeHouseMenu的菜单是由 ArrayList，java内的 ArrayList是有Iterator的直接使用就可以了。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CakeHouseMenu</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> ArrayList&lt;MenuItem&gt; menuItems;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> position=<span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">CakeHouseMenu</span><span class="params">()</span> </span>&#123;</span><br><span class="line">menuItems = <span class="keyword">new</span> ArrayList&lt;MenuItem&gt;();</span><br><span class="line"></span><br><span class="line">addItem(<span class="string">"KFC Cake Breakfast"</span>,<span class="string">"boiled eggs&amp;toast&amp;cabbage"</span>,<span class="keyword">true</span>,<span class="number">3.99f</span>);</span><br><span class="line">addItem(<span class="string">"MDL Cake Breakfast"</span>,<span class="string">"fried eggs&amp;toast"</span>,<span class="keyword">false</span>,<span class="number">3.59f</span>);</span><br><span class="line">addItem(<span class="string">"Stawberry Cake"</span>,<span class="string">"fresh stawberry"</span>,<span class="keyword">true</span>,<span class="number">3.29f</span>);</span><br><span class="line">addItem(<span class="string">"Regular Cake Breakfast"</span>,<span class="string">"toast&amp;sausage"</span>,<span class="keyword">true</span>,<span class="number">2.59f</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">addItem</span><span class="params">(String name, String description, <span class="keyword">boolean</span> vegetable,</span></span></span><br><span class="line"><span class="function"><span class="params"><span class="keyword">float</span> price)</span> </span>&#123;</span><br><span class="line">MenuItem menuItem = <span class="keyword">new</span> MenuItem(name, description, vegetable, price);</span><br><span class="line">menuItems.add(menuItem);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> Iterator <span class="title">getIterator</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> menuItems.iterator();</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//其他功能代码</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>看了上面的迭代器，之后next方法，那我要是访问前一个的时候怎么办，有没有previous的方法，当你自己个性化实现迭代器的时候是可以实现的，你添加两个方法，一个是获取前一个元素，一个是告诉你是否到达了最前面。然后Java的Collection FrameWork提供了另一种迭代器接口ListIterator,这个接口里面就是那个previous的方法，可以访问前一个元素。</p><h2 id="3-单一责任原则"><a href="#3-单一责任原则" class="headerlink" title="3. 单一责任原则"></a>3. 单一责任原则</h2><p>单一责任原则就是：一个类应该只有一个引起变化的原因。</p><p>实现单一责任原则的话，在维护和修改代码的时候更加容易，因为每一个类只承担了一种责任，修改的该类的区域可能也就只有一组，但是很多种责任聚合在一块儿的话就修改的区域就会很多，并且你会感觉自己改的是乱起八糟的。</p><p>内聚是一个比单一责任原则更加普遍的概念，它用来度量一个类或模块紧密地达到单一目的或责任。当一个模块被设计的只支持一组相关功能的时候就是高内聚的，当被设计成支持一组不相关的功能的时候就是低内聚的。</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;设计模式之迭代器模式&quot;&gt;&lt;a href=&quot;#设计模式之迭代器模式&quot; class=&quot;headerlink&quot; title=&quot;设计模式之迭代器模式&quot;&gt;&lt;/a&gt;设计模式之迭代器模式&lt;/h1&gt;&lt;h2 id=&quot;1-什么是迭代器模式&quot;&gt;&lt;a href=&quot;#1-什么是迭代器模式&quot; class=&quot;headerlink&quot; title=&quot;1.  什么是迭代器模式&quot;&gt;&lt;/a&gt;1.  什么是迭代器模式&lt;/h2&gt;&lt;p&gt;Iterator模式也叫迭代模式，是行为模式之一，它把对容器中包含的内部对象的访问委让给外部类，使用Iterator（遍历）按顺序进行遍历访问的设计模式。&lt;/p&gt;
    
    </summary>
    
      <category term="设计模式" scheme="https://songwell1024.github.io/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="设计模式" scheme="https://songwell1024.github.io/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
      <category term="迭代器模式" scheme="https://songwell1024.github.io/tags/%E8%BF%AD%E4%BB%A3%E5%99%A8%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>设计模式之解释器模式</title>
    <link href="https://songwell1024.github.io/2018/10/18/InterpreterPattern/"/>
    <id>https://songwell1024.github.io/2018/10/18/InterpreterPattern/</id>
    <published>2018-10-18T06:20:31.000Z</published>
    <updated>2018-10-18T06:22:39.246Z</updated>
    
    <content type="html"><![CDATA[<h1 id="设计模式之解释器模式"><a href="#设计模式之解释器模式" class="headerlink" title="设计模式之解释器模式"></a>设计模式之解释器模式</h1><h2 id="1-什么是解释器模式"><a href="#1-什么是解释器模式" class="headerlink" title="1. 什么是解释器模式"></a>1. 什么是解释器模式</h2><p>   Interpreter模式也叫解释器模式，是行为模式之一，它是一种特殊的设计模式，它建立一个解释器，对于特定的计算机程序设计语言，用来解释预先定义的文法。简单地说，Interpreter模式是一种简单的语法解释器构架。</p><a id="more"></a><p>换一种解释就是定义一个语法, 定义一个解释器，该解释器处理该语法句子将某些复杂问题，表达为某种语法规则，然后构建解释器来解释处理这类句子。</p><p><strong>解释器模式的结构：</strong></p><p><img src="/2018/10/18/InterpreterPattern/1.jpg" alt="1"></p><ul><li>Context：解释器上下文环境类。用来存储解释器的上下文环境，比如需要解释的文法等。</li><li>AbstractExpression：解释器抽象类。</li><li>ConcreteExpression：解释器具体实现类。 </li></ul><p><strong>优缺点</strong>：</p><p>优点：</p><ul><li>容易修改，修改语法规则只要修改相应非终结符即可</li><li>扩展方便，扩展语法，只要增加非终结符类即可</li></ul><p>缺点：</p><ul><li>对于复杂语法的表示会产生复杂的类层次结构，不便管理和维护</li><li>解释器采用递归方式，效率会受影响</li></ul><p><strong>一般的适用场景</strong>：</p><ul><li>当有一个语言需要解释执行, 并且你可将该语言中的句子表示为一个抽象语法树时，可使用解释器模式。而当存在以下情况时该模式效果最好： </li><li>该文法简单对于复杂的文法, 文法的类层次变得庞大而无法管理。此时语法分析程序生成器这样的工具是更好的选择。它们无需构建抽象语法树即可解释表达式, 这样可以节省空间而且还可能节省时间。 </li><li>效率不是一个关键问题，最高效的解释器通常不是通过直接解释语法分析树实现的, 而是首先将它们转换成另一种形式。例如，正则表达式通常被转换成状态机。但即使在这种情况下, 转换器仍可用解释器模式实现, 该模式仍是有用的。</li></ul><p><strong>使用时的注意事项：</strong></p><ul><li>尽量不要在重要的模块中使用解释器模式</li><li>解释器模式在实际的系统开发中使用的非常少</li><li>可以考虑一下Expression4J、MESP、Jep等开源的解析工具包</li></ul><h2 id="2-具体的实例"><a href="#2-具体的实例" class="headerlink" title="2. 具体的实例"></a>2. 具体的实例</h2><p>有一个大数据的项目，大数据统计项目遇到了问题：</p><p>按照计算模型对现有数据统计、分析、预测，一般的计算模型是一个或多个运算公式，通常是加减乘除四则运算，设计方案要有高扩展性。</p><p>计算模型的设计：</p><p>计算模型按正常算术方式书写，解释器处理语法逻辑</p><p>计算模型里有两类符号：数据和计算符</p><p>用逆波兰算法分析算式语法</p><p>用解释器模式处理数据。</p><p>这里项目中其实就是要使用解释器来计算符号公式。 解释的意思就是用一种方式或语法来执行他。</p><p>项目设计的类图如下所示：</p><p><img src="/2018/10/18/InterpreterPattern/1539594118(1" alt="1539594118">.png)</p><p>具体的代码如下：</p><p>AbstractExpresstion:抽象表达式：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">AbstractExpresstion</span> </span>&#123;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> Float <span class="title">interpreter</span><span class="params">(HashMap&lt;String, Float&gt; var)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>VarExpresstion:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">VarExpresstion</span> <span class="keyword">extends</span> <span class="title">AbstractExpresstion</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> String key;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">VarExpresstion</span><span class="params">(String _key)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">this</span>.key = _key;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Float <span class="title">interpreter</span><span class="params">(HashMap&lt;String, Float&gt; var)</span> </span>&#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line"><span class="keyword">return</span> var.get(<span class="keyword">this</span>.key);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>具体的”加减乘除“运算符：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AddExpresstion</span> <span class="keyword">extends</span> <span class="title">SymbolExpresstion</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">AddExpresstion</span><span class="params">(AbstractExpresstion _left, AbstractExpresstion _right)</span> </span>&#123;</span><br><span class="line"><span class="keyword">super</span>(_left, _right);</span><br><span class="line"><span class="comment">// TODO Auto-generated constructor stub</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Float <span class="title">interpreter</span><span class="params">(HashMap&lt;String, Float&gt; var)</span> </span>&#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line"><span class="keyword">return</span> <span class="keyword">super</span>.left.interpreter(var) + <span class="keyword">super</span>.right.interpreter(var);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SubExpresstion</span> <span class="keyword">extends</span> <span class="title">SymbolExpresstion</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">SubExpresstion</span><span class="params">(AbstractExpresstion _left, AbstractExpresstion _right)</span> </span>&#123;</span><br><span class="line"><span class="keyword">super</span>(_left, _right);</span><br><span class="line"><span class="comment">// TODO Auto-generated constructor stub</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Float <span class="title">interpreter</span><span class="params">(HashMap&lt;String, Float&gt; var)</span> </span>&#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line"><span class="keyword">return</span> <span class="keyword">super</span>.left.interpreter(var) - <span class="keyword">super</span>.right.interpreter(var);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MultiExpresstion</span> <span class="keyword">extends</span> <span class="title">SymbolExpresstion</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">MultiExpresstion</span><span class="params">(AbstractExpresstion _left,</span></span></span><br><span class="line"><span class="function"><span class="params">AbstractExpresstion _right)</span> </span>&#123;</span><br><span class="line"><span class="keyword">super</span>(_left, _right);</span><br><span class="line"><span class="comment">// TODO Auto-generated constructor stub</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Float <span class="title">interpreter</span><span class="params">(HashMap&lt;String, Float&gt; var)</span> </span>&#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line"><span class="keyword">return</span> <span class="keyword">super</span>.left.interpreter(var) * <span class="keyword">super</span>.right.interpreter(var);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DivExpresstion</span> <span class="keyword">extends</span> <span class="title">SymbolExpresstion</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">DivExpresstion</span><span class="params">(AbstractExpresstion _left, AbstractExpresstion _right)</span> </span>&#123;</span><br><span class="line"><span class="keyword">super</span>(_left, _right);</span><br><span class="line"><span class="comment">// TODO Auto-generated constructor stub</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Float <span class="title">interpreter</span><span class="params">(HashMap&lt;String, Float&gt; var)</span> </span>&#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line"><span class="keyword">return</span> <span class="keyword">super</span>.left.interpreter(var) / <span class="keyword">super</span>.right.interpreter(var);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>逆波兰实现,具体就是统一的实现运算的，让计算表达式转换成为逆波兰表达式，然后可以实现按运算符运算顺序规则的运算。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RPN</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> ArrayList&lt;String&gt; expression = <span class="keyword">new</span> ArrayList&lt;String&gt;();<span class="comment">// 存储中序表达式</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> ArrayList&lt;String&gt; right = <span class="keyword">new</span> ArrayList&lt;String&gt;();<span class="comment">// 存储右序表达式</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> AbstractExpresstion result;<span class="comment">// 结果</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 依据输入信息创建对象，将数值与操作符放入ArrayList中</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">RPN</span><span class="params">(String input)</span> </span>&#123;</span><br><span class="line">StringTokenizer st = <span class="keyword">new</span> StringTokenizer(input, <span class="string">"+-*/()"</span>, <span class="keyword">true</span>);</span><br><span class="line"><span class="keyword">while</span> (st.hasMoreElements()) &#123;</span><br><span class="line">expression.add(st.nextToken());</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 将中序表达式转换为右序表达式</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">toRight</span><span class="params">()</span> </span>&#123;</span><br><span class="line">Stacks aStack = <span class="keyword">new</span> Stacks();</span><br><span class="line">String operator;</span><br><span class="line"><span class="keyword">int</span> position = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line"><span class="keyword">if</span> (Calculate.isOperator((String) expression.get(position))) &#123;</span><br><span class="line"><span class="keyword">if</span> (aStack.top == -<span class="number">1</span></span><br><span class="line">|| ((String) expression.get(position)).equals(<span class="string">"("</span>)) &#123;</span><br><span class="line">aStack.push(expression.get(position));</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">if</span> (((String) expression.get(position)).equals(<span class="string">")"</span>)) &#123;</span><br><span class="line"><span class="keyword">if</span> (!((String) aStack.top()).equals(<span class="string">"("</span>)) &#123;</span><br><span class="line">operator = (String) aStack.pop();</span><br><span class="line">right.add(operator);</span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">if</span> (Calculate.priority((String) expression</span><br><span class="line">.get(position)) &lt;= Calculate</span><br><span class="line">.priority((String) aStack.top())</span><br><span class="line">&amp;&amp; aStack.top != -<span class="number">1</span>) &#123;</span><br><span class="line">operator = (String) aStack.pop();</span><br><span class="line"><span class="keyword">if</span> (!operator.equals(<span class="string">"("</span>))</span><br><span class="line">right.add(operator);</span><br><span class="line">&#125;</span><br><span class="line">aStack.push(expression.get(position));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="keyword">else</span></span><br><span class="line">right.add(expression.get(position));</span><br><span class="line">position++;</span><br><span class="line"><span class="keyword">if</span> (position &gt;= expression.size())</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span> (aStack.top != -<span class="number">1</span>) &#123;</span><br><span class="line">operator = (String) aStack.pop();</span><br><span class="line">right.add(operator);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 对右序表达式进行求值</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getResult</span><span class="params">(HashMap&lt;String, Float&gt; var)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.toRight();</span><br><span class="line">Stack&lt;AbstractExpresstion&gt; stack = <span class="keyword">new</span> Stack&lt;AbstractExpresstion&gt;();</span><br><span class="line">AbstractExpresstion op1, op2;</span><br><span class="line">String is = <span class="keyword">null</span>;</span><br><span class="line">Iterator it = right.iterator();</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (it.hasNext()) &#123;</span><br><span class="line">is = (String) it.next();</span><br><span class="line"><span class="keyword">if</span> (Calculate.isOperator(is)) &#123;</span><br><span class="line">op2 = stack.pop();</span><br><span class="line">op1 = stack.pop();</span><br><span class="line">stack.push(Calculate.twoResult(is, op1, op2));</span><br><span class="line">&#125; <span class="keyword">else</span></span><br><span class="line">stack.push(<span class="keyword">new</span> VarExpresstion(is));</span><br><span class="line">&#125;</span><br><span class="line">result = stack.pop();</span><br><span class="line">it = expression.iterator();</span><br><span class="line"><span class="keyword">while</span> (it.hasNext()) &#123;</span><br><span class="line">System.out.print((String) it.next());</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(<span class="string">"="</span> + result.interpreter(var));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Calculate</span> </span>&#123;</span><br><span class="line"><span class="comment">// 判断是否为操作符号</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">isOperator</span><span class="params">(String operator)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (operator.equals(<span class="string">"+"</span>) || operator.equals(<span class="string">"-"</span>)</span><br><span class="line">|| operator.equals(<span class="string">"*"</span>) || operator.equals(<span class="string">"/"</span>)</span><br><span class="line">|| operator.equals(<span class="string">"("</span>) || operator.equals(<span class="string">")"</span>))</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 设置操作符号的优先级别</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">priority</span><span class="params">(String operator)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (operator.equals(<span class="string">"+"</span>) || operator.equals(<span class="string">"-"</span>)</span><br><span class="line">|| operator.equals(<span class="string">"("</span>))</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (operator.equals(<span class="string">"*"</span>) || operator.equals(<span class="string">"/"</span>))</span><br><span class="line"><span class="keyword">return</span> <span class="number">2</span>;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 做2值之间的计算</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> AbstractExpresstion <span class="title">twoResult</span><span class="params">(String op,</span></span></span><br><span class="line"><span class="function"><span class="params">AbstractExpresstion a, AbstractExpresstion b)</span> </span>&#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"></span><br><span class="line">AbstractExpresstion result = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">if</span> (op.equals(<span class="string">"+"</span>))</span><br><span class="line">result = <span class="keyword">new</span> AddExpresstion(a, b);</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (op.equals(<span class="string">"-"</span>))</span><br><span class="line">result = <span class="keyword">new</span> SubExpresstion(a, b);</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (op.equals(<span class="string">"*"</span>))</span><br><span class="line">result = <span class="keyword">new</span> MultiExpresstion(a, b);</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (op.equals(<span class="string">"/"</span>))</span><br><span class="line">result = <span class="keyword">new</span> DivExpresstion(a, b);</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">;</span><br><span class="line"><span class="keyword">return</span> result;</span><br><span class="line">&#125; <span class="keyword">catch</span> (NumberFormatException e) &#123;</span><br><span class="line">System.out.println(<span class="string">"input has something wrong!"</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 栈类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Stacks</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> LinkedList list = <span class="keyword">new</span> LinkedList();</span><br><span class="line"><span class="keyword">int</span> top = -<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">push</span><span class="params">(Object value)</span> </span>&#123;</span><br><span class="line">top++;</span><br><span class="line">list.addFirst(value);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">pop</span><span class="params">()</span> </span>&#123;</span><br><span class="line">Object temp = list.getFirst();</span><br><span class="line">top--;</span><br><span class="line">list.removeFirst();</span><br><span class="line"><span class="keyword">return</span> temp;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">top</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> list.getFirst();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>底部的计算器：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Calculator</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Calculator</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">float</span>[][] dataSource = <span class="keyword">new</span> <span class="keyword">float</span>[<span class="number">3</span>][<span class="number">6</span>];</span><br><span class="line">System.out.println(<span class="string">"data source:"</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">6</span>; j++) &#123;</span><br><span class="line">dataSource[i][j] = (<span class="keyword">float</span>) (Math.random() * <span class="number">100</span>);</span><br><span class="line">System.out.print(dataSource[i][j] + <span class="string">","</span>);</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(<span class="string">";"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">System.out.println(<span class="string">"Input a expression:"</span>);</span><br><span class="line">BufferedReader is = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(</span><br><span class="line">System.in));</span><br><span class="line"><span class="keyword">for</span> (;;) &#123;</span><br><span class="line">String input = <span class="keyword">new</span> String();</span><br><span class="line">input = is.readLine().trim();</span><br><span class="line"><span class="keyword">if</span> (input.equals(<span class="string">"q"</span>))</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">RPN boya = <span class="keyword">new</span> RPN(input);</span><br><span class="line">HashMap&lt;String, Float&gt; var;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++) &#123;</span><br><span class="line">var = <span class="keyword">new</span> HashMap&lt;String, Float&gt;();</span><br><span class="line">var.put(<span class="string">"a"</span>, dataSource[i][<span class="number">0</span>]);</span><br><span class="line">var.put(<span class="string">"b"</span>, dataSource[i][<span class="number">1</span>]);</span><br><span class="line">var.put(<span class="string">"c"</span>, dataSource[i][<span class="number">2</span>]);</span><br><span class="line">var.put(<span class="string">"d"</span>, dataSource[i][<span class="number">3</span>]);</span><br><span class="line">var.put(<span class="string">"e"</span>, dataSource[i][<span class="number">4</span>]);</span><br><span class="line">var.put(<span class="string">"f"</span>, dataSource[i][<span class="number">5</span>]);</span><br><span class="line"></span><br><span class="line">boya.getResult(var);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">System.out</span><br><span class="line">.println(<span class="string">"Input another expression or input 'q' to quit:"</span>);</span><br><span class="line">&#125;</span><br><span class="line">is.close();</span><br><span class="line">&#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">System.out.println(<span class="string">"Wrong input!!!"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> Calculator();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>看一下输出吧，就是实现了表达式的运算：</p><p><img src="/2018/10/18/InterpreterPattern/1539599418(1" alt="1539599418()">.png)</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;设计模式之解释器模式&quot;&gt;&lt;a href=&quot;#设计模式之解释器模式&quot; class=&quot;headerlink&quot; title=&quot;设计模式之解释器模式&quot;&gt;&lt;/a&gt;设计模式之解释器模式&lt;/h1&gt;&lt;h2 id=&quot;1-什么是解释器模式&quot;&gt;&lt;a href=&quot;#1-什么是解释器模式&quot; class=&quot;headerlink&quot; title=&quot;1. 什么是解释器模式&quot;&gt;&lt;/a&gt;1. 什么是解释器模式&lt;/h2&gt;&lt;p&gt;   Interpreter模式也叫解释器模式，是行为模式之一，它是一种特殊的设计模式，它建立一个解释器，对于特定的计算机程序设计语言，用来解释预先定义的文法。简单地说，Interpreter模式是一种简单的语法解释器构架。&lt;/p&gt;
    
    </summary>
    
      <category term="设计模式" scheme="https://songwell1024.github.io/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="设计模式" scheme="https://songwell1024.github.io/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
      <category term="解释器模式" scheme="https://songwell1024.github.io/tags/%E8%A7%A3%E9%87%8A%E5%99%A8%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>设计模式之中介者模式</title>
    <link href="https://songwell1024.github.io/2018/10/18/MediatorPattern/"/>
    <id>https://songwell1024.github.io/2018/10/18/MediatorPattern/</id>
    <published>2018-10-18T06:17:59.000Z</published>
    <updated>2018-10-18T06:29:21.741Z</updated>
    
    <content type="html"><![CDATA[<h1 id="设计模式之中介者模式"><a href="#设计模式之中介者模式" class="headerlink" title="设计模式之中介者模式"></a>设计模式之中介者模式</h1><h2 id="1-什么是中介者模式"><a href="#1-什么是中介者模式" class="headerlink" title="1.  什么是中介者模式"></a>1.  什么是中介者模式</h2><p>Mediator模式也叫中介者模式，是由GoF提出的23种软件设计模式的一种。Mediator模式是行为模式之一，在Mediator模式中，类之间的交互行为被统一放在Mediator的对象中，对象通过Mediator对象同其他对象交互，Mediator对象起着控制器的作用。</p><a id="more"></a><p>中介者模式就是用一个中介对象来封装一系列的对象交互。中介者使各对象不需要显式地相互引用，从而使其耦合松散，而且可以独立地改变它们之间的交互。</p><p><strong>中介者模式的结构：</strong></p><p><img src="/2018/10/18/MediatorPattern/1.jpg" alt="1"></p><ul><li>mediator中介者类的抽象父类。</li><li>concreteMediator具体的中介者类。</li><li>colleague关联类的抽象父类。</li><li>concreteColleague具体的关联类。</li></ul><p><strong>优缺点</strong>：</p><p>优点：</p><ul><li>通过将对象彼此解耦，可以增加对象的复用性</li><li>通过将控制逻辑集中，可以简化系统维护</li><li>可以让对象之间所传递的消息变得简单而且大幅减少</li><li>提高系统的灵活性，使得系统易于扩展和维护</li></ul><p>缺点：</p><ul><li>中介者承担了较多的责任，一旦中介者出现了问题，整个系统就会受到影响</li><li>如果设计不当，中介者对象本身变得过于复杂</li></ul><p><strong>适用场合：</strong></p><ul><li>一组对象之间的通信方式比较复杂，导致相互依赖，结构混乱</li><li>一个对象引用很多其他对象并直接与这些对象通信，导致难以复用该对象</li></ul><h2 id="2-具体实例"><a href="#2-具体实例" class="headerlink" title="2.  具体实例"></a>2.  具体实例</h2><p>智慧房屋公司的产品：闹钟、咖啡机、电视机、窗帘等，相互之间需要通信，比如闹钟到什么时候需要通知电视机干什么，通知窗帘干什么，咖啡机要通知窗帘干什么。</p><p>这样对象之间需要相互的通信，会形成复杂的网络结构，并且以后想要添加新的设备对象时需要与他进行交互的对象全部需要修改，也就是说这些通信的对象之间的耦合度很高。不利于维护和扩展。</p><p>所以这里引入中介者模式来设计这个项目，类图如下：</p><p><img src="/2018/10/18/MediatorPattern/1539605768.png" alt="1539605768"></p><p>对象之间的通信通过中介者来进行处理，而且每个对象只需要知道中介者就可以了，不需要了解他要通知的对象，这件事请交给中介者去干。这样设计的好处就是对象之间的耦合度降低了，并且添加新的对象的时候只需要与中介者进行交互，不需要改动每一个对象。</p><p>具体的代码实现：</p><p>中介者接口：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Mediator</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">Register</span><span class="params">(String colleagueName, Colleague colleague)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">GetMessage</span><span class="params">(<span class="keyword">int</span> stateChange, String colleagueName)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">SendMessage</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>具体的中介者实现，也就是在中介者中统筹管理设备之间的通信：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConcreteMediator</span> <span class="keyword">implements</span> <span class="title">Mediator</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> HashMap&lt;String, Colleague&gt; colleagueMap;</span><br><span class="line"><span class="keyword">private</span> HashMap&lt;String, String&gt; interMap;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">ConcreteMediator</span><span class="params">()</span> </span>&#123;</span><br><span class="line">colleagueMap = <span class="keyword">new</span> HashMap&lt;String, Colleague&gt;();</span><br><span class="line">interMap = <span class="keyword">new</span> HashMap&lt;String, String&gt;();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Register</span><span class="params">(String colleagueName, Colleague colleague)</span> </span>&#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">colleagueMap.put(colleagueName, colleague);</span><br><span class="line"></span><br><span class="line"><span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (colleague <span class="keyword">instanceof</span> Alarm) &#123;</span><br><span class="line">interMap.put(<span class="string">"Alarm"</span>, colleagueName);</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (colleague <span class="keyword">instanceof</span> CoffeeMachine) &#123;</span><br><span class="line">interMap.put(<span class="string">"CoffeeMachine"</span>, colleagueName);</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (colleague <span class="keyword">instanceof</span> TV) &#123;</span><br><span class="line">interMap.put(<span class="string">"TV"</span>, colleagueName);</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (colleague <span class="keyword">instanceof</span> Curtains) &#123;</span><br><span class="line">interMap.put(<span class="string">"Curtains"</span>, colleagueName);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">GetMessage</span><span class="params">(<span class="keyword">int</span> stateChange, String colleagueName)</span> </span>&#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (colleagueMap.get(colleagueName) <span class="keyword">instanceof</span> Alarm) &#123;</span><br><span class="line"><span class="keyword">if</span> (stateChange == <span class="number">0</span>) &#123;</span><br><span class="line">((CoffeeMachine) (colleagueMap.get(interMap</span><br><span class="line">.get(<span class="string">"CoffeeMachine"</span>)))).StartCoffee();</span><br><span class="line">((TV) (colleagueMap.get(interMap.get(<span class="string">"TV"</span>)))).StartTv();</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (stateChange == <span class="number">1</span>) &#123;</span><br><span class="line">((TV) (colleagueMap.get(interMap.get(<span class="string">"TV"</span>)))).StopTv();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (colleagueMap.get(colleagueName) <span class="keyword">instanceof</span> CoffeeMachine) &#123;</span><br><span class="line">((Curtains) (colleagueMap.get(interMap.get(<span class="string">"Curtains"</span>))))</span><br><span class="line">.UpCurtains();</span><br><span class="line"></span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (colleagueMap.get(colleagueName) <span class="keyword">instanceof</span> TV) &#123;</span><br><span class="line"></span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (colleagueMap.get(colleagueName) <span class="keyword">instanceof</span> Curtains) &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">SendMessage</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>具体的设备的抽象类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Colleague</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> Mediator mediator;</span><br><span class="line"><span class="keyword">public</span> String name;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Colleague</span><span class="params">(Mediator mediator, String name)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">this</span>.mediator = mediator;</span><br><span class="line"><span class="keyword">this</span>.name = name;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> Mediator <span class="title">GetMediator</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">this</span>.mediator;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">SendMessage</span><span class="params">(<span class="keyword">int</span> stateChange)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>设备实现类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Alarm</span> <span class="keyword">extends</span> <span class="title">Colleague</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Alarm</span><span class="params">(Mediator mediator, String name)</span> </span>&#123;</span><br><span class="line"><span class="keyword">super</span>(mediator, name);</span><br><span class="line"><span class="comment">// TODO Auto-generated constructor stub</span></span><br><span class="line">mediator.Register(name, <span class="keyword">this</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">SendAlarm</span><span class="params">(<span class="keyword">int</span> stateChange)</span> </span>&#123;</span><br><span class="line">SendMessage(stateChange);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">SendMessage</span><span class="params">(<span class="keyword">int</span> stateChange)</span> </span>&#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line"><span class="keyword">this</span>.GetMediator().GetMessage(stateChange, <span class="keyword">this</span>.name);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CoffeeMachine</span> <span class="keyword">extends</span> <span class="title">Colleague</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">CoffeeMachine</span><span class="params">(Mediator mediator, String name)</span> </span>&#123;</span><br><span class="line"><span class="keyword">super</span>(mediator, name);</span><br><span class="line"><span class="comment">// TODO Auto-generated constructor stub</span></span><br><span class="line">mediator.Register(name, <span class="keyword">this</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">SendMessage</span><span class="params">(<span class="keyword">int</span> stateChange)</span> </span>&#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line"><span class="keyword">this</span>.GetMediator().GetMessage(stateChange, <span class="keyword">this</span>.name);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">StartCoffee</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"It's time to startcoffee!"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">FinishCoffee</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">"After 5 minutes!"</span>);</span><br><span class="line">System.out.println(<span class="string">"Coffee is ok!"</span>);</span><br><span class="line">SendMessage(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TV</span> <span class="keyword">extends</span> <span class="title">Colleague</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">TV</span><span class="params">(Mediator mediator, String name)</span> </span>&#123;</span><br><span class="line"><span class="keyword">super</span>(mediator, name);</span><br><span class="line"><span class="comment">// TODO Auto-generated constructor stub</span></span><br><span class="line">mediator.Register(name, <span class="keyword">this</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">SendMessage</span><span class="params">(<span class="keyword">int</span> stateChange)</span> </span>&#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line"><span class="keyword">this</span>.GetMediator().GetMessage(stateChange, <span class="keyword">this</span>.name);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">StartTv</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">System.out.println(<span class="string">"It's time to StartTv!"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">StopTv</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">System.out.println(<span class="string">"StopTv!"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Curtains</span> <span class="keyword">extends</span> <span class="title">Colleague</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Curtains</span><span class="params">(Mediator mediator, String name)</span> </span>&#123;</span><br><span class="line"><span class="keyword">super</span>(mediator, name);</span><br><span class="line"><span class="comment">// TODO Auto-generated constructor stub</span></span><br><span class="line">mediator.Register(name, <span class="keyword">this</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">SendMessage</span><span class="params">(<span class="keyword">int</span> stateChange)</span> </span>&#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line"><span class="keyword">this</span>.GetMediator().GetMessage(stateChange, <span class="keyword">this</span>.name);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">UpCurtains</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"I am holding Up Curtains!"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">Mediator mediator = <span class="keyword">new</span> ConcreteMediator();</span><br><span class="line">Alarm mAlarm = <span class="keyword">new</span> Alarm(mediator, <span class="string">"mAlarm"</span>);</span><br><span class="line">CoffeeMachine mCoffeeMachine = <span class="keyword">new</span> CoffeeMachine(mediator,</span><br><span class="line"><span class="string">"mCoffeeMachine"</span>);</span><br><span class="line">Curtains mCurtains = <span class="keyword">new</span> Curtains(mediator, <span class="string">"mCurtains"</span>);</span><br><span class="line">TV mTV = <span class="keyword">new</span> TV(mediator, <span class="string">"mTV"</span>);</span><br><span class="line">mAlarm.SendAlarm(<span class="number">0</span>);</span><br><span class="line">mCoffeeMachine.FinishCoffee();</span><br><span class="line">mAlarm.SendAlarm(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;设计模式之中介者模式&quot;&gt;&lt;a href=&quot;#设计模式之中介者模式&quot; class=&quot;headerlink&quot; title=&quot;设计模式之中介者模式&quot;&gt;&lt;/a&gt;设计模式之中介者模式&lt;/h1&gt;&lt;h2 id=&quot;1-什么是中介者模式&quot;&gt;&lt;a href=&quot;#1-什么是中介者模式&quot; class=&quot;headerlink&quot; title=&quot;1.  什么是中介者模式&quot;&gt;&lt;/a&gt;1.  什么是中介者模式&lt;/h2&gt;&lt;p&gt;Mediator模式也叫中介者模式，是由GoF提出的23种软件设计模式的一种。Mediator模式是行为模式之一，在Mediator模式中，类之间的交互行为被统一放在Mediator的对象中，对象通过Mediator对象同其他对象交互，Mediator对象起着控制器的作用。&lt;/p&gt;
    
    </summary>
    
      <category term="设计模式" scheme="https://songwell1024.github.io/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="设计模式" scheme="https://songwell1024.github.io/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
      <category term="中介者模式" scheme="https://songwell1024.github.io/tags/%E4%B8%AD%E4%BB%8B%E8%80%85%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>设计模式之享元模式（蝇量模式）</title>
    <link href="https://songwell1024.github.io/2018/10/18/FlyweightPattern/"/>
    <id>https://songwell1024.github.io/2018/10/18/FlyweightPattern/</id>
    <published>2018-10-18T06:17:59.000Z</published>
    <updated>2018-10-18T06:20:37.656Z</updated>
    
    <content type="html"><![CDATA[<h1 id="设计模式之享元模式（蝇量模式）"><a href="#设计模式之享元模式（蝇量模式）" class="headerlink" title="设计模式之享元模式（蝇量模式）"></a>设计模式之享元模式（蝇量模式）</h1><h2 id="1-什么是享元模式"><a href="#1-什么是享元模式" class="headerlink" title="1. 什么是享元模式"></a>1. 什么是享元模式</h2><p>Flyweight模式也叫享元模式，是构造型模式之一，它通过与其他类似对象共享数据来减小内存占用。</p><p>换句话说就是通过共享的方式高效地支持大量细粒度的对象。</p><a id="more"></a><p><strong>享元模式的结构：</strong></p><p><img src="/2018/10/18/FlyweightPattern/1.png" alt="1"></p><p><strong>享元模式的角色和职责</strong>：</p><ul><li>抽象享元角色：所有具体享元类的父类，规定一些需要实现的公共接口。</li><li>具体享元角色：抽象享元角色的具体实现类，并实现了抽象享元角色规定的方法。</li><li>享元工厂角色：负责创建和管理享元角色。</li></ul><p><strong>优缺点：</strong></p><p>优点：</p><ul><li>减少运行时的对象实例个数，节省创建开销和内存</li><li>将许多“虚拟”对象的状态集中管理</li></ul><p>缺点：</p><ul><li>系统设计更加复杂</li><li>需要专门维护对象的外部状态</li></ul><p><strong>适用场合</strong>：</p><ul><li>需要大量细粒度对象</li><li>这些对象的外部状态不多</li><li>按照内部状态分成几个组，每一个组都仅用一个蝇量对象代替</li></ul><h2 id="2-具体实例"><a href="#2-具体实例" class="headerlink" title="2.  具体实例"></a>2.  具体实例</h2><p>我们有一个景观设计软件项目：</p><p>需要布置很多的树：XY坐标，树的大小，外观</p><p>假如需要10000000棵树，我们该怎么设计呢？</p><p>首先的想法就是抽象一个树的类，然后使用的时候初始化10000000个树的实例。</p><p>按照这种方式具体的实现一下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Tree</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> xCoord, yCoord, age;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Tree</span><span class="params">(<span class="keyword">int</span> xCoord, <span class="keyword">int</span> yCoord, <span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.xCoord = xCoord;</span><br><span class="line"><span class="keyword">this</span>.yCoord = yCoord;</span><br><span class="line"><span class="keyword">this</span>.age = age;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">display</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">// System.out.print("x");</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TreesTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> length = <span class="number">10000000</span>;</span><br><span class="line"><span class="keyword">private</span> Tree[] treelst = <span class="keyword">new</span> Tree[length];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">TreesTest</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; length; i++) &#123;</span><br><span class="line">treelst[i] = <span class="keyword">new</span> Tree((<span class="keyword">int</span>) (Math.random() * length),</span><br><span class="line">(<span class="keyword">int</span>) (Math.random() * length),</span><br><span class="line">(<span class="keyword">int</span>) (Math.random() * length) % <span class="number">5</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">display</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>, len = treelst.length; i &lt; len; i++) &#123;</span><br><span class="line">treelst[i].display();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">showMemInfo();</span><br><span class="line">TreesTest mTreesTest;</span><br><span class="line">mTreesTest = <span class="keyword">new</span> TreesTest();</span><br><span class="line"></span><br><span class="line">showMemInfo();</span><br><span class="line">mTreesTest.display();</span><br><span class="line">showMemInfo();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">showMemInfo</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">// 最大内存：</span></span><br><span class="line"><span class="keyword">long</span> max = Runtime.getRuntime().maxMemory();</span><br><span class="line"><span class="comment">// 分配内存：</span></span><br><span class="line"><span class="keyword">long</span> total = Runtime.getRuntime().totalMemory();</span><br><span class="line"><span class="comment">// 已分配内存中的剩余空间 ：</span></span><br><span class="line"><span class="keyword">long</span> free = Runtime.getRuntime().freeMemory();</span><br><span class="line"><span class="comment">// 已占用的内存：</span></span><br><span class="line"><span class="keyword">long</span> used = total - free;</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">"最大内存 = "</span> + max);</span><br><span class="line">System.out.println(<span class="string">"已分配内存 = "</span> + total);</span><br><span class="line">System.out.println(<span class="string">"已分配内存中的剩余空间 = "</span> + free);</span><br><span class="line">System.out.println(<span class="string">"已用内存 = "</span> + used);</span><br><span class="line">System.out.println(<span class="string">"时间 = "</span> + System.currentTimeMillis());</span><br><span class="line">System.out.println(<span class="string">""</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>看一下运行的结果吧</p><blockquote><p>最大内存 = 926941184<br>    已分配内存 = 64487424<br>    已分配内存中的剩余空间 = 62465304<br>    已用内存 = 2022120<br>    时间 = 1539587641214</p><p>最大内存 = 926941184<br>    已分配内存 = 361234432<br>    已分配内存中的剩余空间 = 79750928<br>    已用内存 = 281483504<br>    时间 = 1539587644567</p><p>最大内存 = 926941184<br>    已分配内存 = 361234432<br>    已分配内存中的剩余空间 = 79750928<br>    已用内存 = 281483504<br>    时间 = 1539587644583</p></blockquote><p>我们这时候发现我们需要多少的树就要new出多少个树的对象，占用内存。</p><p>看一下树这个类，他的有些状态是共享的，如display这个方法，每一个树的显示都是一样的，然后像具体的坐标和年龄这个信息都相当于外部的状态，每一个都是不同的，我们可以设计一个新的类来管理这些信息，然后在实例化树的对象的时候就只需要实例化一个，然后每个树得信息从管理类中获取。那个管理的类中其实就是虚拟化了很多的树的类。这其实就是享元模式的设计思想，把相似的对象的数据进行共享。</p><p>看下具体的实现：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TreeFlyWeight</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">TreeFlyWeight</span><span class="params">()</span> </span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">display</span><span class="params">(<span class="keyword">int</span> xCoord, <span class="keyword">int</span> yCoord, <span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line"><span class="comment">// System.out.print("x");</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TreeManager</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> length = <span class="number">10000000</span>;</span><br><span class="line"><span class="keyword">int</span>[] xArray = <span class="keyword">new</span> <span class="keyword">int</span>[length], yArray = <span class="keyword">new</span> <span class="keyword">int</span>[length],</span><br><span class="line">AgeArray = <span class="keyword">new</span> <span class="keyword">int</span>[length];</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> TreeFlyWeight mTreeFlyWeight;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">TreeManager</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">mTreeFlyWeight = <span class="keyword">new</span> TreeFlyWeight();</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; length; i++) &#123;</span><br><span class="line"></span><br><span class="line">xArray[i] = (<span class="keyword">int</span>) (Math.random() * length);</span><br><span class="line">yArray[i] = (<span class="keyword">int</span>) (Math.random() * length);</span><br><span class="line">AgeArray[i] = (<span class="keyword">int</span>) (Math.random() * length) % <span class="number">5</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">displayTrees</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; length; i++) &#123;</span><br><span class="line">mTreeFlyWeight.display(xArray[i], yArray[i], AgeArray[i]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">showMemInfo();</span><br><span class="line"></span><br><span class="line">TreeManager mTreeManager;</span><br><span class="line">mTreeManager = <span class="keyword">new</span> TreeManager();</span><br><span class="line"></span><br><span class="line">showMemInfo();</span><br><span class="line">mTreeManager.displayTrees();</span><br><span class="line">showMemInfo();</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">showMemInfo</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">// 已分配内存中的剩余空间 ：</span></span><br><span class="line"><span class="keyword">long</span> free = Runtime.getRuntime().freeMemory();</span><br><span class="line"><span class="comment">// 分配内存：</span></span><br><span class="line"><span class="keyword">long</span> total = Runtime.getRuntime().totalMemory();</span><br><span class="line"><span class="comment">// 最大内存：</span></span><br><span class="line"><span class="keyword">long</span> max = Runtime.getRuntime().maxMemory();</span><br><span class="line"><span class="comment">// 已占用的内存：</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">long</span> used = total - free;</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">"最大内存 = "</span> + max);</span><br><span class="line">System.out.println(<span class="string">"已分配内存 = "</span> + total);</span><br><span class="line">System.out.println(<span class="string">"已分配内存中的剩余空间 = "</span> + free);</span><br><span class="line">System.out.println(<span class="string">"已用内存 = "</span> + used);</span><br><span class="line">System.out.println(<span class="string">"时间 = "</span> + System.currentTimeMillis());</span><br><span class="line">System.out.println(<span class="string">""</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>看一下运行结果：</p><blockquote><p>最大内存 = 926941184<br>    已分配内存 = 64487424<br>    已分配内存中的剩余空间 = 62465304<br>    已用内存 = 2022120<br>    时间 = 1539588509988</p><p>最大内存 = 926941184<br>    已分配内存 = 145227776<br>    已分配内存中的剩余空间 = 22870040<br>    已用内存 = 122357736<br>    时间 = 1539588510873</p><p>最大内存 = 926941184<br>    已分配内存 = 145227776<br>    已分配内存中的剩余空间 = 22870040<br>    已用内存 = 122357736<br>    时间 = 1539588510881</p></blockquote><p>通过比较发现内存被占用变小了，运行时间变小了。</p><p>其实享元模式就是通过共享细粒度对象的数据减少对象的数据的初始化或者是减少实例对象的创建。</p><p>再看一个更加复杂一点的例子。就是上面的景观项目，我不只要栽树，还要栽花。</p><p>这时候使用享元模式的设计的类图如下所示：</p><p><img src="/2018/10/18/FlyweightPattern/1539588703.png" alt="1539588703"></p><p>我们把草和树都抽象成为了一个plant的类，然后使用PlantManager来统一管理外部状态数据。但是有人说当我需要放置雕像的时候怎么办呢？那就直接把雕像单独作为一个类，然后抽象一个manager来做统一的管理。以后每添加一个对象要是可以抽象成为一组的就抽象，不能抽象成为一组的就直接单独成为一类。</p><p>看一下具体的代码实现：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Tree</span> <span class="keyword">extends</span> <span class="title">Plant</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">display</span><span class="params">(<span class="keyword">int</span> xCoord, <span class="keyword">int</span> yCoord, <span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line"><span class="comment">// System.out.print("Tree x");</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Grass</span> <span class="keyword">extends</span> <span class="title">Plant</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">display</span><span class="params">(<span class="keyword">int</span> xCoord, <span class="keyword">int</span> yCoord, <span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line"><span class="comment">// System.out.print("Grass x");</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Plant</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Plant</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">display</span><span class="params">(<span class="keyword">int</span> xCoord, <span class="keyword">int</span> yCoord, <span class="keyword">int</span> age)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PlantManager</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> length = <span class="number">10000000</span>;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span>[] xArray = <span class="keyword">new</span> <span class="keyword">int</span>[length], yArray = <span class="keyword">new</span> <span class="keyword">int</span>[length],</span><br><span class="line">AgeArray = <span class="keyword">new</span> <span class="keyword">int</span>[length],typeArray = <span class="keyword">new</span> <span class="keyword">int</span>[length];</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> PlantFactory mPlantFactory;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">PlantManager</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">mPlantFactory=<span class="keyword">new</span> PlantFactory();</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; length; i++) &#123;</span><br><span class="line"></span><br><span class="line">xArray[i] = (<span class="keyword">int</span>) (Math.random() * length);</span><br><span class="line">yArray[i] = (<span class="keyword">int</span>) (Math.random() * length);</span><br><span class="line">AgeArray[i] = (<span class="keyword">int</span>) (Math.random() * length) % <span class="number">5</span>;</span><br><span class="line">typeArray[i]= (<span class="keyword">int</span>) (Math.random() * length) % <span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">displayTrees</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; length; i++) &#123;</span><br><span class="line">mPlantFactory.getPlant(typeArray[i]).display(xArray[i], yArray[i], AgeArray[i]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PlantFactory</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> HashMap&lt;Integer, Plant&gt; plantMap = <span class="keyword">new</span> HashMap&lt;Integer, Plant&gt;();</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">PlantFactory</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> Plant <span class="title">getPlant</span><span class="params">(<span class="keyword">int</span> type)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (!plantMap.containsKey(type)) &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">switch</span> (type) &#123;</span><br><span class="line"><span class="keyword">case</span> <span class="number">0</span>:</span><br><span class="line">plantMap.put(<span class="number">0</span>, <span class="keyword">new</span> Tree());</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">plantMap.put(<span class="number">1</span>, <span class="keyword">new</span> Grass());</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> plantMap.get(type);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>PlantFactory是用来管理和获取具体的plant类型的。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">showMemInfo();</span><br><span class="line"></span><br><span class="line">PlantManager mPlantManager;</span><br><span class="line">mPlantManager = <span class="keyword">new</span> PlantManager();</span><br><span class="line"></span><br><span class="line">showMemInfo();</span><br><span class="line">mPlantManager.displayTrees();</span><br><span class="line">showMemInfo();</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">showMemInfo</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">// 已分配内存中的剩余空间 ：</span></span><br><span class="line"><span class="keyword">long</span> free = Runtime.getRuntime().freeMemory();</span><br><span class="line"><span class="comment">// 分配内存：</span></span><br><span class="line"><span class="keyword">long</span> total = Runtime.getRuntime().totalMemory();</span><br><span class="line"><span class="comment">// 最大内存：</span></span><br><span class="line"><span class="keyword">long</span> max = Runtime.getRuntime().maxMemory();</span><br><span class="line"><span class="comment">// 已占用的内存：</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">long</span> used = total - free;</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">"最大内存 = "</span> + max);</span><br><span class="line">System.out.println(<span class="string">"已分配内存 = "</span> + total);</span><br><span class="line">System.out.println(<span class="string">"已分配内存中的剩余空间 = "</span> + free);</span><br><span class="line">System.out.println(<span class="string">"已用内存 = "</span> + used);</span><br><span class="line">System.out.println(<span class="string">"时间 = "</span> + System.currentTimeMillis());</span><br><span class="line">System.out.println(<span class="string">""</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>看一下测试类的结果：</p><blockquote><p>最大内存 = 926941184<br>    已分配内存 = 64487424<br>    已分配内存中的剩余空间 = 62465304<br>    已用内存 = 2022120<br>    时间 = 1539589480028</p><p>最大内存 = 926941184<br>    已分配内存 = 185597952<br>    已分配内存中的剩余空间 = 23240200<br>    已用内存 = 162357752<br>    时间 = 1539589481484</p><p>最大内存 = 926941184<br>    已分配内存 = 185597952<br>    已分配内存中的剩余空间 = 23240200<br>    已用内存 = 162357752<br>    时间 = 1539589481658</p></blockquote><p>通过结果我们可以看出尽管添加了一个新的类，但是内存占用和运行时间还是比初始的时候要小。</p><p>所以可以看出享元模式的好处。</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;设计模式之享元模式（蝇量模式）&quot;&gt;&lt;a href=&quot;#设计模式之享元模式（蝇量模式）&quot; class=&quot;headerlink&quot; title=&quot;设计模式之享元模式（蝇量模式）&quot;&gt;&lt;/a&gt;设计模式之享元模式（蝇量模式）&lt;/h1&gt;&lt;h2 id=&quot;1-什么是享元模式&quot;&gt;&lt;a href=&quot;#1-什么是享元模式&quot; class=&quot;headerlink&quot; title=&quot;1. 什么是享元模式&quot;&gt;&lt;/a&gt;1. 什么是享元模式&lt;/h2&gt;&lt;p&gt;Flyweight模式也叫享元模式，是构造型模式之一，它通过与其他类似对象共享数据来减小内存占用。&lt;/p&gt;
&lt;p&gt;换句话说就是通过共享的方式高效地支持大量细粒度的对象。&lt;/p&gt;
    
    </summary>
    
      <category term="设计模式" scheme="https://songwell1024.github.io/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="设计模式" scheme="https://songwell1024.github.io/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
      <category term="享元模式" scheme="https://songwell1024.github.io/tags/%E4%BA%AB%E5%85%83%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>设计模式之外观模式</title>
    <link href="https://songwell1024.github.io/2018/10/17/FacadeMode/"/>
    <id>https://songwell1024.github.io/2018/10/17/FacadeMode/</id>
    <published>2018-10-17T01:10:16.000Z</published>
    <updated>2018-10-17T01:11:48.849Z</updated>
    
    <content type="html"><![CDATA[<h1 id="设计模式之外观模式"><a href="#设计模式之外观模式" class="headerlink" title="设计模式之外观模式"></a>设计模式之外观模式</h1><h2 id="1-什么是外观模式"><a href="#1-什么是外观模式" class="headerlink" title="1.  什么是外观模式"></a>1.  什么是外观模式</h2><p>Facade模式也叫外观模式, Facade模式为一组具有类似功能的类群，比如类库，子系统等等，提供一个一致的简单的界面。这个一致的简单的界面被称作facade。其实也就是提供一个统一的接口，来访问子系统中一群功能相关接口。外观模式定义了一个高层接口，让子系统更容易使用。</p><a id="more"></a><p>外观模式的结构： </p><p><img src="/2018/10/17/FacadeMode/1.png" alt="1"></p><ul><li><p>Facade：为调用方定义简单的调用接口。</p></li><li><p>Clients： 调用者。通过Facade接口调用提供某功能的内部类群。 </p></li><li><p>Packages ：功能提供者。指提供功能的类群（模块或子系统）</p></li></ul><h2 id="2-具体实例"><a href="#2-具体实例" class="headerlink" title="2. 具体实例"></a>2. 具体实例</h2><p>我们通过一个家庭电影院的实例来看一下外观模式的具体实现</p><p>我们组建一个家庭影院：需要DVD播放器、投影仪、自动屏幕、环绕立体声、爆米花机，每一个对象都有自己需要实现的具体功能。</p><p>我们首先设想一个传统的设计：直接用遥控器统筹各设备开关：开爆米花机，放下屏幕，开投影仪，开音响，开DVD，选dvd，去拿爆米花，调暗灯光，播放，观影结束后，关闭各种设备。按照这种设计顺序我们就可以实现整个的设计，但是这种设计有什么问题呢？每一种设备需要一个遥控器，然后打开关闭各自需要执行一遍，太复杂了。看一下基于外观模式的设计怎么解决这个问题。</p><p>基于外观模式的设计：</p><p><img src="/2018/10/17/FacadeMode/2.png" alt="2"></p><p>其实他就是把这些设备的相同的功能如ready,play等等统一放在一起，一块儿执行。这样的话一下子就可以把之前需要单个执行的命令一次性就执行完。其实也就是相当于设计了一个更加高层的接口来同意管理低层的接口。其实就是简化了这个系统对外暴露的接口，你可以不用关心底层是怎么操作的，只需要直接使用高层的接口的功能就可以了。</p><p>具体的代码如下：</p><p>Popcorn:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Popcorn</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> Popcorn instance = <span class="keyword">null</span>;</span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="title">Popcorn</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Popcorn <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (instance == <span class="keyword">null</span>) &#123;</span><br><span class="line">instance = <span class="keyword">new</span> Popcorn();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> instance;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">on</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"Popcorn On"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">off</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"Popcorn Off"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">pop</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"Popcorn is popping"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其余的设备类的初始化同理：</p><p>外观模式</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HomeTheaterFacade</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> TheaterLights mTheaterLights;</span><br><span class="line"><span class="keyword">private</span> Popcorn mPopcorn;</span><br><span class="line"><span class="keyword">private</span> Stereo mStereo;</span><br><span class="line"><span class="keyword">private</span> Projector mProjector;</span><br><span class="line"><span class="keyword">private</span> Screen mScreen;</span><br><span class="line"><span class="keyword">private</span> DVDPlayer mDVDPlayer;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">HomeTheaterFacade</span><span class="params">()</span> </span>&#123;</span><br><span class="line">mTheaterLights = TheaterLights.getInstance();</span><br><span class="line">mPopcorn = Popcorn.getInstance();</span><br><span class="line">mStereo = Stereo.getInstance();</span><br><span class="line">mProjector = Projector.getInstance();</span><br><span class="line">mScreen = Screen.getInstance();</span><br><span class="line">mDVDPlayer = DVDPlayer.getInstance();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">ready</span><span class="params">()</span> </span>&#123;</span><br><span class="line">mPopcorn.on();</span><br><span class="line">mPopcorn.pop();</span><br><span class="line">mScreen.down();</span><br><span class="line">mProjector.on();</span><br><span class="line">mStereo.on();</span><br><span class="line">mDVDPlayer.on();</span><br><span class="line">mDVDPlayer.setdvd();</span><br><span class="line">mTheaterLights.dim(<span class="number">10</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">end</span><span class="params">()</span> </span>&#123;</span><br><span class="line">mPopcorn.off();</span><br><span class="line">mTheaterLights.bright();</span><br><span class="line">mScreen.up();</span><br><span class="line">mProjector.off();</span><br><span class="line">mStereo.off();</span><br><span class="line"></span><br><span class="line">mDVDPlayer.setdvd();</span><br><span class="line">mDVDPlayer.off();</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">play</span><span class="params">()</span> </span>&#123;</span><br><span class="line">mDVDPlayer.play();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">pause</span><span class="params">()</span> </span>&#123;</span><br><span class="line">mDVDPlayer.pause();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainTest</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">HomeTheaterFacade mHomeTheaterFacade=<span class="keyword">new</span> HomeTheaterFacade();</span><br><span class="line"></span><br><span class="line">mHomeTheaterFacade.ready();</span><br><span class="line">mHomeTheaterFacade.play();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>从测试类中我们可以看到直接使用了外观模式中的统一接口执行，显得简单了很多。其实外观模式我们在自己设计程序的过程中不知不觉的就用到了，其实就是为了简化系统的类似的接口而统一封装一个。</p><p>上面的系统还可以使用命令模式来设计实现，命令模式就是把命令进行封装，实现命令和执行者之间的解耦。命令模式中的宏命令模式就是把几个命令封装起来统一执行，很像上面的设计方式，但是命令模式和外观模式的侧重点是不一样的，命令模式侧重于解耦，而外观模式侧重于系统的简化。</p><h2 id="3-最少知识原则"><a href="#3-最少知识原则" class="headerlink" title="3. 最少知识原则"></a>3. 最少知识原则</h2><p>最少知识原则是设计模式的6大原则之一，最少知识原则就是要告诉我们要减少对象之间的交互，只留下几个“密友”，也就是只留下必要的对象，其实就是为了在设计中不让太多的类耦合在一起，要不然在修改和维护系统的时候牵一发而动全身。</p><p>怎么样才能只留下需要的对象，不引入过多的对象呢？设计方针就是：</p><p>就任何对象而言，在对象方法内只应该调用属于以下范围内的方法：</p><ul><li>该对象本身</li><li>被当做方法的参数而传进来的对象</li><li>此方法所创建或实例化的任何对象</li><li>对象的任何组件</li></ul><p>有一个值得注意的地方就是：不调用从另一个调用中返回对象的方法，如果说调用了，那么不就是引入新的对象了嘛。越多了调用这种方法，引入的对象越多，越不容易维护。</p><p>举个例子：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Car</span></span>&#123;</span><br><span class="line">Engine engine;  <span class="comment">//类组件</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Car</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//初始化发动机</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">start</span><span class="params">(Key mKey)</span>     <span class="comment">//新的对象但是是传入的参数</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">Doors doors=<span class="keyword">new</span> Doors();  <span class="comment">//此方法所创建或实例化的任何对象</span></span><br><span class="line"><span class="keyword">boolean</span> authorized=mKey.turns();   <span class="comment">//被当做方法的参数而传进来的对象</span></span><br><span class="line"><span class="keyword">if</span>(authorized)</span><br><span class="line">&#123;</span><br><span class="line">engine.start();    <span class="comment">//对象的组件方法</span></span><br><span class="line">doors.lock();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;设计模式之外观模式&quot;&gt;&lt;a href=&quot;#设计模式之外观模式&quot; class=&quot;headerlink&quot; title=&quot;设计模式之外观模式&quot;&gt;&lt;/a&gt;设计模式之外观模式&lt;/h1&gt;&lt;h2 id=&quot;1-什么是外观模式&quot;&gt;&lt;a href=&quot;#1-什么是外观模式&quot; class=&quot;headerlink&quot; title=&quot;1.  什么是外观模式&quot;&gt;&lt;/a&gt;1.  什么是外观模式&lt;/h2&gt;&lt;p&gt;Facade模式也叫外观模式, Facade模式为一组具有类似功能的类群，比如类库，子系统等等，提供一个一致的简单的界面。这个一致的简单的界面被称作facade。其实也就是提供一个统一的接口，来访问子系统中一群功能相关接口。外观模式定义了一个高层接口，让子系统更容易使用。&lt;/p&gt;
    
    </summary>
    
      <category term="设计模式" scheme="https://songwell1024.github.io/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="设计模式" scheme="https://songwell1024.github.io/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
      <category term="外观模式" scheme="https://songwell1024.github.io/tags/%E5%A4%96%E8%A7%82%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>设计模式之复合模式</title>
    <link href="https://songwell1024.github.io/2018/10/17/compoundMode/"/>
    <id>https://songwell1024.github.io/2018/10/17/compoundMode/</id>
    <published>2018-10-17T01:05:44.000Z</published>
    <updated>2018-10-17T01:08:14.291Z</updated>
    
    <content type="html"><![CDATA[<h1 id="设计模式之复合模式"><a href="#设计模式之复合模式" class="headerlink" title="设计模式之复合模式"></a>设计模式之复合模式</h1><h2 id="1-什么是复合模式"><a href="#1-什么是复合模式" class="headerlink" title="1. 什么是复合模式"></a>1. 什么是复合模式</h2><p>在形式上，复合模式确实是多个模式的组合，但满足了这一条并不一定是复合模式，注意它的定义：将多个模式结合起来形成一个“框架”，以解决一般性问题。一提到“框架”，可能最容易联想到的就是MVC吧，不过MVC确实是一个经典的复合模式。</p><a id="more"></a><h2 id="2-具体实例"><a href="#2-具体实例" class="headerlink" title="2. 具体实例"></a>2. 具体实例</h2><p>项目的类图：</p><p><img src="/2018/10/17/compoundMode/1.png" alt="1"></p><p>首先要创建一群呱呱叫的鸭子类，让他们实现接口Quackable：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Quackable</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">quack</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这是一个鸭子类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RedheadDuck</span> <span class="keyword">implements</span> <span class="title">Quackable</span> </span>&#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">quack</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    System.out.println(<span class="string">"Quack"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这时候水里还有鹅，也会叫：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Goose</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">hoke</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Honk"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>想让鹅也实现Quackable接口统一管理，可以用适配器模式：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GooseAdapter</span> <span class="keyword">implements</span> <span class="title">Quackable</span> </span>&#123;</span><br><span class="line">    Goose goose;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">GooseAdapter</span><span class="params">(Goose goose)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.goose = goose;</span><br><span class="line">        observable = <span class="keyword">new</span> Observable(<span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">quack</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        goose.hoke();</span><br><span class="line">        notifyObservers();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这时，想要统计他们叫的次数，就可以使用装饰者模式把它们装饰城=成QuackCounter：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">QuackCounter</span> <span class="keyword">implements</span> <span class="title">Quackable</span> </span>&#123;</span><br><span class="line">    Quackable duck;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span> numberOfQuacks;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">QuackCounter</span><span class="params">(Quackable duck)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.duck = duck;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">quack</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        duck.quack();</span><br><span class="line">        numberOfQuacks++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">getQuacks</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> numberOfQuacks;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>每次创建鸭子都要new很麻烦，就可以用工厂模式，要鸭子就直接跟工厂要：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CountingDuckFactory</span> <span class="keyword">extends</span> <span class="title">AbstrctDuckFactory</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Quackable <span class="title">createMallardDuck</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> QuackCounter(<span class="keyword">new</span> MallardDuck());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Quackable <span class="title">createRedheadDuck</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> QuackCounter(<span class="keyword">new</span> RedheadDuck());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Quackable <span class="title">createDuckCall</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> QuackCounter(<span class="keyword">new</span> DuckCall());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Quackable <span class="title">createRubberDuck</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> QuackCounter(<span class="keyword">new</span> RubberDuck());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>因为鸭子太多了，可以用组合模式统一管理，用迭代器模式查看内部对象：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Flock</span> <span class="keyword">implements</span> <span class="title">Quackable</span> </span>&#123;</span><br><span class="line">    ArrayList quackers = <span class="keyword">new</span> ArrayList();   </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(Quackable quacker)</span></span>&#123;</span><br><span class="line">            quackers.add(quacker);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">quack</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Iterator iterator = quackers.iterator();</span><br><span class="line">        <span class="keyword">while</span> (iterator.hasNext())&#123;</span><br><span class="line">            Quackable quacker = (Quackable) iterator.next();</span><br><span class="line">            quacker.quack();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>现在，生物学家想每次呱呱叫都被通知到，就可以使用观察者模式：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Flock</span> <span class="keyword">implements</span> <span class="title">Quackable</span> </span>&#123;</span><br><span class="line">    ArrayList quackers = <span class="keyword">new</span> ArrayList();</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(Quackable quacker)</span></span>&#123;</span><br><span class="line">        quackers.add(quacker);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">quack</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Iterator iterator = quackers.iterator();</span><br><span class="line">        <span class="keyword">while</span> (iterator.hasNext())&#123;</span><br><span class="line">            Quackable quacker = (Quackable) iterator.next();</span><br><span class="line">            quacker.quack();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">registerObserver</span><span class="params">(Observer observer)</span> </span>&#123;</span><br><span class="line">        Iterator iterator = quackers.iterator();</span><br><span class="line">        <span class="keyword">while</span> (iterator.hasNext()) &#123;</span><br><span class="line">            Quackable duck = (Quackable) iterator.next();</span><br><span class="line">            duck.registerObserver(observer);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">notifyObservers</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DuckSimulator</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        DuckSimulator simulator = <span class="keyword">new</span> DuckSimulator();</span><br><span class="line">        AbstrctDuckFactory duckFactory = <span class="keyword">new</span> CountingDuckFactory();</span><br><span class="line"></span><br><span class="line">        simulator.simulate(duckFactory);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">simulate</span><span class="params">(AbstrctDuckFactory duckFactory)</span></span>&#123;</span><br><span class="line">        Quackable redheadDuck = duckFactory.createRedheadDuck();</span><br><span class="line">        Quackable duckCall = duckFactory.createDuckCall();</span><br><span class="line">        Quackable rubberDuck = duckFactory.createRubberDuck();</span><br><span class="line">        Quackable gooseDuck = <span class="keyword">new</span> QuackCounter(<span class="keyword">new</span> GooseAdapter(<span class="keyword">new</span> Goose()));</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"\nDuck Simulator: With Composite - Flocks"</span>);</span><br><span class="line"></span><br><span class="line">        Flock flock = <span class="keyword">new</span> Flock();</span><br><span class="line"></span><br><span class="line">        flock.add(redheadDuck);</span><br><span class="line">        flock.add(rubberDuck);</span><br><span class="line">        flock.add(duckCall);</span><br><span class="line">        flock.add(gooseDuck);</span><br><span class="line"></span><br><span class="line">        Flock flock1 = <span class="keyword">new</span> Flock();</span><br><span class="line"></span><br><span class="line">        Quackable mallardDuck1 = duckFactory.createMallardDuck();</span><br><span class="line">        Quackable mallardDuck2 = duckFactory.createMallardDuck();</span><br><span class="line">        Quackable mallardDuck3 = duckFactory.createMallardDuck();</span><br><span class="line">        Quackable mallardDuck4 = duckFactory.createMallardDuck();</span><br><span class="line"></span><br><span class="line">        flock1.add(mallardDuck1);</span><br><span class="line">        flock1.add(mallardDuck2);</span><br><span class="line">        flock1.add(mallardDuck3);</span><br><span class="line">        flock1.add(mallardDuck4);</span><br><span class="line"></span><br><span class="line">        flock.add(flock1);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"\nDuck Simulator: Whole Flock Simulation"</span>);</span><br><span class="line">        simulate(flock);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"\nDuck Simulator: Mallard Flock Simulation"</span>);</span><br><span class="line">        simulate(flock1);</span><br><span class="line"></span><br><span class="line">        Quackologist quackologist = <span class="keyword">new</span> Quackologist();</span><br><span class="line">        flock.registerObserver(quackologist);</span><br><span class="line"></span><br><span class="line">        simulate(flock);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"The duck quacked "</span>+QuackCounter.getQuacks()+<span class="string">" times"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">simulate</span><span class="params">(Quackable duck)</span></span>&#123;</span><br><span class="line">        duck.quack();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-MVC与复合模式"><a href="#3-MVC与复合模式" class="headerlink" title="3. MVC与复合模式"></a>3. MVC与复合模式</h2><p><strong>结构</strong>：</p><ul><li>模型：模型持有所有的数据、状态和程序逻辑，模型没有注意到视图和控制器，虽然它提供了操纵和检索状态的接口，并发送状态改变通知给观察者。是程序主体，代表了业务数据和业务逻辑。</li><li>视图：用来呈现模型，视图通常直接从模型中取得它需要显示的状态与数据。是与用户交互的界面，显示数据、接收输入，但不参与实际业务逻辑</li><li>控制器：取得用户的输入并解读其对模型的意思。接收用户输入，并解析反馈给Model。</li></ul><p><img src="/2018/10/17/compoundMode/2.png" alt="2"></p><p>MVC的最大优点就是把表现层View与模型Model分离，实现了设计上的松耦合（应对变化）以及代码的复用（View可以随便换，只需要改改新View里面那一丁点儿控制逻辑就好了）</p><p>前面说过了MVC是一种复合模式，那它到底复合了哪些模式，一起看看：</p><ol><li>策略模式</li></ol><p>视图和控制器实现了策略模式：视图是一个对象，可以被调整使用不同的策略，而控制提供了策略。视图只关心系统中可视的部分，对与任何界面行为，都委托给控制器处理。使用策略模式也可以让视图和模型之间关系解耦，因为控制器负责和模型交互来传递用户的请求。对与工作是怎么完成的，视图豪不知情。</p><ol start="2"><li>观察者模式</li></ol><p>模型实现了观察者模式，当状态改变时，相关对象将持续更新。使用观察者模式，可以让模型完全独立于视图和控制器。同一个模型可以使用不同的视图，甚至可以同时使用多个视图。</p><ol start="3"><li>组合模式</li></ol><p>显示包括了窗口、面板、按钮、文本标签等。每个显示组件如果不是组合节点（例如窗口），就是叶节点（例如按钮）。当控制器告诉视图更新时，只需告诉视图最顶层的组件即可，组合会处理其余的事。</p><p>MVC应用了多个模式，并能够较好的解决设计上的一般性问题，所以被称为复合模式。</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;设计模式之复合模式&quot;&gt;&lt;a href=&quot;#设计模式之复合模式&quot; class=&quot;headerlink&quot; title=&quot;设计模式之复合模式&quot;&gt;&lt;/a&gt;设计模式之复合模式&lt;/h1&gt;&lt;h2 id=&quot;1-什么是复合模式&quot;&gt;&lt;a href=&quot;#1-什么是复合模式&quot; class=&quot;headerlink&quot; title=&quot;1. 什么是复合模式&quot;&gt;&lt;/a&gt;1. 什么是复合模式&lt;/h2&gt;&lt;p&gt;在形式上，复合模式确实是多个模式的组合，但满足了这一条并不一定是复合模式，注意它的定义：将多个模式结合起来形成一个“框架”，以解决一般性问题。一提到“框架”，可能最容易联想到的就是MVC吧，不过MVC确实是一个经典的复合模式。&lt;/p&gt;
    
    </summary>
    
      <category term="设计模式" scheme="https://songwell1024.github.io/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="设计模式" scheme="https://songwell1024.github.io/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
      <category term="复合模式" scheme="https://songwell1024.github.io/tags/%E5%A4%8D%E5%90%88%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>设计模式之组合模式</title>
    <link href="https://songwell1024.github.io/2018/10/17/CompositeMode/"/>
    <id>https://songwell1024.github.io/2018/10/17/CompositeMode/</id>
    <published>2018-10-17T01:02:42.000Z</published>
    <updated>2018-10-17T01:04:28.816Z</updated>
    
    <content type="html"><![CDATA[<h1 id="设计模式之组合模式"><a href="#设计模式之组合模式" class="headerlink" title="设计模式之组合模式"></a>设计模式之组合模式</h1><h2 id="1-什么是组合模式"><a href="#1-什么是组合模式" class="headerlink" title="1. 什么是组合模式"></a>1. 什么是组合模式</h2><p>Composite模式也叫组合模式，是构造型的设计模式之一。通过递归手段来构造树形的对象结构，并可以通过一个对象来访问整个对象树。</p><a id="more"></a><p>换一种说法就是组合模式将对象聚合成树形结构来表现“整体/部分”的层次结构。组合模式能让客户以一致的方式来处理个别对象以及对象组合。<br>也就是我们可以忽略对象组合与个体对象之间的差别。</p><p>组合模式的结构：</p><p><img src="/2018/10/17/CompositeMode/1.png" alt="1"></p><ul><li>Component （树形结构的节点抽象）<ul><li>为所有的对象定义统一的接口（公共属性，行为等的定义）</li><li>提供管理子节点对象的接口方法</li><li>[可选]提供管理父节点对象的接口方法</li></ul></li><li>Leaf （树形结构的叶节点）</li><li>Component的实现子类</li><li>Composite（树形结构的枝节点）</li><li>Component的实现子类</li></ul><h2 id="2-具体实例"><a href="#2-具体实例" class="headerlink" title="2. 具体实例"></a>2. 具体实例</h2><p>在具体的例子中去只看一下具体是怎么实现和使用的。例子都是书上的例子。</p><p>这次的实例还是使用的是那个迭代器模式中的例子。具体的就不在描述了，具体放入可以参考那篇文章。</p><p>这次呢就是在那个的基础上我们需要添加新的子菜单，不是添加的某一个菜单，而是在一个菜单项中添加一个子菜单。如下图示：</p><p><img src="/2018/10/17/CompositeMode/2.png" alt="2"></p><p>这样的话我们按照原来的迭代器的设计就是需要修改那个DinerMenu,并且还要抽取其中的Item变为类，然后需要这个子类去继承他。而且迭代的方法也需要修改，这样的话太费劲了，而且每加一个子菜单都要进行修改，维护成本太大。所以需要一个新的模式来重新设计他。</p><p>怎么设计呢？</p><p>就是我们把所有的菜单项都设计成一种结构，然后统一的去迭代他。要想抽象成一种结构的话需要一个统一的超类供继承和扩展。我们这里把整个项目设计成一个树形的结构。每个节点的类型都是相同的。节点是菜单或子菜单，叶子是菜单项需要能够在各个菜单项之间游走，遍历要能够有弹性的在菜单项之间游走。</p><p>项目类图结构：</p><p><img src="/2018/10/17/CompositeMode/3.png" alt="3"></p><p>具体代码实现：</p><p>首先是所有的节点都需要继承的那个抽象类，也就是所有的菜单项都需要继承的类，把通用的方法全部抽取出来：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">MenuComponent</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">""</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getDescription</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">""</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">float</span> <span class="title">getPrice</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isVegetable</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> Iterator <span class="title">getIterator</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> NullIterator();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>具体的菜单项：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MenuItem</span> <span class="keyword">extends</span> <span class="title">MenuComponent</span></span>&#123;</span><br><span class="line"><span class="keyword">private</span> String name,description;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">boolean</span> vegetable;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">float</span> price;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">MenuItem</span><span class="params">(String name,String description,<span class="keyword">boolean</span> vegetable,<span class="keyword">float</span> price)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">this</span>.name=name;</span><br><span class="line"><span class="keyword">this</span>.description=description;</span><br><span class="line"><span class="keyword">this</span>.vegetable=vegetable;</span><br><span class="line"><span class="keyword">this</span>.price=price;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> name;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getDescription</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> description;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">float</span> <span class="title">getPrice</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> price;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span>  <span class="title">isVegetable</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> vegetable;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">System.out.println(getName() + <span class="string">"***"</span> + getPrice() + <span class="string">"***"</span></span><br><span class="line">+ getDescription());</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>子菜单：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DinerMenu</span> <span class="keyword">extends</span> <span class="title">MenuComponent</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="keyword">int</span> Max_Items = <span class="number">5</span>;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> numberOfItems = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">private</span> MenuComponent[] menuItems;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">DinerMenu</span><span class="params">()</span> </span>&#123;</span><br><span class="line">menuItems = <span class="keyword">new</span> MenuComponent[Max_Items];</span><br><span class="line">addItem(<span class="string">"vegetable Blt"</span>, <span class="string">"bacon&amp;lettuce&amp;tomato&amp;cabbage"</span>, <span class="keyword">true</span>, <span class="number">3.58f</span>);</span><br><span class="line">addItem(<span class="string">"Blt"</span>, <span class="string">"bacon&amp;lettuce&amp;tomato"</span>, <span class="keyword">false</span>, <span class="number">3.00f</span>);</span><br><span class="line">addItem(<span class="string">"bean soup"</span>, <span class="string">"bean&amp;potato salad"</span>, <span class="keyword">true</span>, <span class="number">3.28f</span>);</span><br><span class="line">addItem(<span class="string">"hotdog"</span>, <span class="string">"onions&amp;cheese&amp;bread"</span>, <span class="keyword">false</span>, <span class="number">3.05f</span>);</span><br><span class="line">addSubMenu(<span class="keyword">new</span> SubMenu());</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">addItem</span><span class="params">(String name, String description, <span class="keyword">boolean</span> vegetable,</span></span></span><br><span class="line"><span class="function"><span class="params"><span class="keyword">float</span> price)</span> </span>&#123;</span><br><span class="line">MenuItem menuItem = <span class="keyword">new</span> MenuItem(name, description, vegetable, price);</span><br><span class="line"><span class="keyword">if</span> (numberOfItems &gt;= Max_Items) &#123;</span><br><span class="line">System.err.println(<span class="string">"sorry,menu is full!can not add another item"</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">menuItems[numberOfItems] = menuItem;</span><br><span class="line">numberOfItems++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">addSubMenu</span><span class="params">(MenuComponent mMenuComponent)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (numberOfItems &gt;= Max_Items) &#123;</span><br><span class="line">System.err.println(<span class="string">"sorry,menu is full!can not add another item"</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">menuItems[numberOfItems] = mMenuComponent;</span><br><span class="line">numberOfItems++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> Iterator <span class="title">getIterator</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> ComposeIterator(<span class="keyword">new</span> DinerIterator());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DinerIterator</span> <span class="keyword">implements</span> <span class="title">Iterator</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> position;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">DinerIterator</span><span class="params">()</span> </span>&#123;</span><br><span class="line">position = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">hasNext</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line"><span class="keyword">if</span> (position &lt; numberOfItems) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">next</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">MenuComponent menuItem = menuItems[position];</span><br><span class="line">position++;</span><br><span class="line"><span class="keyword">return</span> menuItem;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">remove</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">System.out.println(<span class="string">"****This is DinerMenu****"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CakeHouseMenu</span> <span class="keyword">extends</span> <span class="title">MenuComponent</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> ArrayList&lt;MenuComponent&gt; menuItems;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">CakeHouseMenu</span><span class="params">()</span> </span>&#123;</span><br><span class="line">menuItems = <span class="keyword">new</span> ArrayList&lt;MenuComponent&gt;();</span><br><span class="line"></span><br><span class="line">addItem(<span class="string">"KFC Cake Breakfast"</span>, <span class="string">"boiled eggs&amp;toast&amp;cabbage"</span>, <span class="keyword">true</span>, <span class="number">3.99f</span>);</span><br><span class="line">addItem(<span class="string">"MDL Cake Breakfast"</span>, <span class="string">"fried eggs&amp;toast"</span>, <span class="keyword">false</span>, <span class="number">3.59f</span>);</span><br><span class="line">addItem(<span class="string">"Stawberry Cake"</span>, <span class="string">"fresh stawberry"</span>, <span class="keyword">true</span>, <span class="number">3.29f</span>);</span><br><span class="line">addItem(<span class="string">"Regular Cake Breakfast"</span>, <span class="string">"toast&amp;sausage"</span>, <span class="keyword">true</span>, <span class="number">2.59f</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">addItem</span><span class="params">(String name, String description, <span class="keyword">boolean</span> vegetable,</span></span></span><br><span class="line"><span class="function"><span class="params"><span class="keyword">float</span> price)</span> </span>&#123;</span><br><span class="line">MenuItem menuItem = <span class="keyword">new</span> MenuItem(name, description, vegetable, price);</span><br><span class="line">menuItems.add(menuItem);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> Iterator <span class="title">getIterator</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> ComposeIterator(menuItems.iterator());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">System.out.println(<span class="string">"****This is CakeHouseMenu****"</span>);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 其他功能代码</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>等等…</p><p>然后需要一个统一的迭代器来遍历这个树，怎么遍历呢？使用堆栈进行遍历？具体的遍历方法可以参考我之前写的二分搜索树的介绍的文章，非递归方式遍历，这里大同小异。下面就是一个组合迭代器，确保所有的子菜单都要包含进来：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ComposeIterator</span> <span class="keyword">implements</span> <span class="title">Iterator</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> Stack&lt;Iterator&gt; stack = <span class="keyword">new</span> Stack&lt;Iterator&gt;();</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">ComposeIterator</span><span class="params">(Iterator iterator)</span> </span>&#123;</span><br><span class="line">stack.push(iterator);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">hasNext</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line"><span class="keyword">if</span> (stack.empty()) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br><span class="line">Iterator iterator = stack.peek();</span><br><span class="line"><span class="keyword">if</span> (!iterator.hasNext()) &#123;</span><br><span class="line">stack.pop();</span><br><span class="line"><span class="keyword">return</span> hasNext();</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">next</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line"><span class="keyword">if</span> (hasNext()) &#123;</span><br><span class="line">Iterator iterator = stack.peek();</span><br><span class="line">MenuComponent mMenuComponent = (MenuComponent) iterator.next();</span><br><span class="line">stack.push(mMenuComponent.getIterator());</span><br><span class="line"><span class="keyword">return</span> mMenuComponent;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">remove</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当我们的菜单中什么都没有，也就是没有需要打印的东西的话怎么办呢？需要设计一个空的迭代器:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NullIterator</span> <span class="keyword">implements</span> <span class="title">Iterator</span></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">hasNext</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line"><span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">next</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line"><span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">remove</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>前台打印菜单的：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Waitress</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> ArrayList&lt;MenuComponent&gt; iterators = <span class="keyword">new</span> ArrayList&lt;MenuComponent&gt;();</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Waitress</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addComponent</span><span class="params">(MenuComponent mMenuComponent)</span> </span>&#123;</span><br><span class="line">iterators.add(mMenuComponent);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">printMenu</span><span class="params">()</span> </span>&#123;</span><br><span class="line">Iterator iterator;</span><br><span class="line">MenuComponent menuItem;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>, len = iterators.size(); i &lt; len; i++) &#123;</span><br><span class="line">iterators.get(i).print();</span><br><span class="line">iterator = iterators.get(i).getIterator();</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (iterator.hasNext()) &#123;</span><br><span class="line">menuItem = (MenuComponent) iterator.next();</span><br><span class="line">menuItem.print();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">printBreakfastMenu</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">printLunchMenu</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">printVegetableMenu</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">Iterator iterator;</span><br><span class="line">MenuComponent menuItem;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>, len = iterators.size(); i &lt; len; i++) &#123;</span><br><span class="line">iterators.get(i).print();</span><br><span class="line">iterator = iterators.get(i).getIterator();</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (iterator.hasNext()) &#123;</span><br><span class="line">menuItem = (MenuComponent) iterator.next();</span><br><span class="line"><span class="keyword">if</span> (menuItem.isVegetable()) &#123;</span><br><span class="line">menuItem.print();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainTest</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">Waitress mWaitress = <span class="keyword">new</span> Waitress();</span><br><span class="line">CakeHouseMenu mCakeHouseMenu = <span class="keyword">new</span> CakeHouseMenu();</span><br><span class="line">DinerMenu mDinerMenu = <span class="keyword">new</span> DinerMenu();</span><br><span class="line">mWaitress.addComponent(mCakeHouseMenu);</span><br><span class="line">mWaitress.addComponent(mDinerMenu);</span><br><span class="line">mWaitress.printVegetableMenu();;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过上面的实例我们就使用组合模式重新设计了原来的项目，通过组合的模式将Waitress 与具体的子菜单进行了解耦，也就是Waitress 只需要使用MenuComponent，而不用去关心具体的子菜单是怎么实现的。</p><p>当我们有一系列的对象集合的时候，并且彼此之间还有整体和部分的关系，你需要用一致性的方法来处理这些对象的时候就需要组合模式，例如上面的统一的去遍历所有的菜单对象。而且组合内的所有方法是都要实现一个统一的接口的，要不然客户就需要操心那个对象使用那个接口，失去了组合模式的意义，但是这样子的话其实有些对象也就需要实现一些没有意义的方法。但是你可以让这些方法都返回null或者不处理任何事情就可以了。组合模式一般是使用树形结构这种层次结构。根就是顶层的组合。而且孩子节点也可以有指向父亲节点的指针，这样的设计会使得对象的游走遍历更加的方便。</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;设计模式之组合模式&quot;&gt;&lt;a href=&quot;#设计模式之组合模式&quot; class=&quot;headerlink&quot; title=&quot;设计模式之组合模式&quot;&gt;&lt;/a&gt;设计模式之组合模式&lt;/h1&gt;&lt;h2 id=&quot;1-什么是组合模式&quot;&gt;&lt;a href=&quot;#1-什么是组合模式&quot; class=&quot;headerlink&quot; title=&quot;1. 什么是组合模式&quot;&gt;&lt;/a&gt;1. 什么是组合模式&lt;/h2&gt;&lt;p&gt;Composite模式也叫组合模式，是构造型的设计模式之一。通过递归手段来构造树形的对象结构，并可以通过一个对象来访问整个对象树。&lt;/p&gt;
    
    </summary>
    
      <category term="设计模式" scheme="https://songwell1024.github.io/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="设计模式" scheme="https://songwell1024.github.io/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
      <category term="组合模式" scheme="https://songwell1024.github.io/tags/%E7%BB%84%E5%90%88%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
</feed>
